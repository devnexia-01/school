{"file_contents":{"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/lib/auth\";\nimport { lazy, Suspense } from \"react\";\n\nconst Login = lazy(() => import(\"@/pages/Login\"));\nconst Dashboard = lazy(() => import(\"@/pages/Dashboard\"));\nconst Students = lazy(() => import(\"@/pages/Students\"));\nconst AddStudent = lazy(() => import(\"@/pages/AddStudent\"));\nconst Attendance = lazy(() => import(\"@/pages/Attendance\"));\nconst Academics = lazy(() => import(\"@/pages/Academics\"));\nconst Fees = lazy(() => import(\"@/pages/Fees\"));\nconst Examinations = lazy(() => import(\"@/pages/Examinations\"));\nconst Communication = lazy(() => import(\"@/pages/Communication\"));\nconst Faculty = lazy(() => import(\"@/pages/Faculty\"));\nconst Timetable = lazy(() => import(\"@/pages/Timetable\"));\nconst Transport = lazy(() => import(\"@/pages/Transport\"));\nconst Payroll = lazy(() => import(\"@/pages/Payroll\"));\nconst LeaveManagement = lazy(() => import(\"@/pages/LeaveManagement\"));\nconst Reports = lazy(() => import(\"@/pages/Reports\"));\nconst Tenants = lazy(() => import(\"@/pages/Tenants\"));\nconst SupportTickets = lazy(() => import(\"@/pages/SupportTickets\"));\nconst Profile = lazy(() => import(\"@/pages/Profile\"));\nconst Preferences = lazy(() => import(\"@/pages/Preferences\"));\nconst NotFound = lazy(() => import(\"@/pages/NotFound\"));\n\nfunction LoadingSpinner() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n    </div>\n  );\n}\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return <LoadingSpinner />;\n  }\n\n  if (!user) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <Suspense fallback={<LoadingSpinner />}>\n      <Component />\n    </Suspense>\n  );\n}\n\nfunction PublicRoute({ component: Component }: { component: React.ComponentType }) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return <LoadingSpinner />;\n  }\n\n  if (user) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <Suspense fallback={<LoadingSpinner />}>\n      <Component />\n    </Suspense>\n  );\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\">\n        <PublicRoute component={Login} />\n      </Route>\n      <Route path=\"/\">\n        <ProtectedRoute component={Dashboard} />\n      </Route>\n      <Route path=\"/dashboard\">\n        <ProtectedRoute component={Dashboard} />\n      </Route>\n      <Route path=\"/students\">\n        <ProtectedRoute component={Students} />\n      </Route>\n      <Route path=\"/students/add\">\n        <ProtectedRoute component={AddStudent} />\n      </Route>\n      <Route path=\"/attendance\">\n        <ProtectedRoute component={Attendance} />\n      </Route>\n      <Route path=\"/academics\">\n        <ProtectedRoute component={Academics} />\n      </Route>\n      <Route path=\"/fees\">\n        <ProtectedRoute component={Fees} />\n      </Route>\n      <Route path=\"/examinations\">\n        <ProtectedRoute component={Examinations} />\n      </Route>\n      <Route path=\"/communication\">\n        <ProtectedRoute component={Communication} />\n      </Route>\n      <Route path=\"/faculty\">\n        <ProtectedRoute component={Faculty} />\n      </Route>\n      <Route path=\"/timetable\">\n        <ProtectedRoute component={Timetable} />\n      </Route>\n      <Route path=\"/transport\">\n        <ProtectedRoute component={Transport} />\n      </Route>\n      <Route path=\"/payroll\">\n        <ProtectedRoute component={Payroll} />\n      </Route>\n      <Route path=\"/leave-management\">\n        <ProtectedRoute component={LeaveManagement} />\n      </Route>\n      <Route path=\"/reports\">\n        <ProtectedRoute component={Reports} />\n      </Route>\n      <Route path=\"/tenants\">\n        <ProtectedRoute component={Tenants} />\n      </Route>\n      <Route path=\"/support-tickets\">\n        <ProtectedRoute component={SupportTickets} />\n      </Route>\n      <Route path=\"/profile\">\n        <ProtectedRoute component={Profile} />\n      </Route>\n      <Route path=\"/preferences\">\n        <ProtectedRoute component={Preferences} />\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":4744},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 222 47% 11%;\n\n  --border: 214 32% 91%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 222 47% 11%;\n\n  --card-border: 214 20% 93%;\n\n  --sidebar: 210 20% 96%;\n\n  --sidebar-foreground: 222 47% 11%;\n\n  --sidebar-border: 214 20% 90%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 210 16% 93%;\n\n  --sidebar-accent-foreground: 222 47% 11%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 0 0% 96%;\n\n  --popover-foreground: 222 47% 11%;\n\n  --popover-border: 214 20% 88%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 210 16% 93%;\n\n  --secondary-foreground: 222 47% 11%;\n\n  --muted: 210 16% 93%;\n\n  --muted-foreground: 215 16% 47%;\n\n  --accent: 210 16% 93%;\n\n  --accent-foreground: 222 47% 11%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 214 32% 80%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 271 91% 65%;\n  --chart-4: 32 95% 44%;\n  --chart-5: 340 82% 52%;\n\n  --font-sans: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Menlo', 'Monaco', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 10% 10% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 10% 10% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 10% 10% / 0.06), 0px 1px 2px -1px hsl(220 10% 10% / 0.10);\n  --shadow: 0px 4px 6px -1px hsl(220 10% 10% / 0.08), 0px 2px 4px -2px hsl(220 10% 10% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(220 10% 10% / 0.08), 0px 3px 6px -3px hsl(220 10% 10% / 0.10);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 10% 10% / 0.10), 0px 4px 8px -4px hsl(220 10% 10% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(220 10% 10% / 0.12), 0px 8px 16px -6px hsl(220 10% 10% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 10% 10% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 47% 11%;\n\n  --foreground: 210 40% 98%;\n\n  --border: 217 33% 17%;\n\n  --card: 220 39% 14%;\n\n  --card-foreground: 210 40% 98%;\n\n  --card-border: 217 33% 18%;\n\n  --sidebar: 218 35% 16%;\n\n  --sidebar-foreground: 210 40% 98%;\n\n  --sidebar-border: 217 33% 20%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 217 19% 20%;\n\n  --sidebar-accent-foreground: 210 40% 98%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 217 32% 18%;\n\n  --popover-foreground: 210 40% 98%;\n\n  --popover-border: 217 33% 22%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 217 19% 20%;\n\n  --secondary-foreground: 210 40% 98%;\n\n  --muted: 217 19% 20%;\n\n  --muted-foreground: 215 20% 65%;\n\n  --accent: 217 19% 20%;\n\n  --accent-foreground: 210 40% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 217 33% 32%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 70%;\n  --chart-2: 142 76% 56%;\n  --chart-3: 271 91% 75%;\n  --chart-4: 32 95% 64%;\n  --chart-5: 340 82% 62%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 40% 2% / 0.40);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 40% 2% / 0.50);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 40% 2% / 0.40), 0px 1px 2px -1px hsl(220 40% 2% / 0.50);\n  --shadow: 0px 4px 6px -1px hsl(220 40% 2% / 0.45), 0px 2px 4px -2px hsl(220 40% 2% / 0.40);\n  --shadow-md: 0px 6px 12px -2px hsl(220 40% 2% / 0.50), 0px 3px 6px -3px hsl(220 40% 2% / 0.55);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 40% 2% / 0.55), 0px 4px 8px -4px hsl(220 40% 2% / 0.50);\n  --shadow-xl: 0px 20px 30px -6px hsl(220 40% 2% / 0.60), 0px 8px 16px -6px hsl(220 40% 2% / 0.55);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 40% 2% / 0.65);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9953},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options?: RequestInit\n): Promise<Response> {\n  const res = await fetch(url, {\n    ...options,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options?.headers,\n    },\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1338},"client/src/pages/Faculty.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { DataTable } from '@/components/shared/DataTable';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Plus, Search, Download, Edit2, Trash2 } from 'lucide-react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { z } from 'zod';\n\nconst facultyFormSchema = z.object({\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters').optional(),\n  phone: z.string().optional(),\n  role: z.enum(['faculty', 'principal']).default('faculty'),\n});\n\ntype FacultyFormData = z.infer<typeof facultyFormSchema>;\n\ninterface FacultyMember {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  avatar?: string;\n  active: boolean;\n  createdAt: Date;\n}\n\nexport default function Faculty() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [roleFilter, setRoleFilter] = useState('all');\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedFaculty, setSelectedFaculty] = useState<FacultyMember | null>(null);\n\n  const canManageFaculty = user && ['admin', 'principal'].includes(user.role);\n\n  const { data, isLoading } = useQuery<{ faculty: FacultyMember[] }>({\n    queryKey: ['/api/faculty'],\n  });\n\n  const facultyMembers = data?.faculty || [];\n\n  const form = useForm<FacultyFormData>({\n    resolver: zodResolver(facultyFormSchema),\n    defaultValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      phone: '',\n      role: 'faculty',\n    },\n  });\n\n  const addMutation = useMutation({\n    mutationFn: (data: FacultyFormData) => apiRequest('/api/faculty', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/faculty'] });\n      toast({\n        title: 'Faculty Added',\n        description: 'New faculty member has been added successfully.',\n      });\n      setIsAddDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to add faculty member',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<FacultyFormData> }) =>\n      apiRequest(`/api/faculty/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/faculty'] });\n      toast({\n        title: 'Faculty Updated',\n        description: 'Faculty member has been updated successfully.',\n      });\n      setIsEditDialogOpen(false);\n      setSelectedFaculty(null);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update faculty member',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/faculty/${id}`, {\n      method: 'DELETE',\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/faculty'] });\n      toast({\n        title: 'Faculty Removed',\n        description: 'Faculty member has been removed from the system.',\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete faculty member',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const filteredFaculty = facultyMembers.filter((faculty: any) => {\n    const matchesSearch = searchQuery === '' || \n      faculty.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      faculty.email.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesRole = roleFilter === 'all' || faculty.role === roleFilter;\n    \n    return matchesSearch && matchesRole;\n  });\n\n  const onSubmit = (data: FacultyFormData) => {\n    if (selectedFaculty) {\n      updateMutation.mutate({ id: selectedFaculty.id, data });\n    } else {\n      addMutation.mutate(data);\n    }\n  };\n\n  const handleEditFaculty = (faculty: FacultyMember) => {\n    setSelectedFaculty(faculty);\n    const nameParts = faculty.name.split(' ');\n    form.reset({\n      firstName: nameParts[0] || '',\n      lastName: nameParts.slice(1).join(' ') || '',\n      email: faculty.email,\n      password: '',\n      phone: faculty.phone || '',\n      role: faculty.role as 'faculty' | 'principal',\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDeleteFaculty = (faculty: any) => {\n    if (confirm(`Are you sure you want to remove ${faculty.name}?`)) {\n      deleteMutation.mutate(faculty.id);\n    }\n  };\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-7xl\">\n        <Breadcrumb items={[{ label: 'Faculty Management' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">Faculty Management</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage faculty members and their information</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" data-testid=\"button-export-faculty\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export\n            </Button>\n            {canManageFaculty && (\n              <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-faculty\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Add Faculty\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>Add New Faculty Member</DialogTitle>\n                    <DialogDescription>Enter the details of the new faculty member</DialogDescription>\n                  </DialogHeader>\n                  <Form {...form}>\n                    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"John\" data-testid=\"input-first-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"Doe\" data-testid=\"input-last-name\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"email\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Email</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"email\" placeholder=\"john.doe@school.com\" data-testid=\"input-email\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"password\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Password</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"password\" placeholder=\"••••••\" data-testid=\"input-password\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"phone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Phone</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"+1-555-0000\" data-testid=\"input-phone\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"role\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Role</FormLabel>\n                              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-role\">\n                                    <SelectValue placeholder=\"Select role\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"faculty\">Faculty</SelectItem>\n                                  <SelectItem value=\"principal\">Principal</SelectItem>\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <DialogFooter>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            setIsAddDialogOpen(false);\n                            form.reset();\n                          }}\n                          data-testid=\"button-cancel\"\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={addMutation.isPending}\n                          data-testid=\"button-save-faculty\"\n                        >\n                          {addMutation.isPending ? 'Adding...' : 'Add Faculty'}\n                        </Button>\n                      </DialogFooter>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n            )}\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Faculty Members</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex gap-4 mb-6\">\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  placeholder=\"Search by name or email...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-faculty\"\n                />\n              </div>\n              <Select value={roleFilter} onValueChange={setRoleFilter}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-role-filter\">\n                  <SelectValue placeholder=\"All Roles\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Roles</SelectItem>\n                  <SelectItem value=\"faculty\">Faculty</SelectItem>\n                  <SelectItem value=\"principal\">Principal</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {isLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Loading faculty members...</div>\n            ) : (\n              <DataTable\n                data={filteredFaculty}\n                emptyMessage=\"No faculty members found\"\n                columns={[\n                  {\n                    key: 'name',\n                    header: 'Faculty Member',\n                    cell: (item) => (\n                      <div className=\"flex items-center gap-3\">\n                        <Avatar>\n                          <AvatarImage src={item.avatar} />\n                          <AvatarFallback>{item.name.split(' ').map((n: string) => n[0]).join('')}</AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium\">{item.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">{item.email}</p>\n                        </div>\n                      </div>\n                    ),\n                  },\n                  {\n                    key: 'role',\n                    header: 'Role',\n                    cell: (item) => (\n                      <Badge variant={item.role === 'principal' ? 'default' : 'secondary'}>\n                        {item.role === 'principal' ? 'Principal' : 'Faculty'}\n                      </Badge>\n                    ),\n                  },\n                  {\n                    key: 'phone',\n                    header: 'Phone',\n                    cell: (item) => item.phone || 'N/A',\n                  },\n                  {\n                    key: 'status',\n                    header: 'Status',\n                    cell: (item) => (\n                      <Badge variant={item.active ? 'default' : 'secondary'}>\n                        {item.active ? 'Active' : 'Inactive'}\n                      </Badge>\n                    ),\n                  },\n                  {\n                    key: 'actions',\n                    header: 'Actions',\n                    cell: (item) => canManageFaculty ? (\n                      <div className=\"flex items-center gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEditFaculty(item)}\n                          data-testid={`button-edit-faculty-${item.id}`}\n                        >\n                          <Edit2 className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteFaculty(item)}\n                          disabled={deleteMutation.isPending}\n                          data-testid={`button-delete-faculty-${item.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4 text-destructive\" />\n                        </Button>\n                      </div>\n                    ) : null,\n                  },\n                ]}\n              />\n            )}\n          </CardContent>\n        </Card>\n\n        <Dialog open={isEditDialogOpen} onOpenChange={(open) => {\n          setIsEditDialogOpen(open);\n          if (!open) {\n            setSelectedFaculty(null);\n            form.reset();\n          }\n        }}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit Faculty Member</DialogTitle>\n              <DialogDescription>Update the details of the faculty member</DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"John\" data-testid=\"input-edit-first-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Doe\" data-testid=\"input-edit-last-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"email\" placeholder=\"john.doe@school.com\" data-testid=\"input-edit-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password (Leave blank to keep current)</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"password\" placeholder=\"••••••\" data-testid=\"input-edit-password\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"+1-555-0000\" data-testid=\"input-edit-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"role\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Role</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-role\">\n                              <SelectValue placeholder=\"Select role\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"faculty\">Faculty</SelectItem>\n                            <SelectItem value=\"principal\">Principal</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsEditDialogOpen(false);\n                      setSelectedFaculty(null);\n                      form.reset();\n                    }}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={updateMutation.isPending}\n                    data-testid=\"button-update-faculty\"\n                  >\n                    {updateMutation.isPending ? 'Updating...' : 'Update Faculty'}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":22358},"client/src/pages/NotFound.tsx":{"content":"import { Button } from '@/components/ui/button';\nimport { Link } from 'wouter';\nimport { Home, FileQuestion } from 'lucide-react';\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n      <div className=\"text-center space-y-6 max-w-md\">\n        <div className=\"inline-flex h-20 w-20 items-center justify-center rounded-full bg-muted\">\n          <FileQuestion className=\"h-10 w-10 text-muted-foreground\" />\n        </div>\n        \n        <div className=\"space-y-2\">\n          <h1 className=\"text-4xl font-semibold\">404</h1>\n          <p className=\"text-xl font-medium\">Page Not Found</p>\n          <p className=\"text-muted-foreground\">\n            The page you're looking for doesn't exist or has been moved.\n          </p>\n        </div>\n\n        <Link href=\"/dashboard\">\n          <Button data-testid=\"button-back-home\">\n            <Home className=\"mr-2 h-4 w-4\" />\n            Back to Dashboard\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1050},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/pages/Tenants.tsx":{"content":"import { useState } from 'react';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { DataTable } from '@/components/shared/DataTable';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Plus, Edit2, Building2, Users, GraduationCap } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { StatCard } from '@/components/shared/StatCard';\nimport { formatCurrencyINR } from '@/lib/utils';\n\nexport default function Tenants() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n\n  const canManageTenants = user && user.role === 'super_admin';\n\n  const tenants = [\n    {\n      id: '1',\n      name: 'Springfield High School',\n      code: 'SHS001',\n      email: 'admin@springfield.edu',\n      phone: '+1-555-0100',\n      address: '123 Education Lane, Springfield',\n      studentsCount: 610,\n      facultyCount: 45,\n      plan: 'Premium',\n      status: 'active',\n      subscription: {\n        startDate: '2024-01-01',\n        endDate: '2025-12-31',\n        price: 5000,\n      },\n    },\n    {\n      id: '2',\n      name: 'Riverside Academy',\n      code: 'RA002',\n      email: 'admin@riverside.edu',\n      phone: '+1-555-0200',\n      address: '456 River Road, Riverside',\n      studentsCount: 450,\n      facultyCount: 35,\n      plan: 'Standard',\n      status: 'active',\n      subscription: {\n        startDate: '2024-02-01',\n        endDate: '2025-01-31',\n        price: 3000,\n      },\n    },\n    {\n      id: '3',\n      name: 'Greenwood International',\n      code: 'GI003',\n      email: 'admin@greenwood.edu',\n      phone: '+1-555-0300',\n      address: '789 Green Avenue, Greenwood',\n      studentsCount: 820,\n      facultyCount: 62,\n      plan: 'Enterprise',\n      status: 'active',\n      subscription: {\n        startDate: '2023-09-01',\n        endDate: '2025-08-31',\n        price: 8000,\n      },\n    },\n    {\n      id: '4',\n      name: 'Oakdale School',\n      code: 'OS004',\n      email: 'admin@oakdale.edu',\n      phone: '+1-555-0400',\n      address: '321 Oak Street, Oakdale',\n      studentsCount: 280,\n      facultyCount: 22,\n      plan: 'Basic',\n      status: 'trial',\n      subscription: {\n        startDate: '2025-01-15',\n        endDate: '2025-02-15',\n        price: 0,\n      },\n    },\n  ];\n\n  const handleAddTenant = () => {\n    toast({\n      title: 'Tenant Added',\n      description: 'New school has been added successfully.',\n    });\n    setIsAddDialogOpen(false);\n  };\n\n  const totalSchools = tenants.length;\n  const totalStudents = tenants.reduce((sum, t) => sum + t.studentsCount, 0);\n  const totalFaculty = tenants.reduce((sum, t) => sum + t.facultyCount, 0);\n  const activeSchools = tenants.filter(t => t.status === 'active').length;\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-7xl\">\n        <Breadcrumb items={[{ label: 'School Management' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">School Management</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage all schools on the platform</p>\n          </div>\n          {canManageTenants && (\n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-tenant\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add School\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Add New School</DialogTitle>\n                  <DialogDescription>Enter the details of the new school</DialogDescription>\n                </DialogHeader>\n                <div className=\"grid grid-cols-2 gap-4 py-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"schoolName\">School Name</Label>\n                    <Input id=\"schoolName\" placeholder=\"Springfield High School\" data-testid=\"input-school-name\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"schoolCode\">School Code</Label>\n                    <Input id=\"schoolCode\" placeholder=\"SHS001\" data-testid=\"input-school-code\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"email\">Email</Label>\n                    <Input id=\"email\" type=\"email\" placeholder=\"admin@school.edu\" data-testid=\"input-email\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"phone\">Phone</Label>\n                    <Input id=\"phone\" placeholder=\"+1-555-0000\" data-testid=\"input-phone\" />\n                  </div>\n                  <div className=\"space-y-2 col-span-2\">\n                    <Label htmlFor=\"address\">Address</Label>\n                    <Input id=\"address\" placeholder=\"123 Main Street\" data-testid=\"input-address\" />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"plan\">Subscription Plan</Label>\n                    <Select>\n                      <SelectTrigger data-testid=\"select-plan\">\n                        <SelectValue placeholder=\"Select plan\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"basic\">Basic - {formatCurrencyINR(1000)}/year</SelectItem>\n                        <SelectItem value=\"standard\">Standard - {formatCurrencyINR(3000)}/year</SelectItem>\n                        <SelectItem value=\"premium\">Premium - {formatCurrencyINR(5000)}/year</SelectItem>\n                        <SelectItem value=\"enterprise\">Enterprise - {formatCurrencyINR(8000)}/year</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"maxStudents\">Max Students</Label>\n                    <Input id=\"maxStudents\" type=\"number\" placeholder=\"500\" data-testid=\"input-max-students\" />\n                  </div>\n                </div>\n                <DialogFooter>\n                  <Button variant=\"outline\" onClick={() => setIsAddDialogOpen(false)} data-testid=\"button-cancel\">\n                    Cancel\n                  </Button>\n                  <Button onClick={handleAddTenant} data-testid=\"button-save-tenant\">\n                    Add School\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <StatCard\n            title=\"Total Schools\"\n            value={totalSchools.toString()}\n            icon={Building2}\n            trend={{ value: 25, label: 'vs last year', isPositive: true }}\n          />\n          <StatCard\n            title=\"Active Schools\"\n            value={activeSchools.toString()}\n            icon={Building2}\n          />\n          <StatCard\n            title=\"Total Students\"\n            value={totalStudents.toLocaleString()}\n            icon={GraduationCap}\n          />\n          <StatCard\n            title=\"Total Faculty\"\n            value={totalFaculty.toString()}\n            icon={Users}\n          />\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>All Schools</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <DataTable\n              data={tenants}\n              emptyMessage=\"No schools found\"\n              columns={[\n                {\n                  key: 'school',\n                  header: 'School',\n                  cell: (item) => (\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"p-2 bg-primary/10 rounded-lg\">\n                        <Building2 className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{item.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{item.code}</p>\n                      </div>\n                    </div>\n                  ),\n                },\n                {\n                  key: 'contact',\n                  header: 'Contact',\n                  cell: (item) => (\n                    <div>\n                      <p className=\"font-medium\">{item.email}</p>\n                      <p className=\"text-sm text-muted-foreground\">{item.phone}</p>\n                    </div>\n                  ),\n                },\n                {\n                  key: 'stats',\n                  header: 'Users',\n                  cell: (item) => (\n                    <div>\n                      <p className=\"font-medium\">{item.studentsCount} Students</p>\n                      <p className=\"text-sm text-muted-foreground\">{item.facultyCount} Faculty</p>\n                    </div>\n                  ),\n                },\n                {\n                  key: 'plan',\n                  header: 'Plan',\n                  cell: (item) => (\n                    <div>\n                      <p className=\"font-medium\">{item.plan}</p>\n                      <p className=\"text-sm text-muted-foreground\">{formatCurrencyINR(item.subscription.price)}/year</p>\n                    </div>\n                  ),\n                },\n                {\n                  key: 'subscription',\n                  header: 'Subscription',\n                  cell: (item) => (\n                    <div>\n                      <p className=\"text-sm\">\n                        {new Date(item.subscription.startDate).toLocaleDateString()} -{' '}\n                        {new Date(item.subscription.endDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                  ),\n                },\n                {\n                  key: 'status',\n                  header: 'Status',\n                  cell: (item) => (\n                    <Badge variant={item.status === 'active' ? 'default' : 'secondary'}>\n                      {item.status}\n                    </Badge>\n                  ),\n                },\n                {\n                  key: 'actions',\n                  header: 'Actions',\n                  cell: (item) => canManageTenants ? (\n                    <div className=\"flex items-center gap-2\">\n                      <Button variant=\"ghost\" size=\"sm\" data-testid={`button-edit-tenant-${item.id}`}>\n                        <Edit2 className=\"h-4 w-4\" />\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" data-testid={`button-manage-tenant-${item.id}`}>\n                        Manage\n                      </Button>\n                    </div>\n                  ) : null,\n                },\n              ]}\n            />\n          </CardContent>\n        </Card>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":11521},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/lib/auth.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useLocation } from 'wouter';\n\nexport type UserRole = 'super_admin' | 'admin' | 'principal' | 'faculty' | 'student' | 'parent';\n\nexport interface AuthUser {\n  id: string;\n  email: string;\n  role: UserRole;\n  firstName: string;\n  lastName: string;\n  tenantId: string | null;\n  avatar?: string;\n}\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('auth_user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    const response = await fetch('/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Invalid credentials');\n    }\n\n    const data = await response.json();\n    setUser(data.user);\n    localStorage.setItem('auth_user', JSON.stringify(data.user));\n    setLocation('/dashboard');\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('auth_user');\n    setLocation('/login');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":1969},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"server/middleware/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport jwt from 'jsonwebtoken';\n\nif (!process.env.SESSION_SECRET) {\n  throw new Error('SESSION_SECRET environment variable must be set');\n}\n\nconst JWT_SECRET = process.env.SESSION_SECRET;\n\nexport interface AuthRequest extends Request {\n  user?: {\n    id: string;\n    email: string;\n    role: string;\n    tenantId: string | null;\n  };\n  tenantId?: string | null;\n}\n\nexport function authenticateToken(req: AuthRequest, res: Response, next: NextFunction) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    const sessionToken = req.cookies?.auth_token;\n    if (!sessionToken) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n    \n    try {\n      const payload = jwt.verify(sessionToken, JWT_SECRET) as any;\n      req.user = payload;\n      req.tenantId = payload.tenantId;\n      return next();\n    } catch (error) {\n      return res.status(403).json({ error: 'Invalid token' });\n    }\n  }\n\n  try {\n    const payload = jwt.verify(token, JWT_SECRET) as any;\n    req.user = payload;\n    req.tenantId = payload.tenantId;\n    next();\n  } catch (error) {\n    return res.status(403).json({ error: 'Invalid token' });\n  }\n}\n\nexport function requireRole(roles: string[]) {\n  return (req: AuthRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ error: 'Authentication required' });\n    }\n\n    if (!roles.includes(req.user.role)) {\n      return res.status(403).json({ error: 'Insufficient permissions' });\n    }\n\n    next();\n  };\n}\n\nexport function tenantIsolation(req: AuthRequest, res: Response, next: NextFunction) {\n  if (!req.user) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n\n  // Super admin must specify tenantId via query/body parameter\n  if (req.user.role === 'super_admin') {\n    const tenantId = req.query.tenantId as string || req.body.tenantId as string;\n    if (!tenantId) {\n      // For super admin viewing their dashboard, use their own tenantId if they have one\n      if (req.user.tenantId) {\n        req.tenantId = req.user.tenantId;\n        return next();\n      }\n      return res.status(400).json({ error: 'Super admin must specify tenantId parameter' });\n    }\n    req.tenantId = tenantId;\n    return next();\n  }\n\n  // All other users must have a tenantId\n  if (!req.user.tenantId) {\n    return res.status(403).json({ error: 'No tenant access' });\n  }\n\n  req.tenantId = req.user.tenantId;\n  next();\n}\n\nexport function generateToken(user: { id: string; email: string; role: string; tenantId: string | null }) {\n  return jwt.sign(user, JWT_SECRET, { expiresIn: '7d' });\n}\n","size_bytes":2733},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/dashboards/PrincipalDashboard.tsx":{"content":"import { StatCard } from '@/components/shared/StatCard';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { BarChart, ClipboardCheck, GraduationCap, Users, CheckCircle2 } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, BarChart as RechartsBarChart, Bar } from 'recharts';\n\nexport function PrincipalDashboard() {\n  const attendanceData = [\n    { month: 'Aug', percentage: 92 },\n    { month: 'Sep', percentage: 89 },\n    { month: 'Oct', percentage: 94 },\n    { month: 'Nov', percentage: 91 },\n    { month: 'Dec', percentage: 88 },\n    { month: 'Jan', percentage: 93 },\n  ];\n\n  const classPerformanceData = [\n    { class: '8th', average: 78 },\n    { class: '9th', average: 82 },\n    { class: '10th', average: 75 },\n    { class: '11th', average: 88 },\n    { class: '12th', average: 85 },\n  ];\n\n  const pendingApprovals = [\n    { id: '1', type: 'Leave Request', from: 'Ms. Anderson', date: 'Today', priority: 'high' },\n    { id: '2', type: 'Expense Approval', from: 'Accounts Dept', date: 'Today', priority: 'medium' },\n    { id: '3', type: 'Admission Request', from: 'Emma Williams', date: 'Yesterday', priority: 'high' },\n    { id: '4', type: 'Curriculum Change', from: 'Mr. Thompson', date: '2 days ago', priority: 'low' },\n  ];\n\n  return (\n    <div className=\"p-6 space-y-8 max-w-7xl\">\n      <div>\n        <h1 className=\"text-3xl font-semibold mb-2\">Principal Dashboard</h1>\n        <p className=\"text-muted-foreground\">Strategic overview and key performance metrics</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Overall Attendance\"\n          value=\"93.2%\"\n          icon={ClipboardCheck}\n          trend={{ value: 2.3, label: 'vs last month', isPositive: true }}\n          testId=\"stat-attendance\"\n        />\n        <StatCard\n          title=\"Exam Performance\"\n          value=\"82.5%\"\n          icon={BarChart}\n          trend={{ value: 4.1, label: 'vs last term', isPositive: true }}\n          testId=\"stat-exam-performance\"\n        />\n        <StatCard\n          title=\"Faculty Count\"\n          value=\"87\"\n          icon={Users}\n          testId=\"stat-faculty-count\"\n        />\n        <StatCard\n          title=\"Pending Approvals\"\n          value=\"12\"\n          icon={CheckCircle2}\n          testId=\"stat-pending-approvals\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Attendance Trends</CardTitle>\n            <CardDescription>Monthly attendance percentage over last 6 months</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <LineChart data={attendanceData}>\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                <XAxis dataKey=\"month\" className=\"text-xs\" />\n                <YAxis className=\"text-xs\" domain={[0, 100]} />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"percentage\" stroke=\"hsl(var(--primary))\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Class-wise Performance</CardTitle>\n            <CardDescription>Average exam scores by grade</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <ResponsiveContainer width=\"100%\" height={250}>\n              <RechartsBarChart data={classPerformanceData}>\n                <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                <XAxis dataKey=\"class\" className=\"text-xs\" />\n                <YAxis className=\"text-xs\" domain={[0, 100]} />\n                <Tooltip />\n                <Bar dataKey=\"average\" fill=\"hsl(var(--primary))\" />\n              </RechartsBarChart>\n            </ResponsiveContainer>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Pending Approvals</CardTitle>\n          <CardDescription>Items requiring your attention</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {pendingApprovals.map((approval) => (\n              <div key={approval.id} className=\"flex items-center justify-between p-4 rounded-lg hover-elevate border\">\n                <div className=\"space-y-1\">\n                  <p className=\"font-medium\">{approval.type}</p>\n                  <p className=\"text-sm text-muted-foreground\">From: {approval.from}</p>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <Badge variant={approval.priority === 'high' ? 'destructive' : approval.priority === 'medium' ? 'default' : 'secondary'}>\n                    {approval.priority}\n                  </Badge>\n                  <span className=\"text-sm text-muted-foreground\">{approval.date}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5238},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/pages/Timetable.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useAuth } from '@/lib/auth';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useToast } from '@/hooks/use-toast';\nimport { Clock, Plus, Pencil, Trash2 } from 'lucide-react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\ninterface TimetableEntry {\n  _id: string;\n  classId: {\n    _id: string;\n    name: string;\n    grade: number;\n    section: string;\n  };\n  subjectId: {\n    _id: string;\n    name: string;\n    code: string;\n  };\n  teacherId: {\n    _id: string;\n    firstName: string;\n    lastName: string;\n  };\n  dayOfWeek: string;\n  startTime: string;\n  endTime: string;\n  roomNumber?: string;\n  academicYear: string;\n}\n\ninterface Class {\n  _id: string;\n  name: string;\n  grade: number;\n  section: string;\n}\n\ninterface Subject {\n  _id: string;\n  name: string;\n  code: string;\n}\n\ninterface Teacher {\n  _id: string;\n  firstName: string;\n  lastName: string;\n}\n\nconst DAYS_MAP: { [key: string]: string } = {\n  monday: 'MONDAY',\n  tuesday: 'TUESDAY',\n  wednesday: 'WEDNESDAY',\n  thursday: 'THURSDAY',\n  friday: 'FRIDAY',\n  saturday: 'SATURDAY',\n};\n\nconst COLORS = [\n  'bg-blue-500 dark:bg-blue-600',\n  'bg-teal-500 dark:bg-teal-600',\n  'bg-purple-500 dark:bg-purple-600',\n  'bg-green-500 dark:bg-green-600',\n  'bg-orange-500 dark:bg-orange-600',\n  'bg-pink-500 dark:bg-pink-600',\n];\n\nconst timetableSchema = z.object({\n  className: z.string().min(1, 'Class name is required'),\n  subjectName: z.string().min(1, 'Subject name is required'),\n  teacherName: z.string().min(1, 'Teacher name is required'),\n  dayOfWeek: z.string().min(1, 'Day of week is required'),\n  startTime: z.string().regex(/^([0-1][0-9]|2[0-3]):[0-5][0-9]$/, 'Start time must be in HH:MM format'),\n  endTime: z.string().regex(/^([0-1][0-9]|2[0-3]):[0-5][0-9]$/, 'End time must be in HH:MM format'),\n  roomNumber: z.string().optional(),\n  academicYear: z.string().min(4, 'Academic year is required'),\n}).refine((data) => {\n  if (data.startTime && data.endTime) {\n    const [startHour, startMin] = data.startTime.split(':').map(Number);\n    const [endHour, endMin] = data.endTime.split(':').map(Number);\n    const startMinutes = startHour * 60 + startMin;\n    const endMinutes = endHour * 60 + endMin;\n    return startMinutes < endMinutes;\n  }\n  return true;\n}, {\n  message: 'End time must be after start time',\n  path: ['endTime'],\n});\n\ntype TimetableFormData = z.infer<typeof timetableSchema>;\n\nfunction calculateDuration(startTime: string, endTime: string): string {\n  const [startHour, startMin] = startTime.split(':').map(Number);\n  const [endHour, endMin] = endTime.split(':').map(Number);\n  const totalMinutes = (endHour * 60 + endMin) - (startHour * 60 + startMin);\n  const hours = totalMinutes / 60;\n  return `${hours.toFixed(1)} hours`;\n}\n\nfunction formatTime(time: string): string {\n  const [hour, minute] = time.split(':').map(Number);\n  const period = hour >= 12 ? 'PM' : 'AM';\n  const displayHour = hour > 12 ? hour - 12 : hour === 0 ? 12 : hour;\n  return `${displayHour}:${minute.toString().padStart(2, '0')} ${period}`;\n}\n\nexport default function Timetable() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedClass, setSelectedClass] = useState<string>('');\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingEntry, setEditingEntry] = useState<TimetableEntry | null>(null);\n\n  const canManage = user?.role === 'admin' || user?.role === 'principal' || user?.role === 'super_admin';\n\n  const { data: classesData } = useQuery<{ classes: Class[] }>({\n    queryKey: ['/api/classes'],\n    enabled: user?.role !== 'student',\n  });\n\n  const { data: subjectsData } = useQuery<{ subjects: Subject[] }>({\n    queryKey: ['/api/subjects'],\n    enabled: canManage,\n  });\n\n  const { data: teachersData } = useQuery<{ faculty: Teacher[] }>({\n    queryKey: ['/api/faculty'],\n    enabled: canManage,\n  });\n\n  const { data: timetableData, isLoading } = useQuery<{ timetable: TimetableEntry[] }>({\n    queryKey: user?.role === 'student' \n      ? ['/api/student/timetable'] \n      : ['/api/timetable', selectedClass],\n    enabled: user?.role === 'student' || !!selectedClass,\n  });\n\n  const classes = classesData?.classes || [];\n  const subjects = subjectsData?.subjects || [];\n  const teachers = teachersData?.faculty || [];\n  const timetable = timetableData?.timetable || [];\n\n  const form = useForm<TimetableFormData>({\n    resolver: zodResolver(timetableSchema),\n    defaultValues: {\n      className: '',\n      subjectName: '',\n      teacherName: '',\n      dayOfWeek: '',\n      startTime: '',\n      endTime: '',\n      roomNumber: '',\n      academicYear: new Date().getFullYear().toString(),\n    },\n  });\n\n  useEffect(() => {\n    if (classes.length > 0 && !selectedClass && user?.role !== 'student') {\n      setSelectedClass(classes[0]._id);\n    }\n  }, [classes, selectedClass, user]);\n\n  useEffect(() => {\n    if (editingEntry) {\n      form.reset({\n        className: `${editingEntry.classId.name}`,\n        subjectName: editingEntry.subjectId.name,\n        teacherName: `${editingEntry.teacherId.firstName} ${editingEntry.teacherId.lastName}`,\n        dayOfWeek: editingEntry.dayOfWeek,\n        startTime: editingEntry.startTime,\n        endTime: editingEntry.endTime,\n        roomNumber: editingEntry.roomNumber || '',\n        academicYear: editingEntry.academicYear,\n      });\n    } else {\n      form.reset({\n        className: '',\n        subjectName: '',\n        teacherName: '',\n        dayOfWeek: '',\n        startTime: '',\n        endTime: '',\n        roomNumber: '',\n        academicYear: new Date().getFullYear().toString(),\n      });\n    }\n  }, [editingEntry, form]);\n\n  const createMutation = useMutation({\n    mutationFn: (data: TimetableFormData) => \n      apiRequest('/api/timetable', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/timetable'] });\n      toast({ title: 'Success', description: 'Timetable entry created successfully' });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: 'Error', \n        description: error.message || 'Failed to create timetable entry',\n        variant: 'destructive'\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: TimetableFormData }) => \n      apiRequest(`/api/timetable/${id}`, {\n        method: 'PUT',\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/timetable'] });\n      toast({ title: 'Success', description: 'Timetable entry updated successfully' });\n      setIsDialogOpen(false);\n      setEditingEntry(null);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({ \n        title: 'Error', \n        description: error.message || 'Failed to update timetable entry',\n        variant: 'destructive'\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => \n      apiRequest(`/api/timetable/${id}`, {\n        method: 'DELETE',\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/timetable'] });\n      toast({ title: 'Success', description: 'Timetable entry deleted successfully' });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: 'Error', \n        description: error.message || 'Failed to delete timetable entry',\n        variant: 'destructive'\n      });\n    },\n  });\n\n  const onSubmit = (data: TimetableFormData) => {\n    if (editingEntry) {\n      updateMutation.mutate({ id: editingEntry._id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (entry: TimetableEntry) => {\n    setEditingEntry(entry);\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm('Are you sure you want to delete this timetable entry?')) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleAddNew = () => {\n    setEditingEntry(null);\n    form.reset({\n      className: '',\n      subjectName: '',\n      teacherName: '',\n      dayOfWeek: '',\n      startTime: '',\n      endTime: '',\n      roomNumber: '',\n      academicYear: new Date().getFullYear().toString(),\n    });\n    setIsDialogOpen(true);\n  };\n\n  const groupedByDay = timetable.reduce((acc, entry) => {\n    const day = entry.dayOfWeek;\n    if (!acc[day]) acc[day] = [];\n    acc[day].push(entry);\n    return acc;\n  }, {} as { [key: string]: TimetableEntry[] });\n\n  const daysToShow = Object.keys(DAYS_MAP).filter(day => groupedByDay[day] && groupedByDay[day].length > 0);\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-7xl\">\n        <Breadcrumb items={[{ label: 'Time Table' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">Time Table</h1>\n            <p className=\"text-muted-foreground mt-1\">Weekly schedule at a glance</p>\n          </div>\n          <Clock className=\"h-8 w-8 text-muted-foreground\" />\n        </div>\n\n        {user?.role !== 'student' && (\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center gap-4 justify-between\">\n                <div className=\"flex items-center gap-4 flex-1\">\n                  <label className=\"text-sm font-medium\">Select Class:</label>\n                  <Select value={selectedClass} onValueChange={setSelectedClass}>\n                    <SelectTrigger className=\"w-[250px]\" data-testid=\"select-class\">\n                      <SelectValue placeholder=\"Select a class\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {classes.map((cls) => (\n                        <SelectItem key={cls._id} value={cls._id}>\n                          Class {cls.grade} {cls.section}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                {canManage && selectedClass && (\n                  <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n                    <DialogTrigger asChild>\n                      <Button onClick={handleAddNew} data-testid=\"button-add-timetable\">\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        Add Entry\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>\n                          {editingEntry ? 'Edit Timetable Entry' : 'Add Timetable Entry'}\n                        </DialogTitle>\n                      </DialogHeader>\n                      <Form {...form}>\n                        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"className\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Class</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., Class 10 A\" {...field} data-testid=\"input-class-name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"subjectName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Subject</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., Mathematics\" {...field} data-testid=\"input-subject-name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"teacherName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Teacher</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., John Smith\" {...field} data-testid=\"input-teacher-name\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"dayOfWeek\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Day of Week</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., Monday\" {...field} data-testid=\"input-day\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <FormField\n                              control={form.control}\n                              name=\"startTime\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Start Time</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"time\" {...field} data-testid=\"input-start-time\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n\n                            <FormField\n                              control={form.control}\n                              name=\"endTime\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>End Time</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"time\" {...field} data-testid=\"input-end-time\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                          </div>\n\n                          <FormField\n                            control={form.control}\n                            name=\"roomNumber\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Room Number (Optional)</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., Room 101\" {...field} data-testid=\"input-room\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"academicYear\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Academic Year</FormLabel>\n                                <FormControl>\n                                  <Input placeholder=\"e.g., 2025\" {...field} data-testid=\"input-year\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <DialogFooter>\n                            <Button \n                              type=\"submit\" \n                              disabled={createMutation.isPending || updateMutation.isPending}\n                              data-testid=\"button-save-timetable\"\n                            >\n                              {editingEntry ? 'Update' : 'Create'}\n                            </Button>\n                          </DialogFooter>\n                        </form>\n                      </Form>\n                    </DialogContent>\n                  </Dialog>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <Skeleton key={i} className=\"h-32 w-full\" />\n            ))}\n          </div>\n        ) : timetable.length === 0 ? (\n          <Card>\n            <CardContent className=\"py-12\">\n              <div className=\"text-center text-muted-foreground\">\n                <p className=\"text-lg font-medium\">No timetable data available</p>\n                <p className=\"text-sm mt-2\">\n                  {user?.role === 'student' \n                    ? 'Your class timetable has not been set up yet.'\n                    : canManage \n                      ? 'Click \"Add Entry\" to create timetable entries.'\n                      : 'Please select a class or add timetable entries.'}\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-6\">\n            {daysToShow.map((day) => (\n              <Card key={day} className=\"overflow-hidden\">\n                <CardHeader className=\"bg-muted/50\">\n                  <CardTitle className=\"text-xl\">{DAYS_MAP[day]}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-wrap gap-4\">\n                    {groupedByDay[day]\n                      .sort((a, b) => a.startTime.localeCompare(b.startTime))\n                      .map((entry, index) => {\n                        const colorClass = COLORS[index % COLORS.length];\n                        const duration = calculateDuration(entry.startTime, entry.endTime);\n                        const timeRange = `${formatTime(entry.startTime)}-${formatTime(entry.endTime)}`;\n\n                        return (\n                          <div\n                            key={entry._id}\n                            className={`${colorClass} text-white rounded-lg p-4 min-w-[200px] flex-1 shadow-md hover:shadow-lg transition-shadow relative group`}\n                            data-testid={`timetable-entry-${entry._id}`}\n                          >\n                            {canManage && (\n                              <div className=\"absolute top-2 right-2 flex gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"secondary\"\n                                  className=\"h-7 w-7 p-0\"\n                                  onClick={() => handleEdit(entry)}\n                                  data-testid={`button-edit-${entry._id}`}\n                                >\n                                  <Pencil className=\"h-3 w-3\" />\n                                </Button>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"destructive\"\n                                  className=\"h-7 w-7 p-0\"\n                                  onClick={() => handleDelete(entry._id)}\n                                  data-testid={`button-delete-${entry._id}`}\n                                  disabled={deleteMutation.isPending}\n                                >\n                                  <Trash2 className=\"h-3 w-3\" />\n                                </Button>\n                              </div>\n                            )}\n                            <div className=\"space-y-2\">\n                              <div className=\"font-semibold text-sm\">{timeRange}</div>\n                              <div className=\"text-xs opacity-90\">{duration}</div>\n                              <div className=\"font-bold text-base mt-2\">\n                                {entry.subjectId?.name || 'Subject'}\n                              </div>\n                              {entry.subjectId?.code && (\n                                <div className=\"text-xs font-medium opacity-90\">\n                                  {entry.subjectId.code}\n                                </div>\n                              )}\n                              {entry.roomNumber && (\n                                <div className=\"text-xs opacity-90 mt-2\">\n                                  {entry.roomNumber}\n                                </div>\n                              )}\n                              {entry.teacherId && (\n                                <div className=\"text-xs opacity-90 mt-1\">\n                                  {entry.teacherId.firstName} {entry.teacherId.lastName}\n                                </div>\n                              )}\n                            </div>\n                          </div>\n                        );\n                      })}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":22601},"client/src/pages/Academics.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Plus } from 'lucide-react';\nimport { DataTable } from '@/components/shared/DataTable';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/lib/auth';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Class {\n  _id: string;\n  name: string;\n  grade: number;\n  section: string;\n  capacity: number;\n  classTeacherId?: string;\n  academicYear: string;\n}\n\ninterface Subject {\n  _id: string;\n  name: string;\n  code: string;\n  description?: string;\n}\n\nconst classSchema = z.object({\n  name: z.string().min(1, 'Class name is required'),\n  grade: z.coerce.number().positive('Grade must be a positive number'),\n  section: z.string().min(1, 'Section is required'),\n  capacity: z.coerce.number().positive('Capacity must be a positive number'),\n  academicYear: z.string().min(4, 'Academic year is required'),\n});\n\nconst subjectSchema = z.object({\n  name: z.string().min(1, 'Subject name is required'),\n  code: z.string().min(1, 'Subject code is required'),\n  description: z.string().optional(),\n});\n\ntype ClassFormData = z.infer<typeof classSchema>;\ntype SubjectFormData = z.infer<typeof subjectSchema>;\n\nexport default function Academics() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isClassDialogOpen, setIsClassDialogOpen] = useState(false);\n  const [isSubjectDialogOpen, setIsSubjectDialogOpen] = useState(false);\n  const canManageAcademics = user && ['admin', 'principal'].includes(user.role);\n  \n  const { data: classesData, isLoading: classesLoading } = useQuery<{ classes: Class[] }>({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: subjectsData, isLoading: subjectsLoading } = useQuery<{ subjects: Subject[] }>({\n    queryKey: ['/api/subjects'],\n  });\n\n  const classes = classesData?.classes || [];\n  const subjects = subjectsData?.subjects || [];\n\n  const classForm = useForm<ClassFormData>({\n    resolver: zodResolver(classSchema),\n    defaultValues: {\n      name: '',\n      grade: 1,\n      section: '',\n      capacity: 40,\n      academicYear: new Date().getFullYear().toString(),\n    },\n  });\n\n  const subjectForm = useForm<SubjectFormData>({\n    resolver: zodResolver(subjectSchema),\n    defaultValues: {\n      name: '',\n      code: '',\n      description: '',\n    },\n  });\n\n  const createClassMutation = useMutation({\n    mutationFn: (data: ClassFormData) =>\n      apiRequest('/api/classes', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/classes'] });\n      toast({ title: 'Success', description: 'Class created successfully' });\n      setIsClassDialogOpen(false);\n      classForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create class',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const createSubjectMutation = useMutation({\n    mutationFn: (data: SubjectFormData) =>\n      apiRequest('/api/subjects', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/subjects'] });\n      toast({ title: 'Success', description: 'Subject created successfully' });\n      setIsSubjectDialogOpen(false);\n      subjectForm.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create subject',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onClassSubmit = (data: ClassFormData) => {\n    createClassMutation.mutate(data);\n  };\n\n  const onSubjectSubmit = (data: SubjectFormData) => {\n    createSubjectMutation.mutate(data);\n  };\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-7xl\">\n        <Breadcrumb items={[{ label: 'Academics' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">Academic Management</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage classes, subjects, and curriculum</p>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"classes\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"classes\" data-testid=\"tab-classes\">Classes</TabsTrigger>\n            <TabsTrigger value=\"subjects\" data-testid=\"tab-subjects\">Subjects</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"classes\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>All Classes</CardTitle>\n                    <CardDescription>Manage class sections and capacity</CardDescription>\n                  </div>\n                  {canManageAcademics && (\n                    <Dialog open={isClassDialogOpen} onOpenChange={setIsClassDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button data-testid=\"button-add-class\">\n                          <Plus className=\"mr-2 h-4 w-4\" />\n                          Add Class\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add New Class</DialogTitle>\n                        </DialogHeader>\n                        <Form {...classForm}>\n                          <form onSubmit={classForm.handleSubmit(onClassSubmit)} className=\"space-y-4\">\n                            <FormField\n                              control={classForm.control}\n                              name=\"name\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Class Name</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"e.g., Class 1A\" {...field} data-testid=\"input-class-name\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <FormField\n                                control={classForm.control}\n                                name=\"grade\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Grade</FormLabel>\n                                    <FormControl>\n                                      <Input type=\"number\" placeholder=\"e.g., 1\" {...field} data-testid=\"input-grade\" />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                              <FormField\n                                control={classForm.control}\n                                name=\"section\"\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel>Section</FormLabel>\n                                    <FormControl>\n                                      <Input placeholder=\"e.g., A\" {...field} data-testid=\"input-section\" />\n                                    </FormControl>\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                            </div>\n                            <FormField\n                              control={classForm.control}\n                              name=\"capacity\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Capacity</FormLabel>\n                                  <FormControl>\n                                    <Input type=\"number\" placeholder=\"e.g., 40\" {...field} data-testid=\"input-capacity\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={classForm.control}\n                              name=\"academicYear\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Academic Year</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"e.g., 2025\" {...field} data-testid=\"input-academic-year\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <DialogFooter>\n                              <Button type=\"submit\" disabled={createClassMutation.isPending} data-testid=\"button-submit-class\">\n                                {createClassMutation.isPending ? 'Creating...' : 'Create Class'}\n                              </Button>\n                            </DialogFooter>\n                          </form>\n                        </Form>\n                      </DialogContent>\n                    </Dialog>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {classesLoading ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">Loading classes...</div>\n                ) : (\n                  <DataTable\n                    data={classes}\n                    emptyMessage=\"No classes found. Add a class to get started.\"\n                    columns={[\n                      {\n                        key: 'name',\n                        header: 'Class Name',\n                        cell: (item) => (\n                          <div>\n                            <p className=\"font-medium\">{item.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">Grade {item.grade} - Section {item.section}</p>\n                          </div>\n                        ),\n                      },\n                      {\n                        key: 'capacity',\n                        header: 'Capacity',\n                        cell: (item) => (\n                          <div>\n                            <p className=\"font-medium\">{item.capacity} students</p>\n                          </div>\n                        ),\n                      },\n                      {\n                        key: 'academicYear',\n                        header: 'Academic Year',\n                        cell: (item) => <span>{item.academicYear}</span>,\n                      },\n                      {\n                        key: 'status',\n                        header: 'Status',\n                        cell: () => (\n                          <Badge variant=\"default\">Active</Badge>\n                        ),\n                      },\n                      {\n                        key: 'actions',\n                        header: 'Actions',\n                        cell: () => canManageAcademics ? (\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"ghost\" size=\"sm\">Edit</Button>\n                            <Button variant=\"ghost\" size=\"sm\">View</Button>\n                          </div>\n                        ) : null,\n                      },\n                    ]}\n                    testId=\"classes-table\"\n                  />\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"subjects\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>All Subjects</CardTitle>\n                    <CardDescription>Manage subject curriculum and assignments</CardDescription>\n                  </div>\n                  {canManageAcademics && (\n                    <Dialog open={isSubjectDialogOpen} onOpenChange={setIsSubjectDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button data-testid=\"button-add-subject\">\n                          <Plus className=\"mr-2 h-4 w-4\" />\n                          Add Subject\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Add New Subject</DialogTitle>\n                        </DialogHeader>\n                        <Form {...subjectForm}>\n                          <form onSubmit={subjectForm.handleSubmit(onSubjectSubmit)} className=\"space-y-4\">\n                            <FormField\n                              control={subjectForm.control}\n                              name=\"name\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Subject Name</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"e.g., Mathematics\" {...field} data-testid=\"input-subject-name\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={subjectForm.control}\n                              name=\"code\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Subject Code</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"e.g., MATH101\" {...field} data-testid=\"input-subject-code\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <FormField\n                              control={subjectForm.control}\n                              name=\"description\"\n                              render={({ field }) => (\n                                <FormItem>\n                                  <FormLabel>Description (Optional)</FormLabel>\n                                  <FormControl>\n                                    <Input placeholder=\"Subject description\" {...field} data-testid=\"input-subject-description\" />\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              )}\n                            />\n                            <DialogFooter>\n                              <Button type=\"submit\" disabled={createSubjectMutation.isPending} data-testid=\"button-submit-subject\">\n                                {createSubjectMutation.isPending ? 'Creating...' : 'Create Subject'}\n                              </Button>\n                            </DialogFooter>\n                          </form>\n                        </Form>\n                      </DialogContent>\n                    </Dialog>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {subjectsLoading ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">Loading subjects...</div>\n                ) : (\n                  <DataTable\n                    data={subjects}\n                    emptyMessage=\"No subjects found. Add a subject to get started.\"\n                    columns={[\n                      {\n                        key: 'subject',\n                        header: 'Subject',\n                        cell: (item) => (\n                          <div>\n                            <p className=\"font-medium\">{item.name}</p>\n                            <p className=\"text-sm text-muted-foreground font-mono\">{item.code}</p>\n                          </div>\n                        ),\n                      },\n                      {\n                        key: 'description',\n                        header: 'Description',\n                        cell: (item) => <span>{item.description || 'N/A'}</span>,\n                      },\n                      {\n                        key: 'actions',\n                        header: 'Actions',\n                        cell: () => canManageAcademics ? (\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"ghost\" size=\"sm\">Edit</Button>\n                            <Button variant=\"ghost\" size=\"sm\">Assign</Button>\n                          </div>\n                        ) : null,\n                      },\n                    ]}\n                    testId=\"subjects-table\"\n                  />\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":18320},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/dashboards/SuperAdminDashboard.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { StatCard } from '@/components/shared/StatCard';\nimport { DataTable } from '@/components/shared/DataTable';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Building2, Users, IndianRupee, TrendingUp, Plus } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { formatCurrencyINR } from '@/lib/utils';\n\nexport function SuperAdminDashboard() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [schoolName, setSchoolName] = useState('');\n  const [schoolCode, setSchoolCode] = useState('');\n  const [email, setEmail] = useState('');\n  const [phone, setPhone] = useState('');\n  const [address, setAddress] = useState('');\n  const { toast } = useToast();\n\n  const { data: tenantsData, isLoading } = useQuery<{ tenants: Array<any> }>({\n    queryKey: ['/api/tenants/with-stats'],\n  });\n\n  const { data: stats, isLoading: isStatsLoading } = useQuery<{\n    totalSchools: number;\n    totalUsers: number;\n    totalMRR: number;\n  }>({\n    queryKey: ['/api/dashboard/superadmin/stats'],\n  });\n\n  const createSchoolMutation = useMutation({\n    mutationFn: async (data: { name: string; code: string; email: string; phone?: string; address?: string }) => {\n      return await apiRequest('/api/tenants', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/tenants'] });\n      toast({\n        title: 'School Added',\n        description: `${schoolName} has been added successfully`,\n      });\n      setIsDialogOpen(false);\n      setSchoolName('');\n      setSchoolCode('');\n      setEmail('');\n      setPhone('');\n      setAddress('');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to add school',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleAddSchool = async () => {\n    if (!schoolName || !schoolCode || !email) {\n      toast({\n        title: 'Validation Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n\n    createSchoolMutation.mutate({\n      name: schoolName,\n      code: schoolCode,\n      email,\n      phone,\n      address,\n    });\n  };\n\n  const schools = (tenantsData?.tenants || []).map(tenant => ({\n    id: tenant.id,\n    name: tenant.name,\n    students: tenant.students || 0,\n    plan: tenant.plan || 'Standard',\n    status: tenant.status || 'active',\n    revenue: formatCurrencyINR(tenant.revenue || 0),\n  }));\n\n  return (\n    <div className=\"p-6 space-y-8 max-w-7xl\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold mb-2\">Super Admin Dashboard</h1>\n          <p className=\"text-muted-foreground\">Platform-wide analytics and school management</p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-school\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add School\n            </Button>\n          </DialogTrigger>\n          <DialogContent data-testid=\"dialog-add-school\">\n            <DialogHeader data-testid=\"dialog-header-add-school\">\n              <DialogTitle data-testid=\"dialog-title-add-school\">Add New School</DialogTitle>\n              <DialogDescription data-testid=\"dialog-description-add-school\">\n                Enter the details of the new school to onboard them to the platform.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"schoolName\">School Name *</Label>\n                <Input\n                  id=\"schoolName\"\n                  placeholder=\"Enter school name\"\n                  value={schoolName}\n                  onChange={(e) => setSchoolName(e.target.value)}\n                  data-testid=\"input-school-name\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"schoolCode\">School Code *</Label>\n                <Input\n                  id=\"schoolCode\"\n                  placeholder=\"e.g., SHS001\"\n                  value={schoolCode}\n                  onChange={(e) => setSchoolCode(e.target.value)}\n                  data-testid=\"input-school-code\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email *</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"school@example.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  data-testid=\"input-school-email\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone</Label>\n                <Input\n                  id=\"phone\"\n                  placeholder=\"+1-555-0100\"\n                  value={phone}\n                  onChange={(e) => setPhone(e.target.value)}\n                  data-testid=\"input-school-phone\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"address\">Address</Label>\n                <Input\n                  id=\"address\"\n                  placeholder=\"School address\"\n                  value={address}\n                  onChange={(e) => setAddress(e.target.value)}\n                  data-testid=\"input-school-address\"\n                />\n              </div>\n            </div>\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)} data-testid=\"button-cancel-school\">\n                Cancel\n              </Button>\n              <Button onClick={handleAddSchool} disabled={createSchoolMutation.isPending} data-testid=\"button-submit-school\">\n                {createSchoolMutation.isPending ? 'Adding...' : 'Add School'}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Total Schools\"\n          value={isStatsLoading ? '...' : (stats?.totalSchools?.toString() || '0')}\n          icon={Building2}\n          testId=\"stat-total-schools\"\n        />\n        <StatCard\n          title=\"Total Users\"\n          value={isStatsLoading ? '...' : (stats?.totalUsers?.toString() || '0')}\n          icon={Users}\n          testId=\"stat-total-users\"\n        />\n        <StatCard\n          title=\"MRR\"\n          value={isStatsLoading ? '...' : (stats?.totalMRR ? formatCurrencyINR(stats.totalMRR) : formatCurrencyINR(0))}\n          icon={IndianRupee}\n          testId=\"stat-mrr\"\n        />\n        <StatCard\n          title=\"Total Revenue\"\n          value={isStatsLoading ? '...' : (stats?.totalMRR ? formatCurrencyINR(stats.totalMRR) : formatCurrencyINR(0))}\n          icon={TrendingUp}\n          testId=\"stat-growth-rate\"\n        />\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Schools Overview</CardTitle>\n          <CardDescription>All schools on the platform</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <DataTable\n            data={schools}\n            isLoading={isLoading}\n            emptyMessage=\"No schools found\"\n            columns={[\n              {\n                key: 'name',\n                header: 'School Name',\n                cell: (item) => (\n                  <div>\n                    <p className=\"font-medium\">{item.name}</p>\n                    <p className=\"text-sm text-muted-foreground\">{item.students} students</p>\n                  </div>\n                ),\n              },\n              {\n                key: 'plan',\n                header: 'Plan',\n                cell: (item) => <Badge variant=\"outline\">{item.plan}</Badge>,\n              },\n              {\n                key: 'status',\n                header: 'Status',\n                cell: (item) => (\n                  <Badge variant={item.status === 'active' ? 'default' : 'secondary'}>\n                    {item.status}\n                  </Badge>\n                ),\n              },\n              {\n                key: 'revenue',\n                header: 'Monthly Revenue',\n                cell: (item) => <span className=\"font-mono font-medium\">{item.revenue}</span>,\n              },\n              {\n                key: 'actions',\n                header: 'Actions',\n                cell: () => (\n                  <Button variant=\"ghost\" size=\"sm\">\n                    Manage\n                  </Button>\n                ),\n              },\n            ]}\n            testId=\"schools-table\"\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9422},"shared/schema.ts":{"content":"import mongoose, { Schema, Document, Model } from 'mongoose';\nimport { z } from 'zod';\n\n// Enums\nexport const UserRole = {\n  SUPER_ADMIN: 'super_admin',\n  ADMIN: 'admin',\n  PRINCIPAL: 'principal',\n  FACULTY: 'faculty',\n  STUDENT: 'student',\n  PARENT: 'parent',\n} as const;\n\nexport const AttendanceStatus = {\n  PRESENT: 'present',\n  ABSENT: 'absent',\n  LATE: 'late',\n  HALF_DAY: 'half_day',\n} as const;\n\nexport const Gender = {\n  MALE: 'male',\n  FEMALE: 'female',\n  OTHER: 'other',\n} as const;\n\nexport const FeeStatus = {\n  PAID: 'paid',\n  PENDING: 'pending',\n  OVERDUE: 'overdue',\n  PARTIAL: 'partial',\n} as const;\n\nexport const ExamType = {\n  UNIT_TEST: 'unit_test',\n  MID_TERM: 'mid_term',\n  FINAL: 'final',\n  PRACTICAL: 'practical',\n} as const;\n\nexport const DayOfWeek = {\n  MONDAY: 'monday',\n  TUESDAY: 'tuesday',\n  WEDNESDAY: 'wednesday',\n  THURSDAY: 'thursday',\n  FRIDAY: 'friday',\n  SATURDAY: 'saturday',\n} as const;\n\nexport const PayrollStatus = {\n  DRAFT: 'draft',\n  APPROVED: 'approved',\n  PAID: 'paid',\n} as const;\n\nexport const LeaveType = {\n  SICK: 'sick',\n  CASUAL: 'casual',\n  EARNED: 'earned',\n  MATERNITY: 'maternity',\n  OTHER: 'other',\n} as const;\n\nexport const LeaveStatus = {\n  PENDING: 'pending',\n  APPROVED: 'approved',\n  REJECTED: 'rejected',\n} as const;\n\nexport const TicketStatus = {\n  OPEN: 'open',\n  IN_PROGRESS: 'in_progress',\n  RESOLVED: 'resolved',\n  CLOSED: 'closed',\n} as const;\n\nexport const TicketPriority = {\n  LOW: 'low',\n  MEDIUM: 'medium',\n  HIGH: 'high',\n  URGENT: 'urgent',\n} as const;\n\nexport const SubscriptionStatus = {\n  TRIAL: 'trial',\n  ACTIVE: 'active',\n  SUSPENDED: 'suspended',\n  CANCELLED: 'cancelled',\n} as const;\n\n// Mongoose Schemas\n\nconst TenantSchema = new Schema({\n  name: { type: String, required: true },\n  code: { type: String, required: true, unique: true },\n  email: String,\n  phone: String,\n  address: String,\n  logo: String,\n  active: { type: Boolean, default: true, required: true },\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst UserSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant' },\n  email: { type: String, required: true },\n  password: { type: String, required: true },\n  role: { type: String, enum: Object.values(UserRole), required: true },\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: true },\n  phone: String,\n  avatar: String,\n  active: { type: Boolean, default: true, required: true },\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nUserSchema.index({ email: 1 });\nUserSchema.index({ tenantId: 1 });\nUserSchema.index({ role: 1 });\n\nconst ClassSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  name: { type: String, required: true },\n  grade: { type: Number, required: true },\n  section: { type: String, required: true },\n  capacity: { type: Number, default: 40 },\n  classTeacherId: { type: Schema.Types.ObjectId, ref: 'User' },\n  academicYear: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nClassSchema.index({ tenantId: 1 });\n\nconst SubjectSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  name: { type: String, required: true },\n  code: { type: String, required: true },\n  description: String,\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nSubjectSchema.index({ tenantId: 1 });\n\nconst StudentSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  classId: { type: Schema.Types.ObjectId, ref: 'Class' },\n  admissionNumber: { type: String, required: true },\n  rollNumber: String,\n  dateOfBirth: { type: Date, required: true },\n  gender: { type: String, enum: Object.values(Gender), required: true },\n  bloodGroup: String,\n  parentId: { type: Schema.Types.ObjectId, ref: 'User' },\n  fatherName: String,\n  motherName: String,\n  parentContact: String,\n  address: String,\n  emergencyContact: String,\n  admissionDate: { type: Date, required: true },\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nStudentSchema.index({ tenantId: 1 });\nStudentSchema.index({ userId: 1 });\nStudentSchema.index({ classId: 1 });\n\nconst AttendanceSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  studentId: { type: Schema.Types.ObjectId, ref: 'Student', required: true },\n  classId: { type: Schema.Types.ObjectId, ref: 'Class', required: true },\n  date: { type: Date, required: true },\n  status: { type: String, enum: Object.values(AttendanceStatus), required: true },\n  markedBy: { type: Schema.Types.ObjectId, ref: 'User' },\n  remarks: String,\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nAttendanceSchema.index({ tenantId: 1 });\nAttendanceSchema.index({ classId: 1, date: 1 });\n\nconst ExamSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  name: { type: String, required: true },\n  type: { type: String, enum: Object.values(ExamType), required: true },\n  startDate: { type: Date, required: true },\n  endDate: { type: Date, required: true },\n  academicYear: { type: String, required: true },\n  description: String,\n  published: { type: Boolean, default: false, required: true },\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nExamSchema.index({ tenantId: 1 });\n\nconst ExamResultSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  examId: { type: Schema.Types.ObjectId, ref: 'Exam', required: true },\n  studentId: { type: Schema.Types.ObjectId, ref: 'Student', required: true },\n  subjectId: { type: Schema.Types.ObjectId, ref: 'Subject', required: true },\n  marksObtained: { type: Number, required: true },\n  totalMarks: { type: Number, required: true },\n  grade: String,\n  remarks: String,\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst FeeStructureSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  classId: { type: Schema.Types.ObjectId, ref: 'Class', required: true },\n  name: { type: String, required: true },\n  amount: { type: Number, required: true },\n  academicYear: { type: String, required: true },\n  dueDate: Date,\n  description: String,\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst FeePaymentSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  studentId: { type: Schema.Types.ObjectId, ref: 'Student', required: true },\n  feeStructureId: { type: Schema.Types.ObjectId, ref: 'FeeStructure' },\n  amount: { type: Number, required: true },\n  paymentDate: { type: Date, required: true },\n  paymentMode: { type: String, required: true },\n  transactionId: String,\n  status: { type: String, enum: Object.values(FeeStatus), required: true },\n  receiptNumber: String,\n  remarks: String,\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst AnnouncementSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  title: { type: String, required: true },\n  content: { type: String, required: true },\n  targetRole: { type: String, enum: Object.values(UserRole) },\n  classId: { type: Schema.Types.ObjectId, ref: 'Class' },\n  priority: { type: String, default: 'normal' },\n  publishedBy: { type: Schema.Types.ObjectId, ref: 'User' },\n  publishedAt: { type: Date, default: Date.now, required: true },\n  expiresAt: Date,\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nAnnouncementSchema.index({ tenantId: 1 });\n\nconst ClassSubjectSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  classId: { type: Schema.Types.ObjectId, ref: 'Class', required: true },\n  subjectId: { type: Schema.Types.ObjectId, ref: 'Subject', required: true },\n  teacherId: { type: Schema.Types.ObjectId, ref: 'User' },\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst TimetableSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  classId: { type: Schema.Types.ObjectId, ref: 'Class', required: true },\n  subjectId: { type: Schema.Types.ObjectId, ref: 'Subject', required: true },\n  teacherId: { type: Schema.Types.ObjectId, ref: 'User' },\n  dayOfWeek: { type: String, enum: Object.values(DayOfWeek), required: true },\n  startTime: { type: String, required: true },\n  endTime: { type: String, required: true },\n  roomNumber: String,\n  academicYear: { type: String, required: true },\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst TransportRouteSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  routeName: { type: String, required: true },\n  routeNumber: { type: String, required: true },\n  driverName: String,\n  driverPhone: String,\n  vehicleNumber: String,\n  capacity: Number,\n  fare: Number,\n  stops: String,\n  active: { type: Boolean, default: true, required: true },\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst StudentTransportSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  studentId: { type: Schema.Types.ObjectId, ref: 'Student', required: true },\n  routeId: { type: Schema.Types.ObjectId, ref: 'TransportRoute', required: true },\n  pickupStop: String,\n  dropStop: String,\n  active: { type: Boolean, default: true, required: true },\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst PayrollSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  month: { type: String, required: true },\n  year: { type: Number, required: true },\n  basicSalary: { type: Number, required: true },\n  allowances: { type: Number, default: 0 },\n  deductions: { type: Number, default: 0 },\n  netSalary: { type: Number, required: true },\n  status: { type: String, enum: Object.values(PayrollStatus), default: 'draft', required: true },\n  paidOn: Date,\n  remarks: String,\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst LeaveRequestSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  leaveType: { type: String, enum: Object.values(LeaveType), required: true },\n  startDate: { type: Date, required: true },\n  endDate: { type: Date, required: true },\n  reason: { type: String, required: true },\n  status: { type: String, enum: Object.values(LeaveStatus), default: 'pending', required: true },\n  reviewedBy: { type: Schema.Types.ObjectId, ref: 'User' },\n  reviewedAt: Date,\n  reviewNotes: String,\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst SupportTicketSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant' },\n  createdBy: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  category: { type: String, required: true },\n  priority: { type: String, enum: Object.values(TicketPriority), default: 'medium', required: true },\n  status: { type: String, enum: Object.values(TicketStatus), default: 'open', required: true },\n  assignedTo: { type: Schema.Types.ObjectId, ref: 'User' },\n  resolvedAt: Date,\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst SubscriptionSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true, unique: true },\n  planName: { type: String, required: true },\n  maxStudents: { type: Number, required: true },\n  maxFaculty: { type: Number, required: true },\n  price: { type: Number, required: true },\n  billingCycle: { type: String, required: true },\n  status: { type: String, enum: Object.values(SubscriptionStatus), default: 'trial', required: true },\n  startDate: { type: Date, required: true },\n  endDate: { type: Date, required: true },\n  autoRenew: { type: Boolean, default: true, required: true },\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst UserPreferenceSchema = new Schema({\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true, unique: true },\n  theme: { type: String, default: 'system' },\n  language: { type: String, default: 'en' },\n  emailNotifications: { type: Boolean, default: true, required: true },\n  pushNotifications: { type: Boolean, default: true, required: true },\n  timezone: { type: String, default: 'UTC' },\n  dateFormat: { type: String, default: 'MM/DD/YYYY' },\n  createdAt: { type: Date, default: Date.now, required: true },\n  updatedAt: { type: Date, default: Date.now, required: true },\n});\n\nconst MessageSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  senderId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  recipientId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  subject: { type: String, required: true },\n  content: { type: String, required: true },\n  read: { type: Boolean, default: false, required: true },\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\nconst NotificationSchema = new Schema({\n  tenantId: { type: Schema.Types.ObjectId, ref: 'Tenant', required: true },\n  userId: { type: Schema.Types.ObjectId, ref: 'User', required: true },\n  title: { type: String, required: true },\n  message: { type: String, required: true },\n  type: { type: String, default: 'info' },\n  read: { type: Boolean, default: false, required: true },\n  createdAt: { type: Date, default: Date.now, required: true },\n});\n\n// Models\nexport const TenantModel = mongoose.model('Tenant', TenantSchema);\nexport const UserModel = mongoose.model('User', UserSchema);\nexport const ClassModel = mongoose.model('Class', ClassSchema);\nexport const SubjectModel = mongoose.model('Subject', SubjectSchema);\nexport const StudentModel = mongoose.model('Student', StudentSchema);\nexport const AttendanceModel = mongoose.model('Attendance', AttendanceSchema);\nexport const ExamModel = mongoose.model('Exam', ExamSchema);\nexport const ExamResultModel = mongoose.model('ExamResult', ExamResultSchema);\nexport const FeeStructureModel = mongoose.model('FeeStructure', FeeStructureSchema);\nexport const FeePaymentModel = mongoose.model('FeePayment', FeePaymentSchema);\nexport const AnnouncementModel = mongoose.model('Announcement', AnnouncementSchema);\nexport const ClassSubjectModel = mongoose.model('ClassSubject', ClassSubjectSchema);\nexport const TimetableModel = mongoose.model('Timetable', TimetableSchema);\nexport const TransportRouteModel = mongoose.model('TransportRoute', TransportRouteSchema);\nexport const StudentTransportModel = mongoose.model('StudentTransport', StudentTransportSchema);\nexport const PayrollModel = mongoose.model('Payroll', PayrollSchema);\nexport const LeaveRequestModel = mongoose.model('LeaveRequest', LeaveRequestSchema);\nexport const SupportTicketModel = mongoose.model('SupportTicket', SupportTicketSchema);\nexport const SubscriptionModel = mongoose.model('Subscription', SubscriptionSchema);\nexport const UserPreferenceModel = mongoose.model('UserPreference', UserPreferenceSchema);\nexport const MessageModel = mongoose.model('Message', MessageSchema);\nexport const NotificationModel = mongoose.model('Notification', NotificationSchema);\n\n// Types\nexport type Tenant = {\n  _id: string;\n  name: string;\n  code: string;\n  email?: string;\n  phone?: string;\n  address?: string;\n  logo?: string;\n  active: boolean;\n  createdAt: Date;\n};\n\nexport type User = {\n  _id: string;\n  tenantId?: string;\n  email: string;\n  password: string;\n  role: string;\n  firstName: string;\n  lastName: string;\n  phone?: string;\n  avatar?: string;\n  active: boolean;\n  createdAt: Date;\n};\n\nexport type Class = {\n  _id: string;\n  tenantId: string;\n  name: string;\n  grade: number;\n  section: string;\n  capacity?: number;\n  classTeacherId?: string;\n  academicYear: string;\n  createdAt: Date;\n};\n\nexport type Subject = {\n  _id: string;\n  tenantId: string;\n  name: string;\n  code: string;\n  description?: string;\n  createdAt: Date;\n};\n\nexport type Student = {\n  _id: string;\n  tenantId: string;\n  userId: string;\n  classId?: string;\n  admissionNumber: string;\n  rollNumber?: string;\n  dateOfBirth: Date;\n  gender: string;\n  bloodGroup?: string;\n  parentId?: string;\n  fatherName?: string;\n  motherName?: string;\n  parentContact?: string;\n  address?: string;\n  emergencyContact?: string;\n  admissionDate: Date;\n  createdAt: Date;\n};\n\nexport type Attendance = {\n  _id: string;\n  tenantId: string;\n  studentId: string;\n  classId: string;\n  date: Date;\n  status: string;\n  markedBy?: string;\n  remarks?: string;\n  createdAt: Date;\n};\n\nexport type Exam = {\n  _id: string;\n  tenantId: string;\n  name: string;\n  type: string;\n  startDate: Date;\n  endDate: Date;\n  academicYear: string;\n  description?: string;\n  published: boolean;\n  createdAt: Date;\n};\n\nexport type ExamResult = {\n  _id: string;\n  tenantId: string;\n  examId: string;\n  studentId: string;\n  subjectId: string;\n  marksObtained: number;\n  totalMarks: number;\n  grade?: string;\n  remarks?: string;\n  createdAt: Date;\n};\n\nexport type FeeStructure = {\n  _id: string;\n  tenantId: string;\n  classId: string;\n  name: string;\n  amount: number;\n  academicYear: string;\n  dueDate?: Date;\n  description?: string;\n  createdAt: Date;\n};\n\nexport type FeePayment = {\n  _id: string;\n  tenantId: string;\n  studentId: string;\n  feeStructureId?: string;\n  amount: number;\n  paymentDate: Date;\n  paymentMode: string;\n  transactionId?: string;\n  status: string;\n  receiptNumber?: string;\n  remarks?: string;\n  createdAt: Date;\n};\n\nexport type Announcement = {\n  _id: string;\n  tenantId: string;\n  title: string;\n  content: string;\n  targetRole?: string;\n  classId?: string;\n  priority?: string;\n  publishedBy?: string;\n  publishedAt: Date;\n  expiresAt?: Date;\n  createdAt: Date;\n};\n\nexport type ClassSubject = {\n  _id: string;\n  tenantId: string;\n  classId: string;\n  subjectId: string;\n  teacherId?: string;\n  createdAt: Date;\n};\n\nexport type UserPreference = {\n  _id: string;\n  userId: string;\n  theme?: string;\n  language?: string;\n  emailNotifications: boolean;\n  pushNotifications: boolean;\n  timezone?: string;\n  dateFormat?: string;\n  createdAt: Date;\n  updatedAt: Date;\n};\n\nexport type Message = {\n  _id: string;\n  tenantId: string;\n  senderId: string;\n  recipientId: string;\n  subject: string;\n  content: string;\n  read: boolean;\n  createdAt: Date;\n};\n\nexport type Notification = {\n  _id: string;\n  tenantId: string;\n  userId: string;\n  title: string;\n  message: string;\n  type?: string;\n  read: boolean;\n  createdAt: Date;\n};\n\nexport type Payroll = {\n  _id: string;\n  tenantId: string;\n  userId: string;\n  month: string;\n  year: number;\n  basicSalary: number;\n  allowances: number;\n  deductions: number;\n  netSalary: number;\n  status: string;\n  paidOn?: Date;\n  remarks?: string;\n  createdAt: Date;\n};\n\nexport type LeaveRequest = {\n  _id: string;\n  tenantId: string;\n  userId: string;\n  leaveType: string;\n  startDate: Date;\n  endDate: Date;\n  reason: string;\n  status: string;\n  reviewedBy?: string;\n  reviewedAt?: Date;\n  reviewNotes?: string;\n  createdAt: Date;\n};\n\n// Insert types (omit _id and fields with defaults)\nexport type InsertTenant = Omit<Tenant, '_id' | 'createdAt' | 'active'> & { active?: boolean };\nexport type InsertUser = Omit<User, '_id' | 'createdAt' | 'active'> & { active?: boolean };\nexport type InsertClass = Omit<Class, '_id' | 'createdAt'>;\nexport type InsertSubject = Omit<Subject, '_id' | 'createdAt'>;\nexport type InsertStudent = Omit<Student, '_id' | 'createdAt'>;\nexport type InsertAttendance = Omit<Attendance, '_id' | 'createdAt'>;\nexport type InsertExam = Omit<Exam, '_id' | 'createdAt' | 'published'> & { published?: boolean };\nexport type InsertExamResult = Omit<ExamResult, '_id' | 'createdAt'>;\nexport type InsertFeeStructure = Omit<FeeStructure, '_id' | 'createdAt'>;\nexport type InsertFeePayment = Omit<FeePayment, '_id' | 'createdAt'>;\nexport type InsertAnnouncement = Omit<Announcement, '_id' | 'createdAt' | 'publishedAt'> & { publishedAt?: Date };\nexport type InsertClassSubject = Omit<ClassSubject, '_id' | 'createdAt'>;\nexport type InsertUserPreference = Omit<UserPreference, '_id' | 'createdAt' | 'updatedAt'>;\n\n// Zod schemas for validation\nexport const insertTenantSchema = z.object({\n  name: z.string(),\n  code: z.string(),\n  email: z.string().email().optional(),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  logo: z.string().optional(),\n  active: z.boolean().optional(),\n});\n\nexport const insertUserSchema = z.object({\n  tenantId: z.string().optional(),\n  email: z.string().email(),\n  password: z.string(),\n  role: z.string(),\n  firstName: z.string(),\n  lastName: z.string(),\n  phone: z.string().optional(),\n  avatar: z.string().optional(),\n  active: z.boolean().optional(),\n});\n\nexport const insertClassSchema = z.object({\n  tenantId: z.string(),\n  name: z.string(),\n  grade: z.number(),\n  section: z.string(),\n  capacity: z.number().optional(),\n  classTeacherId: z.string().optional(),\n  academicYear: z.string(),\n});\n\nexport const insertSubjectSchema = z.object({\n  tenantId: z.string(),\n  name: z.string(),\n  code: z.string(),\n  description: z.string().optional(),\n});\n\nexport const insertStudentSchema = z.object({\n  tenantId: z.string(),\n  userId: z.string(),\n  classId: z.string().optional(),\n  admissionNumber: z.string(),\n  rollNumber: z.string().optional(),\n  dateOfBirth: z.string().or(z.date()),\n  gender: z.string(),\n  bloodGroup: z.string().optional(),\n  parentId: z.string().optional(),\n  address: z.string().optional(),\n  emergencyContact: z.string().optional(),\n  admissionDate: z.string().or(z.date()),\n});\n\nexport const insertAttendanceSchema = z.object({\n  tenantId: z.string(),\n  studentId: z.string(),\n  classId: z.string(),\n  date: z.string().or(z.date()),\n  status: z.string(),\n  markedBy: z.string().optional(),\n  remarks: z.string().optional(),\n});\n\nexport const insertExamSchema = z.object({\n  tenantId: z.string(),\n  name: z.string(),\n  type: z.string(),\n  startDate: z.string().or(z.date()),\n  endDate: z.string().or(z.date()),\n  academicYear: z.string(),\n  description: z.string().optional(),\n  published: z.boolean().optional(),\n});\n\nexport const insertExamResultSchema = z.object({\n  tenantId: z.string(),\n  examId: z.string(),\n  studentId: z.string(),\n  subjectId: z.string(),\n  marksObtained: z.number(),\n  totalMarks: z.number(),\n  grade: z.string().optional(),\n  remarks: z.string().optional(),\n});\n\nexport const insertFeeStructureSchema = z.object({\n  tenantId: z.string(),\n  classId: z.string(),\n  name: z.string(),\n  amount: z.number(),\n  academicYear: z.string(),\n  dueDate: z.string().or(z.date()).optional(),\n  description: z.string().optional(),\n});\n\nexport const insertFeePaymentSchema = z.object({\n  tenantId: z.string(),\n  studentId: z.string(),\n  feeStructureId: z.string().optional(),\n  amount: z.number(),\n  paymentDate: z.string().or(z.date()),\n  paymentMode: z.string(),\n  transactionId: z.string().optional(),\n  status: z.string(),\n  receiptNumber: z.string().optional(),\n  remarks: z.string().optional(),\n});\n\nexport const insertAnnouncementSchema = z.object({\n  tenantId: z.string(),\n  title: z.string(),\n  content: z.string(),\n  targetRole: z.string().optional(),\n  classId: z.string().optional(),\n  priority: z.string().optional(),\n  publishedBy: z.string().optional(),\n  publishedAt: z.date().optional(),\n  expiresAt: z.string().or(z.date()).optional(),\n});\n\nexport const insertClassSubjectSchema = z.object({\n  tenantId: z.string(),\n  classId: z.string(),\n  subjectId: z.string(),\n  teacherId: z.string().optional(),\n});\n\nexport const insertUserPreferenceSchema = z.object({\n  userId: z.string(),\n  theme: z.string().optional(),\n  language: z.string().optional(),\n  emailNotifications: z.boolean().optional(),\n  pushNotifications: z.boolean().optional(),\n  timezone: z.string().optional(),\n  dateFormat: z.string().optional(),\n});\n","size_bytes":24251},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/Attendance.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Save } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { format } from 'date-fns';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\ntype AttendanceStatus = 'present' | 'absent' | 'late' | 'half_day';\n\ninterface StudentAttendance {\n  id: string;\n  name: string;\n  rollNumber: string;\n  status: AttendanceStatus;\n}\n\ninterface Class {\n  _id: string;\n  name: string;\n  grade: number;\n  section: string;\n}\n\ninterface Student {\n  id: string;\n  name: string;\n  admissionNumber: string;\n  class: string;\n  rollNumber: string;\n  email: string;\n  phone: string;\n  status: string;\n}\n\ninterface AttendanceRecord {\n  _id: string;\n  studentId: string;\n  classId: string;\n  date: string;\n  status: AttendanceStatus;\n}\n\nexport default function Attendance() {\n  const { toast } = useToast();\n  const [selectedClass, setSelectedClass] = useState<string>('');\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [attendanceData, setAttendanceData] = useState<StudentAttendance[]>([]);\n\n  const { data: classesData } = useQuery<{ classes: Class[] }>({\n    queryKey: ['/api/classes'],\n  });\n\n  const { data: studentsData } = useQuery<{ students: Student[] }>({\n    queryKey: ['/api/students'],\n  });\n\n  const { data: existingAttendanceData } = useQuery<{ attendance: AttendanceRecord[] }>({\n    queryKey: [`/api/attendance?classId=${selectedClass}&date=${format(selectedDate, 'yyyy-MM-dd')}`],\n    enabled: !!selectedClass,\n  });\n\n  const classes = classesData?.classes || [];\n  const allStudents = studentsData?.students || [];\n  const existingAttendance = existingAttendanceData?.attendance || [];\n\n  useEffect(() => {\n    if (classes.length > 0 && !selectedClass) {\n      setSelectedClass(classes[0]._id);\n    }\n  }, [classes, selectedClass]);\n\n  useEffect(() => {\n    if (selectedClass && allStudents.length > 0) {\n      const selectedClassName = classes.find(c => c._id === selectedClass)?.name;\n      \n      if (!selectedClassName) {\n        setAttendanceData([]);\n        return;\n      }\n\n      const classStudents = allStudents\n        .filter(s => s.class === selectedClassName)\n        .map(s => {\n          const existingRecord = existingAttendance.find(a => a.studentId === s.id);\n          \n          return {\n            id: s.id,\n            name: s.name,\n            rollNumber: s.rollNumber || 'N/A',\n            status: existingRecord?.status || 'present' as AttendanceStatus,\n          };\n        });\n      \n      setAttendanceData(classStudents);\n    }\n  }, [selectedClass, allStudents, classes, existingAttendance]);\n\n  const saveMutation = useMutation({\n    mutationFn: async () => {\n      const attendanceRecords = attendanceData.map(student => ({\n        studentId: student.id,\n        classId: selectedClass,\n        date: format(selectedDate, 'yyyy-MM-dd'),\n        status: student.status,\n      }));\n\n      return await apiRequest('/api/attendance/bulk', {\n        method: 'POST',\n        body: JSON.stringify({ attendanceRecords }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Attendance saved successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: [`/api/attendance?classId=${selectedClass}&date=${format(selectedDate, 'yyyy-MM-dd')}`] });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to save attendance',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleStatusChange = (studentId: string, status: AttendanceStatus) => {\n    setAttendanceData(prev => {\n      const updated = prev.map(student =>\n        student.id === studentId ? { ...student, status } : student\n      );\n      return [...updated];\n    });\n  };\n\n  const handleBulkUpdate = (status: AttendanceStatus) => {\n    setAttendanceData(prev =>\n      prev.map(student => ({ ...student, status }))\n    );\n  };\n\n  const handleSave = () => {\n    saveMutation.mutate();\n  };\n\n  const stats = {\n    present: attendanceData.filter(s => s.status === 'present').length,\n    absent: attendanceData.filter(s => s.status === 'absent').length,\n    late: attendanceData.filter(s => s.status === 'late').length,\n    half_day: attendanceData.filter(s => s.status === 'half_day').length,\n    total: attendanceData.length,\n  };\n\n  const attendancePercentage = stats.total > 0\n    ? ((stats.present + stats.late + stats.half_day) / stats.total * 100).toFixed(1)\n    : '0';\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-7xl\">\n        <Breadcrumb items={[{ label: 'Attendance' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">Attendance Management</h1>\n            <p className=\"text-muted-foreground mt-1\">Track daily student attendance</p>\n          </div>\n          <Button onClick={handleSave} disabled={saveMutation.isPending || attendanceData.length === 0} data-testid=\"button-save-attendance\">\n            <Save className=\"mr-2 h-4 w-4\" />\n            {saveMutation.isPending ? 'Saving...' : 'Save Attendance'}\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground\">Total</p>\n                <p className=\"text-3xl font-bold\" data-testid=\"stat-total\">{stats.total}</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground\">Present</p>\n                <p className=\"text-3xl font-bold text-green-600\" data-testid=\"stat-present\">{stats.present}</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground\">Absent</p>\n                <p className=\"text-3xl font-bold text-red-600\" data-testid=\"stat-absent\">{stats.absent}</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground\">Late</p>\n                <p className=\"text-3xl font-bold text-yellow-600\" data-testid=\"stat-late\">{stats.late}</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground\">Attendance</p>\n                <p className=\"text-3xl font-bold text-blue-600\" data-testid=\"stat-percentage\">{attendancePercentage}%</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Mark Attendance</CardTitle>\n            <CardDescription>Select class and date to mark attendance</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex flex-wrap gap-4\">\n              <div className=\"flex-1 min-w-[200px]\">\n                <label className=\"text-sm font-medium mb-2 block\">Class</label>\n                <Select value={selectedClass} onValueChange={setSelectedClass}>\n                  <SelectTrigger data-testid=\"select-class\">\n                    <SelectValue placeholder=\"Select class\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {classes.map((cls) => (\n                      <SelectItem key={cls._id} value={cls._id}>\n                        Class {cls.grade} {cls.section}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex-1 min-w-[200px]\">\n                <label className=\"text-sm font-medium mb-2 block\">Date</label>\n                <Input\n                  type=\"date\"\n                  value={format(selectedDate, 'yyyy-MM-dd')}\n                  onChange={(e) => setSelectedDate(new Date(e.target.value))}\n                  data-testid=\"input-date\"\n                />\n              </div>\n\n              <div className=\"flex-1 min-w-[200px] flex items-end gap-2\">\n                <Button variant=\"outline\" onClick={() => handleBulkUpdate('present')} size=\"sm\" data-testid=\"button-mark-all-present\">\n                  Mark All Present\n                </Button>\n                <Button variant=\"outline\" onClick={() => handleBulkUpdate('absent')} size=\"sm\" data-testid=\"button-mark-all-absent\">\n                  Mark All Absent\n                </Button>\n              </div>\n            </div>\n\n            {attendanceData.length === 0 && selectedClass && (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>No students found for this class.</p>\n                <p className=\"text-sm mt-2\">Make sure students are assigned to this class in the Students section.</p>\n              </div>\n            )}\n\n            {attendanceData.length > 0 && (\n              <div className=\"border rounded-lg overflow-hidden\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-muted\">\n                    <tr>\n                      <th className=\"text-left p-3 font-medium\">Roll No.</th>\n                      <th className=\"text-left p-3 font-medium\">Student Name</th>\n                      <th className=\"text-center p-3 font-medium\">Status</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {attendanceData.map((student) => (\n                      <tr key={student.id} className=\"border-t hover:bg-muted/50\" data-testid={`row-student-${student.id}`}>\n                        <td className=\"p-3\">{student.rollNumber}</td>\n                        <td className=\"p-3 font-medium\">{student.name}</td>\n                        <td className=\"p-3\">\n                          <div className=\"flex justify-center gap-2\">\n                            <Button\n                              variant={student.status === 'present' ? 'default' : 'outline'}\n                              size=\"sm\"\n                              onClick={() => handleStatusChange(student.id, 'present')}\n                              data-testid={`button-present-${student.id}`}\n                            >\n                              Present\n                            </Button>\n                            <Button\n                              variant={student.status === 'absent' ? 'destructive' : 'outline'}\n                              size=\"sm\"\n                              onClick={() => handleStatusChange(student.id, 'absent')}\n                              data-testid={`button-absent-${student.id}`}\n                            >\n                              Absent\n                            </Button>\n                            <Button\n                              variant={student.status === 'late' ? 'secondary' : 'outline'}\n                              size=\"sm\"\n                              onClick={() => handleStatusChange(student.id, 'late')}\n                              data-testid={`button-late-${student.id}`}\n                            >\n                              Late\n                            </Button>\n                            <Button\n                              variant={student.status === 'half_day' ? 'secondary' : 'outline'}\n                              size=\"sm\"\n                              onClick={() => handleStatusChange(student.id, 'half_day')}\n                              data-testid={`button-halfday-${student.id}`}\n                            >\n                              Half Day\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":12766},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/Login.tsx":{"content":"import { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useAuth } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { GraduationCap, Loader2 } from 'lucide-react';\n\nexport default function Login() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(email, password);\n    } catch (error) {\n      toast({\n        title: 'Login Failed',\n        description: error instanceof Error ? error.message : 'Invalid email or password',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-background to-accent/5 p-4\">\n      <div className=\"w-full max-w-md space-y-8\">\n        <div className=\"text-center\">\n          <div className=\"inline-flex h-16 w-16 items-center justify-center rounded-2xl bg-primary text-primary-foreground mb-4\">\n            <GraduationCap className=\"h-10 w-10\" />\n          </div>\n          <h1 className=\"text-3xl font-semibold\">School ERP</h1>\n          <p className=\"text-muted-foreground mt-2\">Comprehensive School Management System</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Welcome Back</CardTitle>\n            <CardDescription>Sign in to your account to continue</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"you@school.com\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  required\n                  data-testid=\"input-email\"\n                  className=\"h-10\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <a href=\"#\" className=\"text-sm text-primary hover:underline\">\n                    Forgot password?\n                  </a>\n                </div>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  required\n                  data-testid=\"input-password\"\n                  className=\"h-10\"\n                />\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Signing in...\n                  </>\n                ) : (\n                  'Sign In'\n                )}\n              </Button>\n            </form>\n\n            <div className=\"mt-6 p-4 bg-muted/50 rounded-lg text-sm text-muted-foreground\">\n              <p className=\"font-medium mb-2\">Demo Credentials:</p>\n              <p>Admin: admin@school.com / admin123</p>\n              <p>Teacher: teacher@school.com / teacher123</p>\n              <p>Student: student@school.com / student123</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <p className=\"text-center text-sm text-muted-foreground\">\n          © 2025 School ERP. All rights reserved.\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4188},"client/src/components/layout/Breadcrumb.tsx":{"content":"import { ChevronRight, Home } from 'lucide-react';\nimport { Link } from 'wouter';\n\ninterface BreadcrumbItem {\n  label: string;\n  href?: string;\n}\n\ninterface BreadcrumbProps {\n  items: BreadcrumbItem[];\n}\n\nexport function Breadcrumb({ items }: BreadcrumbProps) {\n  return (\n    <nav className=\"flex items-center gap-2 text-sm text-muted-foreground mb-6\">\n      <Link href=\"/dashboard\">\n        <span className=\"flex items-center gap-1 hover:text-foreground transition-colors cursor-pointer\" data-testid=\"breadcrumb-home\">\n          <Home className=\"h-4 w-4\" />\n          Dashboard\n        </span>\n      </Link>\n      \n      {items.map((item, index) => (\n        <div key={index} className=\"flex items-center gap-2\">\n          <ChevronRight className=\"h-4 w-4\" />\n          {item.href ? (\n            <Link href={item.href}>\n              <span className=\"hover:text-foreground transition-colors cursor-pointer\" data-testid={`breadcrumb-${item.label.toLowerCase()}`}>\n                {item.label}\n              </span>\n            </Link>\n          ) : (\n            <span className=\"text-foreground font-medium\" data-testid={`breadcrumb-${item.label.toLowerCase()}`}>\n              {item.label}\n            </span>\n          )}\n        </div>\n      ))}\n    </nav>\n  );\n}\n","size_bytes":1270},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/Communication.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Plus, Bell, Maximize2, MessageSquare } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { useAuth } from '@/lib/auth';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\nexport default function Communication() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const canCreateAnnouncement = user && ['admin', 'principal'].includes(user.role);\n  const [selectedAnnouncement, setSelectedAnnouncement] = useState<any>(null);\n  const [selectedMessage, setSelectedMessage] = useState<any>(null);\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [announcementForm, setAnnouncementForm] = useState({\n    title: '',\n    content: '',\n    priority: 'normal',\n    targetRole: '',\n  });\n\n  const { data: announcementsData, isLoading: announcementsLoading } = useQuery<{ announcements: Array<any> }>({\n    queryKey: ['/api/announcements'],\n  });\n\n  const { data: messagesData, isLoading: messagesLoading } = useQuery<{ messages: Array<any> }>({\n    queryKey: ['/api/messages'],\n  });\n\n  const announcements = announcementsData?.announcements || [];\n  const messages = messagesData?.messages || [];\n\n  const createAnnouncementMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('/api/announcements', {\n        method: 'POST',\n        body: JSON.stringify(announcementForm),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Announcement created successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/announcements'] });\n      setIsCreateDialogOpen(false);\n      setAnnouncementForm({\n        title: '',\n        content: '',\n        priority: 'normal',\n        targetRole: '',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to create announcement',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleCreateAnnouncement = () => {\n    if (!announcementForm.title || !announcementForm.content) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n    createAnnouncementMutation.mutate();\n  };\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-7xl\">\n        <Breadcrumb items={[{ label: 'Communication' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">Communication Hub</h1>\n            <p className=\"text-muted-foreground mt-1\">Announcements and messaging</p>\n          </div>\n          {canCreateAnnouncement && (\n            <Button onClick={() => setIsCreateDialogOpen(true)} data-testid=\"button-create-announcement\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              New Announcement\n            </Button>\n          )}\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Bell className=\"h-5 w-5\" />\n              <CardTitle>Announcements</CardTitle>\n            </div>\n            <CardDescription>School-wide notifications and updates</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {announcementsLoading ? (\n              <div className=\"text-center text-muted-foreground p-4\">Loading announcements...</div>\n            ) : announcements.length === 0 ? (\n              <div className=\"text-center text-muted-foreground p-4\">No announcements available</div>\n            ) : (\n              <div className=\"space-y-4\">\n                {announcements.map((announcement) => {\n                  const contentPreview = announcement.content.length > 150 \n                    ? announcement.content.substring(0, 150) + '...' \n                    : announcement.content;\n                  const hasMore = announcement.content.length > 150;\n                  \n                  return (\n                    <div key={announcement._id} className=\"p-4 rounded-lg hover-elevate border\" data-testid={`announcement-${announcement._id}`}>\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div className=\"flex items-center gap-2\">\n                          <div className={`h-2 w-2 rounded-full ${\n                            announcement.priority === 'high' ? 'bg-red-500' :\n                            announcement.priority === 'normal' ? 'bg-blue-500' :\n                            'bg-gray-400'\n                          }`} />\n                          <h3 className=\"font-medium\">{announcement.title}</h3>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {announcement.priority || 'normal'}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        {contentPreview}\n                      </p>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3 text-xs text-muted-foreground\">\n                          <span>By {announcement.publishedBy?.firstName || 'Admin'}</span>\n                          <span>{new Date(announcement.publishedAt).toLocaleDateString()}</span>\n                        </div>\n                        {hasMore && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => setSelectedAnnouncement(announcement)}\n                            data-testid={`button-view-announcement-${announcement._id}`}\n                          >\n                            <Maximize2 className=\"h-3 w-3 mr-1\" />\n                            View Full\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <MessageSquare className=\"h-5 w-5\" />\n              <CardTitle>Messages</CardTitle>\n            </div>\n            <CardDescription>Your personal inbox</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {messagesLoading ? (\n              <div className=\"text-center text-muted-foreground p-4\">Loading messages...</div>\n            ) : messages.length === 0 ? (\n              <div className=\"text-center text-muted-foreground p-4\">No messages available</div>\n            ) : (\n              <div className=\"space-y-4\">\n                {messages.map((message) => {\n                  const contentPreview = message.content.length > 100 \n                    ? message.content.substring(0, 100) + '...' \n                    : message.content;\n                  const hasMore = message.content.length > 100;\n                  \n                  return (\n                    <div key={message._id} className=\"p-4 rounded-lg hover-elevate border\" data-testid={`message-${message._id}`}>\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <div className=\"flex items-center gap-2\">\n                          {!message.read && (\n                            <div className=\"h-2 w-2 rounded-full bg-blue-500\" />\n                          )}\n                          <h3 className=\"font-medium\">{message.subject}</h3>\n                        </div>\n                        {!message.read && (\n                          <Badge variant=\"default\" className=\"text-xs\">\n                            New\n                          </Badge>\n                        )}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        {contentPreview}\n                      </p>\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3 text-xs text-muted-foreground\">\n                          <span>From {message.senderId?.firstName || 'Unknown'} {message.senderId?.lastName || ''}</span>\n                          <span>{new Date(message.createdAt).toLocaleDateString()}</span>\n                        </div>\n                        {hasMore && (\n                          <Button \n                            variant=\"ghost\" \n                            size=\"sm\" \n                            onClick={() => setSelectedMessage(message)}\n                            data-testid={`button-view-message-${message._id}`}\n                          >\n                            <Maximize2 className=\"h-3 w-3 mr-1\" />\n                            View Full\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Full View Dialog for Announcements */}\n      <Dialog open={!!selectedAnnouncement} onOpenChange={() => setSelectedAnnouncement(null)}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <div className=\"flex items-center gap-2 mb-2\">\n              <div className={`h-2 w-2 rounded-full ${\n                selectedAnnouncement?.priority === 'high' ? 'bg-red-500' :\n                selectedAnnouncement?.priority === 'normal' ? 'bg-blue-500' :\n                'bg-gray-400'\n              }`} />\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {selectedAnnouncement?.priority || 'normal'}\n              </Badge>\n            </div>\n            <DialogTitle className=\"text-xl\">{selectedAnnouncement?.title}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 pt-4\">\n            <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n              {selectedAnnouncement?.content}\n            </p>\n            <div className=\"pt-4 border-t flex items-center justify-between text-sm text-muted-foreground\">\n              <span>Published by {selectedAnnouncement?.publishedBy?.firstName || 'Admin'}</span>\n              <span>{selectedAnnouncement && new Date(selectedAnnouncement.publishedAt).toLocaleDateString()}</span>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Full View Dialog for Messages */}\n      <Dialog open={!!selectedMessage} onOpenChange={() => setSelectedMessage(null)}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <div className=\"flex items-center gap-2 mb-2\">\n              {!selectedMessage?.read && (\n                <Badge variant=\"default\" className=\"text-xs\">\n                  New\n                </Badge>\n              )}\n            </div>\n            <DialogTitle className=\"text-xl\">{selectedMessage?.subject}</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4 pt-4\">\n            <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">\n              {selectedMessage?.content}\n            </p>\n            <div className=\"pt-4 border-t flex items-center justify-between text-sm text-muted-foreground\">\n              <span>From {selectedMessage?.senderId?.firstName || 'Unknown'} {selectedMessage?.senderId?.lastName || ''}</span>\n              <span>{selectedMessage && new Date(selectedMessage.createdAt).toLocaleDateString()}</span>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Announcement Dialog */}\n      <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Create New Announcement</DialogTitle>\n            <DialogDescription>Share important information with your school community</DialogDescription>\n          </DialogHeader>\n          <div className=\"grid gap-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"announcement-title\">Title *</Label>\n              <Input\n                id=\"announcement-title\"\n                placeholder=\"Enter announcement title\"\n                value={announcementForm.title}\n                onChange={(e) => setAnnouncementForm({ ...announcementForm, title: e.target.value })}\n                data-testid=\"input-announcement-title\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"announcement-content\">Content *</Label>\n              <Textarea\n                id=\"announcement-content\"\n                placeholder=\"Enter announcement details\"\n                rows={4}\n                value={announcementForm.content}\n                onChange={(e) => setAnnouncementForm({ ...announcementForm, content: e.target.value })}\n                data-testid=\"textarea-announcement-content\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"announcement-priority\">Priority</Label>\n              <Select \n                value={announcementForm.priority} \n                onValueChange={(value) => setAnnouncementForm({ ...announcementForm, priority: value })}\n              >\n                <SelectTrigger data-testid=\"select-announcement-priority\">\n                  <SelectValue placeholder=\"Select priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"normal\">Normal</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"announcement-target\">Target Role (Optional)</Label>\n              <Input\n                id=\"announcement-target\"\n                placeholder=\"e.g., student, faculty\"\n                value={announcementForm.targetRole}\n                onChange={(e) => setAnnouncementForm({ ...announcementForm, targetRole: e.target.value })}\n                data-testid=\"input-announcement-target\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsCreateDialogOpen(false)} data-testid=\"button-cancel-announcement\">\n              Cancel\n            </Button>\n            <Button \n              onClick={handleCreateAnnouncement} \n              disabled={createAnnouncementMutation.isPending}\n              data-testid=\"button-submit-announcement\"\n            >\n              {createAnnouncementMutation.isPending ? 'Creating...' : 'Create Announcement'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </AppLayout>\n  );\n}\n","size_bytes":15771},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/dashboards/AdminDashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { StatCard } from '@/components/shared/StatCard';\nimport { DataTable } from '@/components/shared/DataTable';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { GraduationCap, Users, IndianRupee, AlertCircle, Plus, ClipboardCheck, Send, Briefcase } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line } from 'recharts';\nimport { formatCurrencyINR } from '@/lib/utils';\nimport { useLocation } from 'wouter';\n\nexport function AdminDashboard() {\n  const [, setLocation] = useLocation();\n  const { data: stats, isLoading } = useQuery<{\n    totalStudents: number;\n    totalFaculty: number;\n    monthlyRevenue: number;\n    pendingFees: number;\n  }>({\n    queryKey: ['/api/dashboard/admin/stats'],\n  });\n\n  const { data: admissionsData, isLoading: isAdmissionsLoading } = useQuery<{ admissions: Array<any> }>({\n    queryKey: ['/api/dashboard/admin/recent-admissions'],\n  });\n\n  const { data: feeCollectionTrends, isLoading: isFeeLoading } = useQuery<{ trends: Array<any> }>({\n    queryKey: ['/api/dashboard/admin/fee-collection-trends'],\n  });\n\n  const { data: activitiesData, isLoading: isActivitiesLoading } = useQuery<{ activities: Array<any> }>({\n    queryKey: ['/api/dashboard/admin/recent-activities'],\n  });\n\n  const recentAdmissions = admissionsData?.admissions || [];\n  const feeCollectionData = feeCollectionTrends?.trends || [];\n  const recentActivities = activitiesData?.activities || [];\n\n  return (\n    <div className=\"p-6 space-y-8 max-w-7xl\">\n      <div>\n        <h1 className=\"text-3xl font-semibold mb-2\">Admin Dashboard</h1>\n        <p className=\"text-muted-foreground\">Welcome back! Here's what's happening in your school today.</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Total Students\"\n          value={isLoading ? '...' : (stats?.totalStudents?.toString() || '0')}\n          icon={GraduationCap}\n          testId=\"stat-total-students\"\n        />\n        <StatCard\n          title=\"Total Faculty\"\n          value={isLoading ? '...' : (stats?.totalFaculty?.toString() || '0')}\n          icon={Users}\n          testId=\"stat-total-faculty\"\n        />\n        <StatCard\n          title=\"Monthly Revenue\"\n          value={isLoading ? '...' : (stats?.monthlyRevenue ? formatCurrencyINR(stats.monthlyRevenue) : formatCurrencyINR(0))}\n          icon={IndianRupee}\n          testId=\"stat-monthly-revenue\"\n        />\n        <StatCard\n          title=\"Pending Fees\"\n          value={isLoading ? '...' : (stats?.pendingFees ? formatCurrencyINR(stats.pendingFees) : formatCurrencyINR(0))}\n          icon={AlertCircle}\n          testId=\"stat-pending-fees\"\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Button className=\"w-full justify-start gap-2\" onClick={() => setLocation('/students/add')} data-testid=\"button-add-student\">\n          <Plus className=\"h-4 w-4\" />\n          Add Student\n        </Button>\n        <Button className=\"w-full justify-start gap-2\" variant=\"outline\" onClick={() => setLocation('/attendance')} data-testid=\"button-mark-attendance\">\n          <ClipboardCheck className=\"h-4 w-4\" />\n          Mark Attendance\n        </Button>\n        <Button className=\"w-full justify-start gap-2\" variant=\"outline\" onClick={() => setLocation('/payroll')} data-testid=\"button-process-payroll\">\n          <Briefcase className=\"h-4 w-4\" />\n          Process Payroll\n        </Button>\n        <Button className=\"w-full justify-start gap-2\" variant=\"outline\" onClick={() => setLocation('/communication')} data-testid=\"button-send-announcement\">\n          <Send className=\"h-4 w-4\" />\n          Send Announcement\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Admissions</CardTitle>\n            <CardDescription>Latest students enrolled this week</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <DataTable\n              data={recentAdmissions}\n              isLoading={isAdmissionsLoading}\n              emptyMessage=\"No recent admissions\"\n              columns={[\n                {\n                  key: 'name',\n                  header: 'Student Name',\n                  cell: (item) => <span className=\"font-medium\">{item.name}</span>,\n                },\n                {\n                  key: 'class',\n                  header: 'Class',\n                  cell: (item) => <span className=\"text-sm\">{item.class}</span>,\n                },\n                {\n                  key: 'admissionDate',\n                  header: 'Date',\n                  cell: (item) => <span className=\"text-sm text-muted-foreground\">{item.admissionDate}</span>,\n                },\n                {\n                  key: 'status',\n                  header: 'Status',\n                  cell: (item) => (\n                    <Badge variant={item.status === 'active' ? 'default' : 'secondary'}>\n                      {item.status}\n                    </Badge>\n                  ),\n                },\n              ]}\n              testId=\"recent-admissions-table\"\n            />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Fee Collection Trend</CardTitle>\n            <CardDescription>Monthly fee collection over last 6 months</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {isFeeLoading ? (\n              <div className=\"flex items-center justify-center h-[250px]\">\n                <p className=\"text-muted-foreground\">Loading...</p>\n              </div>\n            ) : feeCollectionData.length === 0 ? (\n              <div className=\"flex items-center justify-center h-[250px]\">\n                <p className=\"text-muted-foreground\">No data available</p>\n              </div>\n            ) : (\n              <ResponsiveContainer width=\"100%\" height={250}>\n                <LineChart data={feeCollectionData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                  <XAxis dataKey=\"month\" className=\"text-xs\" />\n                  <YAxis className=\"text-xs\" />\n                  <Tooltip />\n                  <Line type=\"monotone\" dataKey=\"amount\" stroke=\"hsl(var(--primary))\" strokeWidth={2} />\n                </LineChart>\n              </ResponsiveContainer>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activities</CardTitle>\n          <CardDescription>Latest activities across the school</CardDescription>\n        </CardHeader>\n        <CardContent>\n          {isActivitiesLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <p className=\"text-muted-foreground\">Loading...</p>\n            </div>\n          ) : recentActivities.length === 0 ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <p className=\"text-muted-foreground\">No recent activities</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {recentActivities.map((activity) => (\n                <div key={activity.id} className=\"flex items-center justify-between p-3 rounded-lg hover-elevate border\">\n                  <div>\n                    <p className=\"font-medium\">{activity.action}</p>\n                    <p className=\"text-sm text-muted-foreground\">by {activity.user}</p>\n                  </div>\n                  <span className=\"text-sm text-muted-foreground\">{activity.time}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7992},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"server/db.ts":{"content":"import mongoose from 'mongoose';\n\nif (!process.env.MONGODB_URI) {\n  throw new Error(\n    \"MONGODB_URI must be set. Did you forget to set up your MongoDB connection string?\",\n  );\n}\n\nconst MONGODB_URI = process.env.MONGODB_URI;\n\nlet isConnected = false;\n\nexport async function connectToDatabase() {\n  if (isConnected) {\n    return;\n  }\n\n  try {\n    await mongoose.connect(MONGODB_URI);\n    isConnected = true;\n    console.log('Connected to MongoDB successfully');\n  } catch (error) {\n    console.error('MongoDB connection error:', error);\n    throw error;\n  }\n}\n\nmongoose.connection.on('disconnected', () => {\n  isConnected = false;\n  console.log('MongoDB disconnected');\n});\n\nmongoose.connection.on('error', (error) => {\n  console.error('MongoDB error:', error);\n});\n\nexport { mongoose };\n","size_bytes":789},"client/src/components/dashboards/FacultyDashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Clock, ClipboardCheck, FileText, MessageSquare, Wallet, CalendarDays, BookOpen, TrendingUp } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Link } from 'wouter';\nimport { StatCard } from '@/components/shared/StatCard';\nimport { formatCurrencyINR } from '@/lib/utils';\n\nexport function FacultyDashboard() {\n  const todaysClasses = [\n    { id: '1', time: '09:00 AM', class: 'Grade 10-A', subject: 'Mathematics', room: 'Room 201', status: 'upcoming' },\n    { id: '2', time: '10:30 AM', class: 'Grade 9-B', subject: 'Mathematics', room: 'Room 201', status: 'upcoming' },\n    { id: '3', time: '01:00 PM', class: 'Grade 11-A', subject: 'Statistics', room: 'Room 305', status: 'upcoming' },\n    { id: '4', time: '02:30 PM', class: 'Grade 12-A', subject: 'Calculus', room: 'Room 201', status: 'upcoming' },\n  ];\n\n  const pendingGrading = [\n    { id: '1', assignment: 'Chapter 5 Quiz', class: 'Grade 10-A', submitted: 42, total: 45, dueDate: 'Today' },\n    { id: '2', assignment: 'Mid-term Exam', class: 'Grade 11-A', submitted: 38, total: 40, dueDate: 'Tomorrow' },\n    { id: '3', assignment: 'Homework Assignment 12', class: 'Grade 9-B', submitted: 35, total: 38, dueDate: 'Jan 18' },\n  ];\n\n  const recentMessages = [\n    { id: '1', from: 'Mrs. Johnson (Parent)', subject: 'Question about assignment', time: '2 hours ago' },\n    { id: '2', from: 'Principal', subject: 'Faculty meeting reminder', time: '5 hours ago' },\n    { id: '3', from: 'Admin', subject: 'Updated exam schedule', time: '1 day ago' },\n  ];\n\n  return (\n    <div className=\"p-6 space-y-8 max-w-7xl\">\n      <div>\n        <h1 className=\"text-3xl font-semibold mb-2\">Faculty Dashboard</h1>\n        <p className=\"text-muted-foreground\">Your schedule and teaching activities</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Classes Today\"\n          value=\"4\"\n          icon={BookOpen}\n        />\n        <StatCard\n          title=\"Pending Grading\"\n          value=\"3\"\n          icon={FileText}\n        />\n        <StatCard\n          title=\"Leave Balance\"\n          value=\"12 days\"\n          icon={CalendarDays}\n        />\n        <StatCard\n          title=\"This Month Salary\"\n          value={formatCurrencyINR(4800)}\n          icon={Wallet}\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Link href=\"/attendance\">\n          <Card className=\"hover-elevate cursor-pointer transition-all\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-3 bg-blue-500/10 rounded-lg\">\n                  <ClipboardCheck className=\"h-6 w-6 text-blue-500\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold\">Mark Attendance</p>\n                  <p className=\"text-sm text-muted-foreground\">Today's classes</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n\n        <Link href=\"/examinations\">\n          <Card className=\"hover-elevate cursor-pointer transition-all\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-3 bg-green-500/10 rounded-lg\">\n                  <FileText className=\"h-6 w-6 text-green-500\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold\">Enter Grades</p>\n                  <p className=\"text-sm text-muted-foreground\">3 pending</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n\n        <Card className=\"hover-elevate cursor-pointer transition-all\" data-testid=\"card-salary-slip\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"p-3 bg-purple-500/10 rounded-lg\">\n                <Wallet className=\"h-6 w-6 text-purple-500\" />\n              </div>\n              <div>\n                <p className=\"font-semibold\">Salary Slip</p>\n                <p className=\"text-sm text-muted-foreground\">View & download</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Link href=\"/leave-management\">\n          <Card className=\"hover-elevate cursor-pointer transition-all\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-3 bg-orange-500/10 rounded-lg\">\n                  <CalendarDays className=\"h-6 w-6 text-orange-500\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold\">Apply Leave</p>\n                  <p className=\"text-sm text-muted-foreground\">12 days left</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Today's Classes</CardTitle>\n              <CardDescription>Your teaching schedule for today</CardDescription>\n            </div>\n            <Link href=\"/timetable\">\n              <Button variant=\"outline\" size=\"sm\">\n                View Full Timetable\n              </Button>\n            </Link>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {todaysClasses.map((classItem) => (\n              <div key={classItem.id} className=\"flex items-center justify-between p-4 rounded-lg hover-elevate border\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"flex items-center justify-center h-12 w-12 rounded-lg bg-primary/10\">\n                    <Clock className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium\">{classItem.subject} - {classItem.class}</p>\n                    <p className=\"text-sm text-muted-foreground\">{classItem.room}</p>\n                  </div>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"font-mono text-sm font-medium\">{classItem.time}</span>\n                  <Badge>{classItem.status}</Badge>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Pending Grading</CardTitle>\n            <CardDescription>Assignments waiting for evaluation</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {pendingGrading.map((item) => (\n                <div key={item.id} className=\"p-4 rounded-lg hover-elevate border\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                    <div>\n                      <p className=\"font-medium\">{item.assignment}</p>\n                      <p className=\"text-sm text-muted-foreground\">{item.class}</p>\n                    </div>\n                    <Badge variant=\"secondary\">{item.dueDate}</Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between mt-3\">\n                    <span className=\"text-sm text-muted-foreground\">\n                      {item.submitted}/{item.total} submitted\n                    </span>\n                    <Button size=\"sm\" variant=\"outline\" data-testid={`button-grade-${item.id}`}>\n                      <FileText className=\"mr-2 h-4 w-4\" />\n                      Grade Now\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Messages</CardTitle>\n            <CardDescription>Recent communication</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentMessages.map((message) => (\n                <div key={message.id} className=\"p-4 rounded-lg hover-elevate border cursor-pointer\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"flex items-center justify-center h-10 w-10 rounded-full bg-primary/10\">\n                      <MessageSquare className=\"h-5 w-5 text-primary\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-sm\">{message.from}</p>\n                      <p className=\"text-sm text-muted-foreground\">{message.subject}</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">{message.time}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9117},"client/src/pages/Transport.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { useAuth } from '@/lib/auth';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Bus, MapPin, Clock, Phone, User, IndianRupee, Plus, Users, X } from 'lucide-react';\nimport { formatCurrencyINR } from '@/lib/utils';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\nexport default function Transport() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const isStudent = user?.role === 'student';\n  const canViewTransport = user && ['admin', 'principal', 'student'].includes(user.role);\n  const canManageTransport = user && ['admin', 'principal'].includes(user.role);\n  const [isAddRouteDialogOpen, setIsAddRouteDialogOpen] = useState(false);\n  const [isManageStudentsDialogOpen, setIsManageStudentsDialogOpen] = useState(false);\n  const [selectedRouteId, setSelectedRouteId] = useState<string>('');\n  const [selectedStudentId, setSelectedStudentId] = useState<string>('');\n  const [assignmentForm, setAssignmentForm] = useState({\n    pickupStop: '',\n    dropStop: '',\n  });\n  const [routeForm, setRouteForm] = useState({\n    routeName: '',\n    routeNumber: '',\n    vehicleNumber: '',\n    driverName: '',\n    driverPhone: '',\n    capacity: '',\n    stops: '',\n    fare: '',\n  });\n\n  const { data: transportData, isLoading } = useQuery<{ transport?: any; routes?: any[] }>({\n    queryKey: isStudent ? ['/api/student/transport'] : ['/api/transport/routes'],\n    enabled: !!canViewTransport,\n  });\n\n  const transport = transportData?.transport;\n  const routes = transportData?.routes || [];\n  const route = transport?.routeId;\n\n  const { data: studentsData } = useQuery<{ students: any[] }>({\n    queryKey: ['/api/students'],\n    enabled: !!canManageTransport && isManageStudentsDialogOpen,\n  });\n\n  const { data: routeStudentsData } = useQuery<{ students: any[] }>({\n    queryKey: ['/api/transport/assignments', selectedRouteId],\n    enabled: !!selectedRouteId && isManageStudentsDialogOpen,\n  });\n\n  const allStudents = (studentsData?.students as any[]) || [];\n  const routeStudents = (routeStudentsData?.students as any[]) || [];\n\n  const assignStudentMutation = useMutation({\n    mutationFn: async () => {\n      if (!selectedStudentId || !selectedRouteId) {\n        throw new Error('Please select a student');\n      }\n      return await apiRequest('/api/transport/assignments', {\n        method: 'POST',\n        body: JSON.stringify({\n          studentId: selectedStudentId,\n          routeId: selectedRouteId,\n          pickupStop: assignmentForm.pickupStop,\n          dropStop: assignmentForm.dropStop,\n        }),\n      });\n    },\n    onSuccess: () => {\n      const assignedStudent = allStudents.find((s: any) => s.id === selectedStudentId);\n      const studentName = assignedStudent ? assignedStudent.name : 'Student';\n      \n      queryClient.invalidateQueries({ queryKey: ['/api/transport/assignments', selectedRouteId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      \n      toast({\n        title: 'Student Assigned',\n        description: `${studentName} has been successfully assigned to this route`,\n      });\n      \n      setSelectedStudentId('');\n      setAssignmentForm({ pickupStop: '', dropStop: '' });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to assign student',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const removeStudentMutation = useMutation({\n    mutationFn: async (assignmentId: string) => {\n      return await apiRequest(`/api/transport/assignments/${assignmentId}`, {\n        method: 'DELETE',\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/transport/assignments', selectedRouteId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      \n      toast({\n        title: 'Success',\n        description: 'Student removed from route successfully',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to remove student',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const createRouteMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('/api/transport/routes', {\n        method: 'POST',\n        body: JSON.stringify({\n          ...routeForm,\n          capacity: parseInt(routeForm.capacity) || 0,\n          fare: parseFloat(routeForm.fare) || 0,\n          active: true,\n        }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Transport route created successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/transport/routes'] });\n      setIsAddRouteDialogOpen(false);\n      setRouteForm({\n        routeName: '',\n        routeNumber: '',\n        vehicleNumber: '',\n        driverName: '',\n        driverPhone: '',\n        capacity: '',\n        stops: '',\n        fare: '',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to create transport route',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleCreateRoute = () => {\n    if (!routeForm.routeName || !routeForm.routeNumber) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in route name and number',\n        variant: 'destructive',\n      });\n      return;\n    }\n    createRouteMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <AppLayout>\n        <div className=\"p-6 space-y-6 max-w-5xl\">\n          <Skeleton className=\"h-12 w-64\" />\n          <Skeleton className=\"h-96\" />\n        </div>\n      </AppLayout>\n    );\n  }\n\n  // Admin/Principal view - show all routes\n  if (!isStudent) {\n    return (\n      <AppLayout>\n        <div className=\"p-6 space-y-6 max-w-7xl\">\n          <Breadcrumb items={[{ label: 'Transport Management' }]} />\n\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-semibold\">Transport Routes</h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Manage all school transport routes and vehicles\n              </p>\n            </div>\n            {canManageTransport && (\n              <Dialog open={isAddRouteDialogOpen} onOpenChange={setIsAddRouteDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-add-route\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Add Route\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\">\n                  <DialogHeader>\n                    <DialogTitle>Add Transport Route</DialogTitle>\n                    <DialogDescription>Create a new transport route</DialogDescription>\n                  </DialogHeader>\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"route-name\">Route Name *</Label>\n                        <Input\n                          id=\"route-name\"\n                          placeholder=\"Route A\"\n                          value={routeForm.routeName}\n                          onChange={(e) => setRouteForm({ ...routeForm, routeName: e.target.value })}\n                          data-testid=\"input-route-name\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"route-number\">Route Number *</Label>\n                        <Input\n                          id=\"route-number\"\n                          placeholder=\"R001\"\n                          value={routeForm.routeNumber}\n                          onChange={(e) => setRouteForm({ ...routeForm, routeNumber: e.target.value })}\n                          data-testid=\"input-route-number\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"vehicle-number\">Vehicle Number</Label>\n                        <Input\n                          id=\"vehicle-number\"\n                          placeholder=\"DL-1AB-1234\"\n                          value={routeForm.vehicleNumber}\n                          onChange={(e) => setRouteForm({ ...routeForm, vehicleNumber: e.target.value })}\n                          data-testid=\"input-vehicle-number\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"capacity\">Capacity</Label>\n                        <Input\n                          id=\"capacity\"\n                          type=\"number\"\n                          placeholder=\"50\"\n                          value={routeForm.capacity}\n                          onChange={(e) => setRouteForm({ ...routeForm, capacity: e.target.value })}\n                          data-testid=\"input-capacity\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"driver-name\">Driver Name</Label>\n                        <Input\n                          id=\"driver-name\"\n                          placeholder=\"John Doe\"\n                          value={routeForm.driverName}\n                          onChange={(e) => setRouteForm({ ...routeForm, driverName: e.target.value })}\n                          data-testid=\"input-driver-name\"\n                        />\n                      </div>\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"driver-phone\">Driver Phone</Label>\n                        <Input\n                          id=\"driver-phone\"\n                          placeholder=\"+91 98765 43210\"\n                          value={routeForm.driverPhone}\n                          onChange={(e) => setRouteForm({ ...routeForm, driverPhone: e.target.value })}\n                          data-testid=\"input-driver-phone\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"stops\">Stops (comma-separated)</Label>\n                      <Textarea\n                        id=\"stops\"\n                        placeholder=\"Stop 1, Stop 2, Stop 3\"\n                        rows={2}\n                        value={routeForm.stops}\n                        onChange={(e) => setRouteForm({ ...routeForm, stops: e.target.value })}\n                        data-testid=\"textarea-stops\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"fare\">Monthly Fare</Label>\n                      <Input\n                        id=\"fare\"\n                        type=\"number\"\n                        placeholder=\"1000\"\n                        value={routeForm.fare}\n                        onChange={(e) => setRouteForm({ ...routeForm, fare: e.target.value })}\n                        data-testid=\"input-fare\"\n                      />\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button variant=\"outline\" onClick={() => setIsAddRouteDialogOpen(false)} data-testid=\"button-cancel-route\">\n                      Cancel\n                    </Button>\n                    <Button onClick={handleCreateRoute} disabled={createRouteMutation.isPending} data-testid=\"button-create-route\">\n                      {createRouteMutation.isPending ? 'Creating...' : 'Create Route'}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            )}\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>All Transport Routes</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {routes.length === 0 ? (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <p>No transport routes configured</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {routes.map((routeItem: any, index: number) => (\n                    <Card key={routeItem._id || index} data-testid={`card-route-${routeItem._id}`}>\n                      <CardContent className=\"pt-6\">\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                          <div>\n                            <p className=\"text-sm text-muted-foreground\">Route Info</p>\n                            <p className=\"font-semibold\" data-testid={`text-route-name-${routeItem._id}`}>{routeItem.routeName}</p>\n                            <p className=\"text-sm text-muted-foreground\">Route #{routeItem.routeNumber}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-sm text-muted-foreground\">Vehicle</p>\n                            <p className=\"font-semibold\">{routeItem.vehicleNumber || 'N/A'}</p>\n                            <p className=\"text-sm text-muted-foreground\">Capacity: {routeItem.capacity || 'N/A'} seats</p>\n                          </div>\n                          <div>\n                            <p className=\"text-sm text-muted-foreground\">Driver</p>\n                            <p className=\"font-semibold\">{routeItem.driverName || 'N/A'}</p>\n                            <p className=\"text-sm text-muted-foreground\">{routeItem.driverPhone || 'N/A'}</p>\n                          </div>\n                        </div>\n                        {routeItem.stops && (\n                          <div className=\"mt-4\">\n                            <p className=\"text-sm text-muted-foreground mb-2\">Stops</p>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {routeItem.stops.split(',').map((stop: string, idx: number) => (\n                                <Badge key={idx} variant=\"secondary\">{stop.trim()}</Badge>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                        \n                        {/* Student Preview Section */}\n                        <div className=\"mt-4 border-t pt-4\">\n                          <div className=\"flex items-center justify-between mb-3\">\n                            <div className=\"flex items-center gap-2\">\n                              <Users className=\"h-4 w-4 text-muted-foreground\" />\n                              <span className=\"text-sm font-medium\">Assigned Students</span>\n                              <Badge variant=\"secondary\" data-testid={`badge-student-count-${routeItem._id}`}>\n                                {routeItem.studentCount || 0} {routeItem.studentCount === 1 ? 'Student' : 'Students'}\n                              </Badge>\n                            </div>\n                          </div>\n                          \n                          {routeItem.studentPreview && routeItem.studentPreview.length > 0 ? (\n                            <div className=\"space-y-2\">\n                              {routeItem.studentPreview.slice(0, 5).map((student: any, idx: number) => (\n                                <div \n                                  key={student._id || idx}\n                                  className=\"flex items-center justify-between p-2 bg-muted/50 rounded-md text-sm\"\n                                  data-testid={`preview-student-${student._id}`}\n                                >\n                                  <div>\n                                    <span className=\"font-medium\">\n                                      {student.firstName} {student.lastName}\n                                    </span>\n                                    <span className=\"text-muted-foreground ml-2\">\n                                      ({student.admissionNumber})\n                                    </span>\n                                  </div>\n                                  {student.pickupStop && (\n                                    <span className=\"text-xs text-muted-foreground\">\n                                      <MapPin className=\"inline h-3 w-3 mr-1\" />\n                                      {student.pickupStop}\n                                    </span>\n                                  )}\n                                </div>\n                              ))}\n                              {routeItem.studentCount > 5 && (\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"w-full\"\n                                  onClick={() => {\n                                    setSelectedRouteId(routeItem._id);\n                                    setIsManageStudentsDialogOpen(true);\n                                  }}\n                                  data-testid={`button-view-all-students-${routeItem._id}`}\n                                >\n                                  View All {routeItem.studentCount} Students\n                                </Button>\n                              )}\n                            </div>\n                          ) : (\n                            <p className=\"text-sm text-muted-foreground\" data-testid={`text-no-students-${routeItem._id}`}>\n                              No students assigned to this route\n                            </p>\n                          )}\n                        </div>\n                        \n                        <div className=\"mt-4 flex items-center justify-between\">\n                          <div className=\"flex items-center gap-4 flex-wrap\">\n                            <Badge variant={routeItem.active ? 'default' : 'secondary'}>\n                              {routeItem.active ? 'Active' : 'Inactive'}\n                            </Badge>\n                            {routeItem.fare && (\n                              <span className=\"text-sm font-medium\">{formatCurrencyINR(routeItem.fare)}/month</span>\n                            )}\n                          </div>\n                          {canManageTransport && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => {\n                                setSelectedRouteId(routeItem._id);\n                                setIsManageStudentsDialogOpen(true);\n                              }}\n                              data-testid={`button-manage-students-${routeItem._id}`}\n                            >\n                              <Users className=\"mr-2 h-4 w-4\" />\n                              Manage Students\n                            </Button>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Dialog open={isManageStudentsDialogOpen} onOpenChange={setIsManageStudentsDialogOpen}>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>Manage Route Students</DialogTitle>\n                <DialogDescription>\n                  Assign students to this route or remove existing assignments\n                </DialogDescription>\n              </DialogHeader>\n\n              <div className=\"space-y-6 py-4\">\n                <div className=\"space-y-3\">\n                  <Label className=\"font-semibold\">Assigned Students</Label>\n                  {routeStudents.length === 0 ? (\n                    <p className=\"text-sm text-muted-foreground\">No students assigned to this route</p>\n                  ) : (\n                    <div className=\"space-y-2\">\n                      {routeStudents.map((assignment: any) => (\n                        <div\n                          key={assignment._id}\n                          className=\"flex items-center justify-between p-3 border rounded-lg\"\n                          data-testid={`assignment-${assignment._id}`}\n                        >\n                          <div>\n                            <p className=\"font-medium\">\n                              {assignment.studentId?.firstName} {assignment.studentId?.lastName}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Admission: {assignment.studentId?.admissionNumber}\n                            </p>\n                            {assignment.pickupStop && (\n                              <p className=\"text-sm text-muted-foreground\">\n                                Pickup: {assignment.pickupStop}\n                              </p>\n                            )}\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeStudentMutation.mutate(assignment._id)}\n                            disabled={removeStudentMutation.isPending}\n                            data-testid={`button-remove-${assignment._id}`}\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"border-t pt-4 space-y-4\">\n                  <Label className=\"font-semibold\">Add Student to Route</Label>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <Label htmlFor=\"student-select\">Select Student</Label>\n                      <Select value={selectedStudentId} onValueChange={setSelectedStudentId}>\n                        <SelectTrigger data-testid=\"select-student\">\n                          <SelectValue placeholder=\"Choose a student\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {allStudents\n                            .filter((student: any) => !routeStudents.some((rs: any) => rs.studentId?._id === student.id))\n                            .map((student: any) => (\n                              <SelectItem key={student.id} value={student.id}>\n                                {student.name} - {student.admissionNumber}\n                              </SelectItem>\n                            ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"pickup-stop\">Pickup Stop (Optional)</Label>\n                      <Input\n                        id=\"pickup-stop\"\n                        placeholder=\"Enter pickup stop\"\n                        value={assignmentForm.pickupStop}\n                        onChange={(e) => setAssignmentForm({ ...assignmentForm, pickupStop: e.target.value })}\n                        data-testid=\"input-pickup-stop\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"drop-stop\">Drop Stop (Optional)</Label>\n                      <Input\n                        id=\"drop-stop\"\n                        placeholder=\"Enter drop stop\"\n                        value={assignmentForm.dropStop}\n                        onChange={(e) => setAssignmentForm({ ...assignmentForm, dropStop: e.target.value })}\n                        data-testid=\"input-drop-stop\"\n                      />\n                    </div>\n                    <Button\n                      onClick={() => assignStudentMutation.mutate()}\n                      disabled={!selectedStudentId || assignStudentMutation.isPending}\n                      className=\"w-full\"\n                      data-testid=\"button-assign-student\"\n                    >\n                      {assignStudentMutation.isPending ? 'Assigning...' : 'Assign Student'}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </AppLayout>\n    );\n  }\n\n  // Student view - show assigned transport\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-5xl\">\n        <Breadcrumb items={[{ label: 'Transport Management' }]} />\n\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Transport Details</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Your school transport information and schedule\n          </p>\n        </div>\n\n        {transport && route ? (\n          <div className=\"grid gap-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-3 bg-primary/10 rounded-lg\">\n                    <Bus className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div>\n                    <CardTitle>Assigned Route</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      {route.routeName || 'Route Information'}\n                    </p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <Bus className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Bus Number</p>\n                        <p className=\"font-semibold\" data-testid=\"text-vehicle-number\">\n                          {route.vehicleNumber || 'N/A'}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start gap-3\">\n                      <MapPin className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Pickup Stop</p>\n                        <p className=\"font-semibold\" data-testid=\"text-pickup-stop\">\n                          {transport.pickupStop || 'Not specified'}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start gap-3\">\n                      <Clock className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Pickup Time</p>\n                        <p className=\"font-semibold text-primary\" data-testid=\"text-pickup-time\">\n                          {transport.pickupTime || 'Not specified'}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <User className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Driver</p>\n                        <p className=\"font-semibold\" data-testid=\"text-driver-name\">\n                          {route.driverName || 'Not assigned'}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start gap-3\">\n                      <Phone className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Driver Contact</p>\n                        <p className=\"font-semibold\" data-testid=\"text-driver-phone\">\n                          {route.driverPhone || 'Not available'}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-start gap-3\">\n                      <Bus className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Vehicle Capacity</p>\n                        <p className=\"font-semibold\">\n                          {route.capacity ? `${route.capacity} seats` : 'Not specified'}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-3 bg-green-500/10 rounded-lg\">\n                    <MapPin className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <div>\n                    <CardTitle>Route Details</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-1\">Complete route information</p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">Route Number</p>\n                    <Badge variant=\"outline\" className=\"text-sm\" data-testid=\"badge-route-number\">\n                      {route.routeNumber || 'N/A'}\n                    </Badge>\n                  </div>\n\n                  {route.stops && (\n                    <div>\n                      <p className=\"text-sm text-muted-foreground mb-2\">All Stops</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {route.stops.split(',').map((stop: string, index: number) => (\n                          <Badge\n                            key={index}\n                            variant={\n                              stop.trim() === transport.pickupStop?.trim() ? 'default' : 'secondary'\n                            }\n                            className=\"text-sm\"\n                            data-testid={`stop-${index}`}\n                          >\n                            {stop.trim()}\n                          </Badge>\n                        ))}\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-2\">\n                        Your stop is highlighted\n                      </p>\n                    </div>\n                  )}\n\n                  <div>\n                    <p className=\"text-sm text-muted-foreground mb-2\">Status</p>\n                    <Badge\n                      variant={transport.status === 'active' ? 'default' : 'secondary'}\n                      data-testid=\"badge-transport-status\"\n                    >\n                      {transport.status === 'active' ? 'Active' : 'Inactive'}\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"p-3 bg-purple-500/10 rounded-lg\">\n                    <IndianRupee className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                  <div>\n                    <CardTitle>Fee Information</CardTitle>\n                    <p className=\"text-sm text-muted-foreground mt-1\">\n                      Monthly transport charges\n                    </p>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-baseline gap-2\">\n                  <p className=\"text-3xl font-bold\" data-testid=\"text-transport-fee\">\n                    {route.fare ? formatCurrencyINR(route.fare) : 'N/A'}\n                  </p>\n                  <p className=\"text-muted-foreground\">per month</p>\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Fee is included in your monthly school fee payment\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"py-12\">\n              <div className=\"text-center space-y-4\">\n                <div className=\"flex justify-center\">\n                  <div className=\"p-4 bg-muted rounded-full\">\n                    <Bus className=\"h-12 w-12 text-muted-foreground\" />\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"text-lg font-semibold\">No Transport Allocated</h3>\n                  <p className=\"text-muted-foreground mt-2\">\n                    You don't have any transport route assigned yet.\n                  </p>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Please contact the administration office if you need school transport services.\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":34171},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\nexport function formatCurrencyINR(value: number | string): string {\n  const numValue = typeof value === 'string' ? parseFloat(value) : value;\n  return new Intl.NumberFormat('en-IN', {\n    style: 'currency',\n    currency: 'INR',\n    maximumFractionDigits: 0,\n  }).format(numValue);\n}\n","size_bytes":450},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"design_guidelines.md":{"content":"# School ERP SaaS - Design Guidelines\n\n## Design Approach\n\n**Selected Approach:** Design System - Enterprise Application Pattern\n\n**Justification:** This is a utility-focused, information-dense enterprise application where efficiency, data clarity, and learnability are paramount. The system serves multiple user roles managing complex educational operations requiring consistent, professional UI patterns.\n\n**Design System Reference:** Ant Design principles with Material Design data visualization patterns\n\n**Key Design Principles:**\n1. **Clarity Over Aesthetics** - Information hierarchy and data readability take precedence\n2. **Consistency Across Roles** - Unified interface patterns regardless of user role\n3. **Efficient Data Entry** - Streamlined forms and bulk operations\n4. **Scannable Information** - Tables, cards, and lists optimized for quick comprehension\n5. **Professional Restraint** - Enterprise-grade polish without distracting embellishments\n\n---\n\n## Typography System\n\n**Font Family:**\n- Primary: Inter (via Google Fonts CDN) - excellent for data-heavy interfaces\n- Monospace: 'JetBrains Mono' for numerical data, IDs, codes\n\n**Type Scale:**\n- Page Titles: text-3xl font-semibold (30px)\n- Section Headers: text-xl font-semibold (20px)\n- Card Titles: text-lg font-medium (18px)\n- Body Text: text-base (16px)\n- Secondary Text: text-sm (14px)\n- Captions/Labels: text-xs font-medium uppercase tracking-wide (12px)\n- Table Headers: text-sm font-semibold (14px)\n- Data Values: text-base font-medium (16px)\n\n**Hierarchy Rules:**\n- Page titles always accompanied by breadcrumb navigation\n- Section headers use consistent bottom border treatment\n- Form labels: text-sm font-medium with mb-2\n- Helper text: text-xs with reduced opacity\n\n---\n\n## Layout System\n\n**Spacing Primitives:** Tailwind units of 2, 4, 6, 8, 12, 16\n- Component padding: p-6\n- Card padding: p-6\n- Section gaps: gap-6 or gap-8\n- Form field spacing: mb-6\n- Grid gaps: gap-4 or gap-6\n- Table cell padding: px-4 py-3\n- Button padding: px-6 py-2.5\n\n**Grid System:**\n- Dashboard cards: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\n- Data tables: Full width with horizontal scroll on mobile\n- Forms: Single column on mobile, max-w-2xl on desktop\n- Settings panels: Two-column (sidebar + content) on desktop\n\n**Container Strategy:**\n- App shell: Fixed sidebar (w-64) + main content area with max-w-7xl\n- Page content: px-6 py-8\n- Modals: max-w-2xl for forms, max-w-4xl for data views, max-w-6xl for complex wizards\n\n**Layout Patterns:**\n\n**Dashboard Layout:**\n- Top stats bar (4 metric cards in grid)\n- Quick action buttons row\n- Recent activities/notifications cards (2-column)\n- Data visualization section (charts, graphs)\n- Recent records table\n\n**List/Table Views:**\n- Filter bar at top (search + filter dropdowns + actions)\n- Data table with sortable columns\n- Pagination at bottom\n- Bulk action toolbar when rows selected\n\n**Form Views:**\n- Sticky header with title + action buttons\n- Form sections with clear dividers\n- Two-column layout for related fields on desktop\n- Fixed footer with Cancel/Save buttons on long forms\n\n---\n\n## Component Library\n\n### Navigation Components\n\n**Top Navigation Bar:**\n- Fixed at top, h-16\n- School logo/name (left), global search (center), notifications + user menu (right)\n- Divider below\n\n**Sidebar Navigation:**\n- Fixed left sidebar, w-64\n- Grouped menu items with icons (Heroicons outline)\n- Active state with subtle background treatment\n- Collapsible on mobile (hamburger menu)\n- Role-based menu visibility\n\n**Breadcrumbs:**\n- Below top nav on every page except dashboard\n- Home icon + text links with chevron separators\n- Current page not clickable\n\n### Data Display Components\n\n**Stat Cards:**\n- Compact height (h-24 to h-32)\n- Large number (text-3xl font-bold)\n- Label (text-sm)\n- Optional trend indicator (+/- percentage with icon)\n- Optional icon in top-right corner\n\n**Data Tables:**\n- Striped rows for readability\n- Hover state on rows\n- Sortable columns (icon appears on hover)\n- Checkbox column for bulk selection\n- Action column (right-aligned) with icon buttons/dropdown\n- Empty state with illustration + call-to-action\n- Loading state with skeleton rows\n\n**Cards:**\n- Standard: rounded-lg border with shadow-sm\n- Header section with title + optional action buttons\n- Content section with p-6\n- Optional footer section for meta info\n\n**Lists:**\n- Avatar/icon + title + description pattern\n- Clear hover states\n- Dividers between items\n- Grouped lists with subheaders\n\n### Form Components\n\n**Input Fields:**\n- Full width within containers\n- Label above (text-sm font-medium)\n- Input height h-10\n- Clear focus states (ring treatment)\n- Error states with red treatment + error message below\n- Helper text (text-xs) below when needed\n- Required indicator (*) in label\n\n**Dropdowns/Selects:**\n- Match input field height (h-10)\n- Chevron icon right-aligned\n- Searchable for long lists\n- Multi-select with tag display\n\n**Date/Time Pickers:**\n- Calendar popup for date selection\n- Time dropdown for time selection\n- Range pickers for from-to dates\n\n**File Upload:**\n- Drag-and-drop zone with dashed border\n- File type icons\n- Progress bars during upload\n- Preview thumbnails for images\n- File size and name display\n\n**Form Layouts:**\n- Single column on mobile\n- Two-column for related fields on desktop (grid-cols-2)\n- Full-width for textarea and complex inputs\n- Fieldset grouping with visual separation\n\n### Action Components\n\n**Buttons:**\n- Primary: Solid fill, font-medium, px-6 py-2.5\n- Secondary: Outlined, font-medium, px-6 py-2.5\n- Tertiary/Ghost: Text only with hover background\n- Icon buttons: Square (w-10 h-10) for actions\n- Loading state with spinner\n- Disabled state with reduced opacity\n\n**Button Groups:**\n- Segmented controls for toggles\n- Action button clusters with gap-2\n\n**Floating Action Button (FAB):**\n- Fixed bottom-right for primary actions (Add Student, etc.)\n- Large circular button (w-14 h-14)\n- Icon centered\n\n### Feedback Components\n\n**Alerts/Notifications:**\n- Toast notifications (top-right)\n- Inline alerts within forms/pages\n- Icons for success/error/warning/info states\n- Dismissable with close icon\n\n**Modals:**\n- Overlay with backdrop blur\n- Centered positioning\n- Header with title + close button\n- Content section with p-6\n- Footer with action buttons (right-aligned)\n\n**Progress Indicators:**\n- Loading spinners for async operations\n- Progress bars for multi-step processes\n- Skeleton screens for initial page loads\n\n### Navigation Overlays\n\n**Dropdown Menus:**\n- Shadow-lg with rounded corners\n- Menu items with icons (left) and labels\n- Hover states\n- Dividers between groups\n- Submenus with chevron indicator\n\n**User Profile Menu:**\n- Avatar + name + role\n- Quick links (Profile, Settings)\n- Logout option\n\n### Specialized Components\n\n**Attendance Grid:**\n- Calendar view with cells for each student/day\n- Status indicators (Present/Absent/Late) as colored badges\n- Bulk marking controls\n\n**Timetable View:**\n- Weekly grid layout\n- Time slots (rows) × Days (columns)\n- Subject cards in cells with teacher name\n- Room number indicator\n\n**Fee Receipt:**\n- Professional invoice-style layout\n- School header with logo\n- Receipt details table\n- Payment summary section\n- Print-optimized styling\n\n**Student ID Card:**\n- Standard ID card dimensions\n- Photo placeholder\n- Student details (Name, ID, Class, Blood Group)\n- Barcode/QR code for scanning\n- Print-optimized\n\n**Report Cards:**\n- Header with school branding\n- Student info section\n- Grades table (Subject, Marks, Grade, Remarks)\n- Overall performance summary\n- Signature sections\n\n---\n\n## Dashboard Specifications\n\n**Role-Specific Dashboards:**\n\n**Admin Dashboard:**\n- 4 metric cards: Total Students, Total Faculty, Monthly Revenue, Pending Fees\n- Quick Actions: Add Student, Mark Attendance, Process Payroll, Send Announcement\n- 2-column section: Recent Admissions (table) + Fee Collection Chart\n- Recent Activities timeline\n\n**Principal Dashboard:**\n- 4 metric cards: Overall Attendance %, Exam Performance, Faculty Count, Pending Approvals\n- Charts: Class-wise performance comparison, Monthly attendance trends\n- Pending Approvals list (clickable items)\n- School announcements feed\n\n**Faculty Dashboard:**\n- Today's classes list with time slots\n- Attendance marking quick access\n- Pending assignments to grade (list)\n- Student performance trends (their subjects)\n- Communication center (messages)\n\n**Student Dashboard:**\n- Today's timetable\n- Attendance summary (current month)\n- Recent exam results\n- Pending assignments list\n- Fee status indicator\n- Announcements\n\n**Parent Dashboard:**\n- Child selector dropdown (if multiple children)\n- Child's attendance summary\n- Recent exam results\n- Fee payment status with Pay Now button\n- Communication center (messages from teachers)\n- Upcoming events calendar\n\n---\n\n## Icons\n\n**Icon Library:** Heroicons (via CDN) - Use outline style for navigation, solid for emphasis\n\n**Icon Usage:**\n- Navigation menu items: 20×20px icons\n- Action buttons: 16×16px icons\n- Stat cards: 24×24px icons\n- Table actions: 16×16px icons\n- Empty states: 48×48px illustrations\n\n---\n\n## Animations\n\n**Minimal Animation Strategy:**\n- Page transitions: None (instant)\n- Modal open/close: Simple fade + scale (150ms)\n- Dropdown menus: Fade in (100ms)\n- Toast notifications: Slide from top (200ms)\n- Loading states: Spinner rotation only\n- NO scroll-triggered animations\n- NO complex hover effects beyond color/shadow changes\n\n---\n\n## Images\n\n**Image Usage:**\nThis is an enterprise application - images are functional, not decorative:\n\n1. **Login Page:** Clean illustration of school building or students (top third of page)\n2. **User Avatars:** Circular profile photos throughout (32×32px in lists, 64×64px in profiles)\n3. **School Logo:** Displayed in sidebar and header\n4. **Empty States:** Simple illustrations for \"No students found,\" \"No results,\" etc.\n5. **Student ID Cards:** Student photo upload (required)\n6. **Documents:** PDF/image previews for uploaded certificates\n\n**NO hero sections or large decorative imagery** - this is a data-focused application.","size_bytes":10123},"server/storage.ts":{"content":"import {\n  TenantModel,\n  UserModel,\n  StudentModel,\n  ClassModel,\n  SubjectModel,\n  AttendanceModel,\n  ExamModel,\n  ExamResultModel,\n  FeeStructureModel,\n  FeePaymentModel,\n  AnnouncementModel,\n  ClassSubjectModel,\n  UserPreferenceModel,\n  MessageModel,\n  NotificationModel,\n  TimetableModel,\n  StudentTransportModel,\n  TransportRouteModel,\n  PayrollModel,\n  LeaveRequestModel,\n  type User,\n  type InsertUser,\n  type Tenant,\n  type InsertTenant,\n  type Student,\n  type InsertStudent,\n  type Class,\n  type InsertClass,\n  type Subject,\n  type InsertSubject,\n  type Attendance,\n  type InsertAttendance,\n  type Exam,\n  type InsertExam,\n  type ExamResult,\n  type InsertExamResult,\n  type FeeStructure,\n  type InsertFeeStructure,\n  type FeePayment,\n  type InsertFeePayment,\n  type Announcement,\n  type InsertAnnouncement,\n  type ClassSubject,\n  type InsertClassSubject,\n  type UserPreference,\n  type InsertUserPreference,\n  type Message,\n  type Notification,\n  type Payroll,\n  type LeaveRequest,\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Tenants\n  getTenant(id: string): Promise<Tenant | undefined>;\n  getAllTenants(): Promise<Tenant[]>;\n  createTenant(tenant: InsertTenant): Promise<Tenant>;\n  \n  // Students\n  getStudent(id: string, tenantId?: string): Promise<Student | undefined>;\n  getStudentsByClass(classId: string, tenantId: string): Promise<Student[]>;\n  getStudentsByTenant(tenantId: string): Promise<Student[]>;\n  getStudentsWithDetailsOptimized(tenantId: string, limit?: number, offset?: number): Promise<any[]>;\n  getStudentsCount(tenantId: string): Promise<number>;\n  createStudent(student: InsertStudent): Promise<Student>;\n  \n  // Classes\n  getClass(id: string, tenantId?: string): Promise<Class | undefined>;\n  getClassesByTenant(tenantId: string): Promise<Class[]>;\n  createClass(classData: InsertClass): Promise<Class>;\n  \n  // Subjects\n  getSubjectsByTenant(tenantId: string): Promise<Subject[]>;\n  createSubject(subject: InsertSubject): Promise<Subject>;\n  \n  // Attendance\n  getAttendanceByDate(classId: string, date: string, tenantId: string): Promise<Attendance[]>;\n  createAttendance(attendanceData: InsertAttendance): Promise<Attendance>;\n  bulkCreateAttendance(attendanceRecords: any[], tenantId: string, markedBy: string): Promise<{ success: boolean; count: number }>;\n  \n  // Exams\n  getExamsByTenant(tenantId: string): Promise<Exam[]>;\n  createExam(exam: InsertExam): Promise<Exam>;\n  \n  // Exam Results\n  getResultsByExam(examId: string, tenantId: string): Promise<ExamResult[]>;\n  createExamResult(result: InsertExamResult): Promise<ExamResult>;\n  \n  // Fee Structures\n  getFeeStructuresByTenant(tenantId: string): Promise<FeeStructure[]>;\n  createFeeStructure(feeStructure: InsertFeeStructure): Promise<FeeStructure>;\n  \n  // Fee Payments\n  getFeePaymentsByStudent(studentId: string, tenantId: string): Promise<FeePayment[]>;\n  getFeePaymentsByTenant(tenantId: string, limit?: number): Promise<any[]>;\n  createFeePayment(payment: InsertFeePayment): Promise<FeePayment>;\n  searchFeePayments(tenantId: string, query: string, status?: string): Promise<any[]>;\n  \n  // Announcements\n  getAnnouncementsByTenant(tenantId: string): Promise<Announcement[]>;\n  createAnnouncement(announcement: InsertAnnouncement): Promise<Announcement>;\n  \n  // User Preferences\n  getUserPreferences(userId: string): Promise<UserPreference | undefined>;\n  createUserPreferences(prefs: InsertUserPreference): Promise<UserPreference>;\n  updateUserPreferences(userId: string, prefs: Partial<InsertUserPreference>): Promise<UserPreference>;\n  \n  // User Profile\n  updateUserProfile(userId: string, profileData: Partial<InsertUser>): Promise<User>;\n  \n  // Dashboard Stats\n  getFacultyCount(tenantId: string): Promise<number>;\n  getMonthlyRevenue(tenantId: string): Promise<number>;\n  getPendingFees(tenantId: string): Promise<number>;\n  \n  // SuperAdmin Dashboard Stats\n  getTotalUsersCount(): Promise<number>;\n  getTotalTenantsCount(): Promise<number>;\n  getTotalMRR(): Promise<number>;\n  getTenantsWithStats(): Promise<any[]>;\n  \n  // Admin Dashboard Data\n  getRecentAdmissions(tenantId: string, limit?: number): Promise<any[]>;\n  getFeeCollectionTrends(tenantId: string, months?: number): Promise<any[]>;\n  getRecentActivities(tenantId: string, limit?: number): Promise<any[]>;\n  \n  // Reports Data\n  getAttendanceStats(tenantId: string, months?: number): Promise<any[]>;\n  getPerformanceData(tenantId: string): Promise<any[]>;\n  getClassDistribution(tenantId: string): Promise<any[]>;\n  getFeeCollectionStats(tenantId: string, months?: number): Promise<any>;\n  \n  // Messages\n  getMessagesByUser(userId: string, tenantId: string): Promise<Message[]>;\n  getUnreadMessagesCount(userId: string, tenantId: string): Promise<number>;\n  createMessage(message: Partial<Message>): Promise<Message>;\n  markMessageAsRead(messageId: string, userId: string): Promise<void>;\n  \n  // Notifications\n  getNotificationsByUser(userId: string, tenantId: string, limit?: number): Promise<Notification[]>;\n  getUnreadNotificationsCount(userId: string, tenantId: string): Promise<number>;\n  createNotification(notification: Partial<Notification>): Promise<Notification>;\n  markNotificationAsRead(notificationId: string, userId: string): Promise<void>;\n  \n  // Student specific queries\n  getStudentTimetable(studentId: string, tenantId: string): Promise<any[]>;\n  getStudentExamResults(studentId: string, tenantId: string): Promise<any[]>;\n  getStudentTransportDetails(studentId: string, tenantId: string): Promise<any>;\n  getStudentByUserId(userId: string, tenantId: string): Promise<Student | undefined>;\n  \n  // Transport Management\n  getAllTransportRoutes(tenantId: string): Promise<any[]>;\n  createTransportRoute(route: any): Promise<any>;\n  createStudentTransport(assignment: any): Promise<any>;\n  deleteStudentTransport(assignmentId: string, tenantId: string): Promise<void>;\n  getRouteStudents(routeId: string, tenantId: string): Promise<any[]>;\n  \n  // Timetable Management\n  getTimetableByClass(classId: string, tenantId: string): Promise<any[]>;\n  \n  // Faculty Management\n  getFacultyByTenant(tenantId: string): Promise<any[]>;\n  updateUser(userId: string, tenantId: string, userData: Partial<InsertUser>): Promise<User>;\n  deleteUser(userId: string, tenantId: string): Promise<void>;\n  \n  // Payroll Management\n  getPayrollByUser(userId: string, tenantId: string): Promise<Payroll[]>;\n  getPayrollByTenant(tenantId: string, month?: string, year?: number): Promise<any[]>;\n  createPayroll(payroll: Partial<Payroll>): Promise<Payroll>;\n  updatePayroll(payrollId: string, tenantId: string, payrollData: Partial<Payroll>): Promise<Payroll>;\n  deletePayroll(payrollId: string, tenantId: string): Promise<void>;\n  \n  // Leave Management\n  getLeaveRequestsByUser(userId: string, tenantId: string): Promise<LeaveRequest[]>;\n  getLeaveRequestsByTenant(tenantId: string, status?: string): Promise<any[]>;\n  createLeaveRequest(leaveRequest: Partial<LeaveRequest>): Promise<LeaveRequest>;\n  updateLeaveRequest(leaveId: string, tenantId: string, updateData: Partial<LeaveRequest>): Promise<LeaveRequest>;\n  deleteLeaveRequest(leaveId: string, tenantId: string): Promise<void>;\n}\n\nfunction toPlainObject(doc: any): any {\n  if (!doc) return undefined;\n  const obj = doc.toObject ? doc.toObject() : doc;\n  if (obj._id) {\n    obj._id = obj._id.toString();\n  }\n  if (obj.tenantId && typeof obj.tenantId === 'object') {\n    obj.tenantId = obj.tenantId.toString();\n  }\n  if (obj.userId && typeof obj.userId === 'object') {\n    obj.userId = obj.userId.toString();\n  }\n  if (obj.classId && typeof obj.classId === 'object') {\n    obj.classId = obj.classId.toString();\n  }\n  return obj;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const user = await UserModel.findById(id).lean();\n    return user ? toPlainObject(user) : undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const user = await UserModel.findOne({ email }).lean();\n    return user ? toPlainObject(user) : undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const user = await UserModel.create(insertUser);\n    return toPlainObject(user);\n  }\n\n  // Tenants\n  async getTenant(id: string): Promise<Tenant | undefined> {\n    const tenant = await TenantModel.findById(id).lean();\n    return tenant ? toPlainObject(tenant) : undefined;\n  }\n\n  async getAllTenants(): Promise<Tenant[]> {\n    const tenants = await TenantModel.find().lean();\n    return tenants.map(toPlainObject);\n  }\n\n  async createTenant(insertTenant: InsertTenant): Promise<Tenant> {\n    const tenant = await TenantModel.create(insertTenant);\n    return toPlainObject(tenant);\n  }\n\n  // Students\n  async getStudent(id: string, tenantId?: string): Promise<Student | undefined> {\n    const query = tenantId ? { _id: id, tenantId } : { _id: id };\n    const student = await StudentModel.findOne(query).lean();\n    return student ? toPlainObject(student) : undefined;\n  }\n\n  async getStudentsByClass(classId: string, tenantId: string): Promise<Student[]> {\n    const students = await StudentModel.find({ classId, tenantId }).lean();\n    return students.map(toPlainObject);\n  }\n\n  async getStudentsByTenant(tenantId: string): Promise<Student[]> {\n    const students = await StudentModel.find({ tenantId }).lean();\n    return students.map(toPlainObject);\n  }\n\n  async getStudentsWithDetailsOptimized(tenantId: string, limit?: number, offset?: number): Promise<any[]> {\n    let query = StudentModel.find({ tenantId })\n      .populate('userId', 'firstName lastName email phone active avatar')\n      .populate('classId', 'name')\n      .sort({ admissionNumber: 1 });\n    \n    if (offset !== undefined) {\n      query = query.skip(offset);\n    }\n    if (limit !== undefined) {\n      query = query.limit(limit);\n    }\n    \n    const students = await query.lean();\n    \n    return students.map(student => {\n      const user = student.userId as any;\n      const classInfo = student.classId as any;\n      \n      return {\n        id: student._id.toString(),\n        name: user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Unknown' : 'Unknown',\n        admissionNumber: student.admissionNumber,\n        class: classInfo ? classInfo.name : 'Not assigned',\n        rollNumber: student.rollNumber || '',\n        email: user?.email || '',\n        phone: user?.phone || '',\n        status: user?.active ? 'active' : 'inactive',\n        avatar: user?.avatar || null,\n      };\n    });\n  }\n\n  async getStudentsCount(tenantId: string): Promise<number> {\n    return await StudentModel.countDocuments({ tenantId });\n  }\n\n  async createStudent(insertStudent: InsertStudent): Promise<Student> {\n    const student = await StudentModel.create(insertStudent);\n    return toPlainObject(student);\n  }\n\n  // Classes\n  async getClass(id: string, tenantId?: string): Promise<Class | undefined> {\n    const query = tenantId ? { _id: id, tenantId } : { _id: id };\n    const classData = await ClassModel.findOne(query).lean();\n    return classData ? toPlainObject(classData) : undefined;\n  }\n\n  async getClassesByTenant(tenantId: string): Promise<Class[]> {\n    const classes = await ClassModel.find({ tenantId }).lean();\n    return classes.map(toPlainObject);\n  }\n\n  async createClass(insertClass: InsertClass): Promise<Class> {\n    const classData = await ClassModel.create(insertClass);\n    return toPlainObject(classData);\n  }\n\n  // Subjects\n  async getSubjectsByTenant(tenantId: string): Promise<Subject[]> {\n    const subjects = await SubjectModel.find({ tenantId }).lean();\n    return subjects.map(toPlainObject);\n  }\n\n  async createSubject(insertSubject: InsertSubject): Promise<Subject> {\n    const subject = await SubjectModel.create(insertSubject);\n    return toPlainObject(subject);\n  }\n\n  // Attendance\n  async getAttendanceByDate(classId: string, date: string, tenantId: string): Promise<Attendance[]> {\n    const attendance = await AttendanceModel.find({\n      classId,\n      date: new Date(date),\n      tenantId,\n    }).lean();\n    return attendance.map(toPlainObject);\n  }\n\n  async createAttendance(insertAttendance: InsertAttendance): Promise<Attendance> {\n    const attendanceRecord = await AttendanceModel.create(insertAttendance);\n    return toPlainObject(attendanceRecord);\n  }\n\n  async bulkCreateAttendance(attendanceRecords: any[], tenantId: string, markedBy: string): Promise<{ success: boolean; count: number }> {\n    let processedCount = 0;\n\n    for (const record of attendanceRecords) {\n      const student = await StudentModel.findOne({ \n        _id: record.studentId, \n        tenantId \n      }).lean();\n      \n      if (!student) {\n        throw new Error(`Student ${record.studentId} not found or does not belong to tenant ${tenantId}`);\n      }\n\n      const classData = await ClassModel.findOne({ \n        _id: record.classId, \n        tenantId \n      }).lean();\n      \n      if (!classData) {\n        throw new Error(`Class ${record.classId} not found or does not belong to tenant ${tenantId}`);\n      }\n\n      const existingRecord = await AttendanceModel.findOne({\n        studentId: record.studentId,\n        classId: record.classId,\n        date: new Date(record.date),\n        tenantId,\n      });\n\n      if (existingRecord) {\n        await AttendanceModel.findOneAndUpdate(\n          {\n            studentId: record.studentId,\n            classId: record.classId,\n            date: new Date(record.date),\n            tenantId,\n          },\n          {\n            status: record.status,\n            markedBy: markedBy,\n            remarks: record.remarks || undefined,\n          },\n          { new: true }\n        );\n      } else {\n        await AttendanceModel.create({\n          studentId: record.studentId,\n          classId: record.classId,\n          date: new Date(record.date),\n          status: record.status,\n          tenantId,\n          markedBy: markedBy,\n          remarks: record.remarks || undefined,\n        });\n      }\n\n      processedCount++;\n    }\n\n    return { success: true, count: processedCount };\n  }\n\n  // Exams\n  async getExamsByTenant(tenantId: string): Promise<Exam[]> {\n    const exams = await ExamModel.find({ tenantId })\n      .sort({ startDate: -1 })\n      .lean();\n    return exams.map(toPlainObject);\n  }\n\n  async createExam(insertExam: InsertExam): Promise<Exam> {\n    const exam = await ExamModel.create(insertExam);\n    return toPlainObject(exam);\n  }\n\n  // Exam Results\n  async getResultsByExam(examId: string, tenantId: string): Promise<ExamResult[]> {\n    const results = await ExamResultModel.find({ examId, tenantId }).lean();\n    return results.map(toPlainObject);\n  }\n\n  async createExamResult(insertResult: InsertExamResult): Promise<ExamResult> {\n    const result = await ExamResultModel.create(insertResult);\n    return toPlainObject(result);\n  }\n\n  // Fee Structures\n  async getFeeStructuresByTenant(tenantId: string): Promise<FeeStructure[]> {\n    const feeStructures = await FeeStructureModel.find({ tenantId }).lean();\n    return feeStructures.map(toPlainObject);\n  }\n\n  async createFeeStructure(insertFeeStructure: InsertFeeStructure): Promise<FeeStructure> {\n    const feeStructure = await FeeStructureModel.create(insertFeeStructure);\n    return toPlainObject(feeStructure);\n  }\n\n  // Fee Payments\n  async getFeePaymentsByStudent(studentId: string, tenantId: string): Promise<FeePayment[]> {\n    const payments = await FeePaymentModel.find({ studentId, tenantId }).lean();\n    return payments.map(toPlainObject);\n  }\n\n  async getFeePaymentsByTenant(tenantId: string, limit: number = 50): Promise<any[]> {\n    const payments = await FeePaymentModel.find({ tenantId })\n      .populate('studentId', 'userId')\n      .sort({ paymentDate: -1 })\n      .limit(limit)\n      .lean();\n    \n    const paymentsWithDetails = await Promise.all(\n      payments.map(async (payment) => {\n        const student = await StudentModel.findById(payment.studentId).populate('userId', 'firstName lastName').populate('classId', 'name').lean();\n        return {\n          id: payment._id.toString(),\n          student: student ? `${(student.userId as any)?.firstName} ${(student.userId as any)?.lastName}` : 'Unknown',\n          class: student ? (student.classId as any)?.name || 'N/A' : 'N/A',\n          amount: payment.amount,\n          status: payment.status,\n          date: payment.paymentDate.toISOString().split('T')[0],\n          receipt: payment.receiptNumber || '',\n        };\n      })\n    );\n    \n    return paymentsWithDetails;\n  }\n\n  async createFeePayment(insertPayment: InsertFeePayment): Promise<FeePayment> {\n    const payment = await FeePaymentModel.create(insertPayment);\n    return toPlainObject(payment);\n  }\n\n  async searchFeePayments(tenantId: string, query: string, status?: string): Promise<any[]> {\n    const matchQuery: any = { tenantId };\n    \n    if (status) {\n      matchQuery.status = status;\n    }\n    \n    const payments = await FeePaymentModel.find(matchQuery)\n      .populate('studentId', 'userId admissionNumber')\n      .sort({ paymentDate: -1 })\n      .lean();\n    \n    const paymentsWithDetails = await Promise.all(\n      payments.map(async (payment) => {\n        const student = await StudentModel.findById(payment.studentId)\n          .populate('userId', 'firstName lastName email')\n          .populate('classId', 'name')\n          .lean();\n        \n        const studentName = student ? `${(student.userId as any)?.firstName} ${(student.userId as any)?.lastName}` : 'Unknown';\n        const studentEmail = (student?.userId as any)?.email || '';\n        const admissionNumber = (student as any)?.admissionNumber || '';\n        const className = student ? (student.classId as any)?.name || 'N/A' : 'N/A';\n        \n        if (query) {\n          const searchTerm = query.toLowerCase();\n          if (\n            !studentName.toLowerCase().includes(searchTerm) &&\n            !admissionNumber.toLowerCase().includes(searchTerm) &&\n            !className.toLowerCase().includes(searchTerm) &&\n            !studentEmail.toLowerCase().includes(searchTerm)\n          ) {\n            return null;\n          }\n        }\n        \n        return {\n          id: payment._id.toString(),\n          student: studentName,\n          admissionNumber,\n          class: className,\n          amount: payment.amount,\n          status: payment.status,\n          date: payment.paymentDate.toISOString().split('T')[0],\n          receipt: payment.receiptNumber || '',\n          paymentMode: payment.paymentMode,\n        };\n      })\n    );\n    \n    return paymentsWithDetails.filter(p => p !== null);\n  }\n\n  // Announcements\n  async getAnnouncementsByTenant(tenantId: string): Promise<Announcement[]> {\n    const announcements = await AnnouncementModel.find({ tenantId })\n      .sort({ publishedAt: -1 })\n      .lean();\n    return announcements.map(toPlainObject);\n  }\n\n  async createAnnouncement(insertAnnouncement: InsertAnnouncement): Promise<Announcement> {\n    const announcement = await AnnouncementModel.create(insertAnnouncement);\n    return toPlainObject(announcement);\n  }\n\n  // User Preferences\n  async getUserPreferences(userId: string): Promise<UserPreference | undefined> {\n    const prefs = await UserPreferenceModel.findOne({ userId }).lean();\n    return prefs ? toPlainObject(prefs) : undefined;\n  }\n\n  async createUserPreferences(insertPrefs: InsertUserPreference): Promise<UserPreference> {\n    const prefs = await UserPreferenceModel.create(insertPrefs);\n    return toPlainObject(prefs);\n  }\n\n  async updateUserPreferences(userId: string, updatePrefs: Partial<InsertUserPreference>): Promise<UserPreference> {\n    const prefs = await UserPreferenceModel.findOneAndUpdate(\n      { userId },\n      { ...updatePrefs, updatedAt: new Date() },\n      { new: true }\n    ).lean();\n    \n    if (!prefs) {\n      throw new Error('User preferences not found');\n    }\n    \n    return toPlainObject(prefs);\n  }\n\n  // User Profile\n  async updateUserProfile(userId: string, profileData: Partial<InsertUser>): Promise<User> {\n    const user = await UserModel.findByIdAndUpdate(\n      userId,\n      profileData,\n      { new: true }\n    ).lean();\n    \n    if (!user) {\n      throw new Error('User not found');\n    }\n    \n    return toPlainObject(user);\n  }\n  \n  // Dashboard Stats\n  async getFacultyCount(tenantId: string): Promise<number> {\n    return await UserModel.countDocuments({ \n      tenantId, \n      role: { $in: ['faculty', 'principal'] }\n    });\n  }\n  \n  async getMonthlyRevenue(tenantId: string): Promise<number> {\n    const currentMonth = new Date();\n    currentMonth.setDate(1);\n    currentMonth.setHours(0, 0, 0, 0);\n    \n    const nextMonth = new Date(currentMonth);\n    nextMonth.setMonth(nextMonth.getMonth() + 1);\n    \n    const result = await FeePaymentModel.aggregate([\n      {\n        $match: {\n          tenantId: tenantId as any,\n          paymentDate: { $gte: currentMonth, $lt: nextMonth },\n          status: 'paid'\n        }\n      },\n      {\n        $group: {\n          _id: null,\n          total: { $sum: '$amount' }\n        }\n      }\n    ]);\n    \n    return result.length > 0 ? result[0].total : 0;\n  }\n  \n  async getPendingFees(tenantId: string): Promise<number> {\n    const result = await FeePaymentModel.aggregate([\n      {\n        $match: {\n          tenantId: tenantId as any,\n          status: { $in: ['pending', 'overdue'] }\n        }\n      },\n      {\n        $group: {\n          _id: null,\n          total: { $sum: '$amount' }\n        }\n      }\n    ]);\n    \n    return result.length > 0 ? result[0].total : 0;\n  }\n  \n  // SuperAdmin Dashboard Stats\n  async getTotalUsersCount(): Promise<number> {\n    return await UserModel.countDocuments();\n  }\n  \n  async getTotalTenantsCount(): Promise<number> {\n    return await TenantModel.countDocuments();\n  }\n  \n  async getTotalMRR(): Promise<number> {\n    const currentMonth = new Date();\n    currentMonth.setDate(1);\n    currentMonth.setHours(0, 0, 0, 0);\n    \n    const nextMonth = new Date(currentMonth);\n    nextMonth.setMonth(nextMonth.getMonth() + 1);\n    \n    const result = await FeePaymentModel.aggregate([\n      {\n        $match: {\n          paymentDate: { $gte: currentMonth, $lt: nextMonth },\n          status: 'paid'\n        }\n      },\n      {\n        $group: {\n          _id: null,\n          total: { $sum: '$amount' }\n        }\n      }\n    ]);\n    \n    return result.length > 0 ? result[0].total : 0;\n  }\n  \n  async getTenantsWithStats(): Promise<any[]> {\n    const tenants = await TenantModel.find().lean();\n    \n    const tenantsWithStats = await Promise.all(\n      tenants.map(async (tenant) => {\n        const tenantId = tenant._id.toString();\n        const [studentCount, monthlyRevenue] = await Promise.all([\n          StudentModel.countDocuments({ tenantId }),\n          this.getMonthlyRevenue(tenantId)\n        ]);\n        \n        return {\n          id: tenantId,\n          name: tenant.name,\n          students: studentCount,\n          plan: 'Standard',\n          status: tenant.active ? 'active' : 'inactive',\n          revenue: monthlyRevenue,\n        };\n      })\n    );\n    \n    return tenantsWithStats;\n  }\n  \n  // Admin Dashboard Data\n  async getRecentAdmissions(tenantId: string, limit: number = 5): Promise<any[]> {\n    const students = await StudentModel.find({ tenantId })\n      .populate('userId', 'firstName lastName email phone active')\n      .populate('classId', 'name')\n      .sort({ createdAt: -1 })\n      .limit(limit)\n      .lean();\n    \n    return students.map(student => {\n      const user = student.userId as any;\n      const classInfo = student.classId as any;\n      \n      return {\n        id: student._id.toString(),\n        name: user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() || 'Unknown' : 'Unknown',\n        class: classInfo ? classInfo.name : 'Not assigned',\n        admissionDate: student.createdAt ? new Date(student.createdAt).toISOString().split('T')[0] : '',\n        status: user?.active ? 'active' : 'inactive',\n      };\n    });\n  }\n  \n  async getFeeCollectionTrends(tenantId: string, months: number = 6): Promise<any[]> {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setMonth(startDate.getMonth() - months);\n    \n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const trends: any[] = [];\n    \n    for (let i = 0; i < months; i++) {\n      const monthStart = new Date();\n      monthStart.setMonth(monthStart.getMonth() - (months - 1 - i));\n      monthStart.setDate(1);\n      monthStart.setHours(0, 0, 0, 0);\n      \n      const monthEnd = new Date(monthStart);\n      monthEnd.setMonth(monthEnd.getMonth() + 1);\n      \n      const result = await FeePaymentModel.aggregate([\n        {\n          $match: {\n            tenantId: tenantId as any,\n            paymentDate: { $gte: monthStart, $lt: monthEnd }\n          }\n        },\n        {\n          $group: {\n            _id: null,\n            amount: { $sum: '$amount' }\n          }\n        }\n      ]);\n      \n      trends.push({\n        month: monthNames[monthStart.getMonth()],\n        amount: result.length > 0 ? result[0].amount : 0\n      });\n    }\n    \n    return trends;\n  }\n  \n  async getRecentActivities(tenantId: string, limit: number = 5): Promise<any[]> {\n    const activities: any[] = [];\n    \n    const recentAnnouncements = await AnnouncementModel.find({ tenantId })\n      .sort({ publishedAt: -1 })\n      .limit(limit)\n      .lean();\n    \n    for (const announcement of recentAnnouncements) {\n      activities.push({\n        id: announcement._id.toString(),\n        action: 'New announcement posted',\n        user: 'Admin',\n        time: this.getRelativeTime(announcement.publishedAt)\n      });\n    }\n    \n    const recentPayments = await FeePaymentModel.find({ tenantId, status: 'paid' })\n      .populate('studentId', 'userId')\n      .sort({ paymentDate: -1 })\n      .limit(2)\n      .lean();\n    \n    for (const payment of recentPayments) {\n      activities.push({\n        id: payment._id.toString(),\n        action: 'Fee payment received',\n        user: 'Student',\n        time: this.getRelativeTime(payment.paymentDate)\n      });\n    }\n    \n    return activities.slice(0, limit);\n  }\n  \n  private getRelativeTime(date: Date): string {\n    const now = new Date();\n    const diffMs = now.getTime() - new Date(date).getTime();\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    \n    if (diffHours < 1) return 'Just now';\n    if (diffHours < 24) return `${diffHours} hours ago`;\n    if (diffDays === 1) return '1 day ago';\n    return `${diffDays} days ago`;\n  }\n  \n  // Reports Data\n  async getAttendanceStats(tenantId: string, months: number = 6): Promise<any[]> {\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const stats: any[] = [];\n    \n    for (let i = 0; i < months; i++) {\n      const monthStart = new Date();\n      monthStart.setMonth(monthStart.getMonth() - (months - 1 - i));\n      monthStart.setDate(1);\n      monthStart.setHours(0, 0, 0, 0);\n      \n      const monthEnd = new Date(monthStart);\n      monthEnd.setMonth(monthEnd.getMonth() + 1);\n      \n      const result = await AttendanceModel.aggregate([\n        {\n          $match: {\n            tenantId: tenantId as any,\n            date: { $gte: monthStart, $lt: monthEnd }\n          }\n        },\n        {\n          $group: {\n            _id: '$status',\n            count: { $sum: 1 }\n          }\n        }\n      ]);\n      \n      const present = result.find(r => r._id === 'present')?.count || 0;\n      const absent = result.find(r => r._id === 'absent')?.count || 0;\n      const total = present + absent;\n      \n      stats.push({\n        month: monthNames[monthStart.getMonth()],\n        present: total > 0 ? Math.round((present / total) * 100) : 0,\n        absent: total > 0 ? Math.round((absent / total) * 100) : 0\n      });\n    }\n    \n    return stats;\n  }\n  \n  async getPerformanceData(tenantId: string): Promise<any[]> {\n    const results = await ExamResultModel.aggregate([\n      {\n        $match: {\n          tenantId: tenantId as any\n        }\n      },\n      {\n        $lookup: {\n          from: 'exams',\n          localField: 'examId',\n          foreignField: '_id',\n          as: 'exam'\n        }\n      },\n      {\n        $unwind: '$exam'\n      },\n      {\n        $group: {\n          _id: '$exam.subject',\n          avgMarks: { $avg: '$marksObtained' }\n        }\n      }\n    ]);\n    \n    const subjects = await SubjectModel.find({ tenantId }).lean();\n    \n    return subjects.map(subject => {\n      const subjectResult = results.find(r => r._id?.toString() === subject._id.toString());\n      return {\n        subject: subject.name,\n        average: subjectResult ? Math.round(subjectResult.avgMarks) : 0\n      };\n    });\n  }\n  \n  async getClassDistribution(tenantId: string): Promise<any[]> {\n    const distribution = await StudentModel.aggregate([\n      {\n        $match: {\n          tenantId: tenantId as any\n        }\n      },\n      {\n        $lookup: {\n          from: 'classes',\n          localField: 'classId',\n          foreignField: '_id',\n          as: 'class'\n        }\n      },\n      {\n        $unwind: '$class'\n      },\n      {\n        $group: {\n          _id: '$class.name',\n          value: { $sum: 1 }\n        }\n      },\n      {\n        $sort: { _id: 1 }\n      }\n    ]);\n    \n    return distribution.map(item => ({\n      name: item._id,\n      value: item.value\n    }));\n  }\n  \n  async getFeeCollectionStats(tenantId: string, months: number = 6): Promise<any> {\n    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const trends: any[] = [];\n    \n    for (let i = 0; i < months; i++) {\n      const monthStart = new Date();\n      monthStart.setMonth(monthStart.getMonth() - (months - 1 - i));\n      monthStart.setDate(1);\n      monthStart.setHours(0, 0, 0, 0);\n      \n      const monthEnd = new Date(monthStart);\n      monthEnd.setMonth(monthEnd.getMonth() + 1);\n      \n      const result = await FeePaymentModel.aggregate([\n        {\n          $match: {\n            tenantId: tenantId as any,\n            paymentDate: { $gte: monthStart, $lt: monthEnd }\n          }\n        },\n        {\n          $group: {\n            _id: '$status',\n            amount: { $sum: '$amount' }\n          }\n        }\n      ]);\n      \n      const collected = result.find(r => r._id === 'paid')?.amount || 0;\n      const pending = result.filter(r => r._id !== 'paid').reduce((sum, r) => sum + r.amount, 0);\n      \n      trends.push({\n        month: monthNames[monthStart.getMonth()],\n        collected,\n        pending\n      });\n    }\n    \n    const totalRevenue = await FeePaymentModel.aggregate([\n      {\n        $match: {\n          tenantId: tenantId as any\n        }\n      },\n      {\n        $group: {\n          _id: '$status',\n          amount: { $sum: '$amount' }\n        }\n      }\n    ]);\n    \n    const collectedTotal = totalRevenue.find(r => r._id === 'paid')?.amount || 0;\n    const pendingTotal = totalRevenue.filter(r => r._id !== 'paid').reduce((sum, r) => sum + r.amount, 0);\n    \n    return {\n      trends,\n      totalRevenue: collectedTotal + pendingTotal,\n      collected: collectedTotal,\n      pending: pendingTotal\n    };\n  }\n  \n  // Faculty Management\n  async getFacultyByTenant(tenantId: string): Promise<any[]> {\n    const faculty = await UserModel.find({ \n      tenantId, \n      role: { $in: ['faculty', 'principal'] },\n      active: true\n    })\n    .populate('tenantId', 'name')\n    .sort({ firstName: 1 })\n    .lean();\n    \n    return faculty.map(user => ({\n      id: user._id.toString(),\n      name: `${user.firstName} ${user.lastName}`,\n      email: user.email,\n      phone: user.phone || '',\n      role: user.role,\n      avatar: user.avatar,\n      active: user.active,\n      createdAt: user.createdAt\n    }));\n  }\n  \n  async updateUser(userId: string, tenantId: string, userData: Partial<InsertUser>): Promise<User> {\n    const user = await UserModel.findOneAndUpdate(\n      { _id: userId, tenantId },\n      userData,\n      { new: true }\n    ).lean();\n    \n    if (!user) {\n      throw new Error('User not found or access denied');\n    }\n    \n    return toPlainObject(user);\n  }\n  \n  async deleteUser(userId: string, tenantId: string): Promise<void> {\n    const result = await UserModel.findOneAndDelete({ _id: userId, tenantId });\n    \n    if (!result) {\n      throw new Error('User not found or access denied');\n    }\n  }\n  \n  // Messages\n  async getMessagesByUser(userId: string, tenantId: string): Promise<Message[]> {\n    const messages = await MessageModel.find({\n      tenantId,\n      recipientId: userId\n    })\n    .populate('senderId', 'firstName lastName email')\n    .sort({ createdAt: -1 })\n    .limit(50)\n    .lean();\n    \n    return messages.map(toPlainObject);\n  }\n  \n  async getUnreadMessagesCount(userId: string, tenantId: string): Promise<number> {\n    return await MessageModel.countDocuments({\n      tenantId,\n      recipientId: userId,\n      read: false\n    });\n  }\n  \n  async createMessage(message: Partial<Message>): Promise<Message> {\n    const newMessage = await MessageModel.create(message);\n    return toPlainObject(newMessage.toObject());\n  }\n  \n  async markMessageAsRead(messageId: string, userId: string): Promise<void> {\n    await MessageModel.findOneAndUpdate(\n      { _id: messageId, recipientId: userId },\n      { read: true }\n    );\n  }\n  \n  // Notifications\n  async getNotificationsByUser(userId: string, tenantId: string, limit: number = 20): Promise<Notification[]> {\n    const notifications = await NotificationModel.find({\n      tenantId,\n      userId\n    })\n    .sort({ createdAt: -1 })\n    .limit(limit)\n    .lean();\n    \n    return notifications.map(toPlainObject);\n  }\n  \n  async getUnreadNotificationsCount(userId: string, tenantId: string): Promise<number> {\n    return await NotificationModel.countDocuments({\n      tenantId,\n      userId,\n      read: false\n    });\n  }\n  \n  async createNotification(notification: Partial<Notification>): Promise<Notification> {\n    const newNotification = await NotificationModel.create(notification);\n    return toPlainObject(newNotification.toObject());\n  }\n  \n  async markNotificationAsRead(notificationId: string, userId: string): Promise<void> {\n    await NotificationModel.findOneAndUpdate(\n      { _id: notificationId, userId },\n      { read: true }\n    );\n  }\n  \n  // Student specific queries\n  async getStudentByUserId(userId: string, tenantId: string): Promise<Student | undefined> {\n    const student = await StudentModel.findOne({ userId, tenantId }).lean();\n    return student ? toPlainObject(student) : undefined;\n  }\n  \n  async getStudentTimetable(studentId: string, tenantId: string): Promise<any[]> {\n    const student = await StudentModel.findOne({ _id: studentId, tenantId });\n    if (!student || !student.classId) {\n      return [];\n    }\n    \n    const timetable = await TimetableModel.find({\n      tenantId,\n      classId: student.classId\n    })\n    .populate('subjectId', 'name code')\n    .populate('teacherId', 'firstName lastName')\n    .sort({ day: 1, startTime: 1 })\n    .lean();\n    \n    return timetable.map(toPlainObject);\n  }\n  \n  async getTimetableByClass(classId: string, tenantId: string): Promise<any[]> {\n    const timetable = await TimetableModel.find({\n      tenantId,\n      classId\n    })\n    .populate('subjectId', 'name code')\n    .populate('teacherId', 'firstName lastName')\n    .populate('classId', 'name grade section')\n    .sort({ dayOfWeek: 1, startTime: 1 })\n    .lean();\n    \n    return timetable.map(toPlainObject);\n  }\n\n  async createTimetable(data: any): Promise<any> {\n    const timetable = await TimetableModel.create(data);\n    const populated = await TimetableModel.findById(timetable._id)\n      .populate('subjectId', 'name code')\n      .populate('teacherId', 'firstName lastName')\n      .populate('classId', 'name grade section')\n      .lean();\n    return toPlainObject(populated);\n  }\n\n  async updateTimetable(id: string, data: any, tenantId: string): Promise<any> {\n    const updated = await TimetableModel.findOneAndUpdate(\n      { _id: id, tenantId },\n      data,\n      { new: true }\n    )\n    .populate('subjectId', 'name code')\n    .populate('teacherId', 'firstName lastName')\n    .populate('classId', 'name grade section')\n    .lean();\n    \n    return updated ? toPlainObject(updated) : null;\n  }\n\n  async deleteTimetable(id: string, tenantId: string): Promise<boolean> {\n    const result = await TimetableModel.findOneAndDelete({ _id: id, tenantId });\n    return !!result;\n  }\n\n  async checkTimetableConflict(\n    classId: string,\n    dayOfWeek: string,\n    startTime: string,\n    endTime: string,\n    tenantId: string,\n    excludeId: string | null\n  ): Promise<boolean> {\n    const query: any = {\n      tenantId,\n      classId,\n      dayOfWeek\n    };\n\n    if (excludeId) {\n      query._id = { $ne: excludeId };\n    }\n\n    const existingEntries = await TimetableModel.find(query).lean();\n\n    for (const entry of existingEntries) {\n      const existingStart = entry.startTime;\n      const existingEnd = entry.endTime;\n\n      if (\n        (startTime >= existingStart && startTime < existingEnd) ||\n        (endTime > existingStart && endTime <= existingEnd) ||\n        (startTime <= existingStart && endTime >= existingEnd)\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  \n  async getStudentExamResults(studentId: string, tenantId: string): Promise<any[]> {\n    const results = await ExamResultModel.find({\n      tenantId,\n      studentId\n    })\n    .populate('examId', 'name type startDate endDate')\n    .populate('subjectId', 'name code')\n    .sort({ createdAt: -1 })\n    .lean();\n    \n    return results.map(toPlainObject);\n  }\n  \n  async getStudentTransportDetails(studentId: string, tenantId: string): Promise<any> {\n    const transport = await StudentTransportModel.findOne({\n      tenantId,\n      studentId\n    })\n    .populate('routeId')\n    .lean();\n    \n    if (!transport) {\n      return null;\n    }\n    \n    return toPlainObject(transport);\n  }\n  \n  async getAllTransportRoutes(tenantId: string): Promise<any[]> {\n    const routes = await TransportRouteModel.find({ tenantId })\n    .sort({ routeNumber: 1 })\n    .lean();\n    \n    // For each route, get student count and preview (first 5 students)\n    const routesWithStudents = await Promise.all(\n      routes.map(async (route) => {\n        const assignments = await StudentTransportModel.find({\n          tenantId,\n          routeId: route._id\n        })\n        .populate('studentId', 'firstName lastName admissionNumber')\n        .limit(5)\n        .lean();\n        \n        const totalCount = await StudentTransportModel.countDocuments({\n          tenantId,\n          routeId: route._id\n        });\n        \n        return {\n          ...toPlainObject(route),\n          studentPreview: assignments.map(a => ({\n            _id: a._id,\n            firstName: (a.studentId as any)?.firstName,\n            lastName: (a.studentId as any)?.lastName,\n            admissionNumber: (a.studentId as any)?.admissionNumber,\n            pickupStop: a.pickupStop,\n          })),\n          studentCount: totalCount\n        };\n      })\n    );\n    \n    return routesWithStudents;\n  }\n  \n  async createTransportRoute(route: any): Promise<any> {\n    const newRoute = await TransportRouteModel.create(route);\n    return toPlainObject(newRoute.toObject());\n  }\n  \n  async createStudentTransport(assignment: any): Promise<any> {\n    const existing = await StudentTransportModel.findOne({\n      tenantId: assignment.tenantId,\n      studentId: assignment.studentId\n    });\n    \n    if (existing) {\n      const updated = await StudentTransportModel.findOneAndUpdate(\n        { tenantId: assignment.tenantId, studentId: assignment.studentId },\n        assignment,\n        { new: true }\n      ).lean();\n      return toPlainObject(updated);\n    }\n    \n    const newAssignment = await StudentTransportModel.create(assignment);\n    return toPlainObject(newAssignment.toObject());\n  }\n  \n  async deleteStudentTransport(assignmentId: string, tenantId: string): Promise<void> {\n    await StudentTransportModel.findOneAndDelete({\n      _id: assignmentId,\n      tenantId\n    });\n  }\n  \n  async getRouteStudents(routeId: string, tenantId: string): Promise<any[]> {\n    const assignments = await StudentTransportModel.find({\n      tenantId,\n      routeId\n    })\n    .populate('studentId', 'firstName lastName admissionNumber')\n    .lean();\n    \n    return assignments.map(toPlainObject);\n  }\n  \n  // Payroll Management\n  async getPayrollByUser(userId: string, tenantId: string): Promise<Payroll[]> {\n    const payrolls = await PayrollModel.find({\n      tenantId,\n      userId\n    })\n    .sort({ year: -1, month: -1 })\n    .lean();\n    \n    return payrolls.map(toPlainObject);\n  }\n  \n  async getPayrollByTenant(tenantId: string, month?: string, year?: number): Promise<any[]> {\n    const query: any = { tenantId };\n    if (month) query.month = month;\n    if (year) query.year = year;\n    \n    const payrolls = await PayrollModel.find(query)\n    .populate('userId', 'firstName lastName email')\n    .sort({ year: -1, month: -1 })\n    .lean();\n    \n    return payrolls.map(toPlainObject);\n  }\n  \n  async createPayroll(payroll: Partial<Payroll>): Promise<Payroll> {\n    const newPayroll = await PayrollModel.create(payroll);\n    return toPlainObject(newPayroll.toObject());\n  }\n  \n  async updatePayroll(payrollId: string, tenantId: string, payrollData: Partial<Payroll>): Promise<Payroll> {\n    const payroll = await PayrollModel.findOneAndUpdate(\n      { _id: payrollId, tenantId },\n      payrollData,\n      { new: true }\n    ).lean();\n    \n    if (!payroll) {\n      throw new Error('Payroll not found or access denied');\n    }\n    \n    return toPlainObject(payroll);\n  }\n  \n  async deletePayroll(payrollId: string, tenantId: string): Promise<void> {\n    await PayrollModel.findOneAndDelete({\n      _id: payrollId,\n      tenantId\n    });\n  }\n  \n  // Leave Management\n  async getLeaveRequestsByUser(userId: string, tenantId: string): Promise<LeaveRequest[]> {\n    const leaveRequests = await LeaveRequestModel.find({\n      tenantId,\n      userId\n    })\n    .populate('userId', 'firstName lastName email')\n    .populate('reviewedBy', 'firstName lastName')\n    .sort({ createdAt: -1 })\n    .lean();\n    \n    return leaveRequests.map(toPlainObject);\n  }\n  \n  async getLeaveRequestsByTenant(tenantId: string, status?: string): Promise<any[]> {\n    const query: any = { tenantId };\n    if (status) query.status = status;\n    \n    const leaveRequests = await LeaveRequestModel.find(query)\n    .populate('userId', 'firstName lastName email')\n    .populate('reviewedBy', 'firstName lastName')\n    .sort({ createdAt: -1 })\n    .lean();\n    \n    return leaveRequests.map(toPlainObject);\n  }\n  \n  async createLeaveRequest(leaveRequest: Partial<LeaveRequest>): Promise<LeaveRequest> {\n    const newLeaveRequest = await LeaveRequestModel.create(leaveRequest);\n    return toPlainObject(newLeaveRequest.toObject());\n  }\n  \n  async updateLeaveRequest(leaveId: string, tenantId: string, updateData: Partial<LeaveRequest>): Promise<LeaveRequest> {\n    const leaveRequest = await LeaveRequestModel.findOneAndUpdate(\n      { _id: leaveId, tenantId },\n      updateData,\n      { new: true }\n    ).lean();\n    \n    if (!leaveRequest) {\n      throw new Error('Leave request not found or access denied');\n    }\n    \n    return toPlainObject(leaveRequest);\n  }\n  \n  async deleteLeaveRequest(leaveId: string, tenantId: string): Promise<void> {\n    const result = await LeaveRequestModel.findOneAndDelete({ _id: leaveId, tenantId });\n    \n    if (!result) {\n      throw new Error('Leave request not found or access denied');\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":44045},"client/src/pages/Examinations.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { DataTable } from '@/components/shared/DataTable';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/lib/auth';\nimport { format } from 'date-fns';\nimport { FileText, Download, Calendar, TrendingUp, Plus } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\nexport default function Examinations() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const isStudent = user?.role === 'student';\n  const canManageExams = user && ['admin', 'principal', 'super_admin'].includes(user.role);\n  const [isAddExamDialogOpen, setIsAddExamDialogOpen] = useState(false);\n  const [examForm, setExamForm] = useState({\n    name: '',\n    type: '',\n    startDate: '',\n    endDate: '',\n    totalMarks: '100',\n    description: '',\n  });\n\n  const { data: examsData, isLoading: examsLoading } = useQuery({\n    queryKey: ['/api/exams'],\n  });\n\n  const { data: resultsData, isLoading: resultsLoading } = useQuery({\n    queryKey: isStudent ? ['/api/student/exam-results'] : [],\n    enabled: isStudent,\n  });\n\n  const exams = examsData?.exams || [];\n  const results = resultsData?.results || [];\n\n  const createExamMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('/api/exams', {\n        method: 'POST',\n        body: JSON.stringify({\n          ...examForm,\n          totalMarks: parseInt(examForm.totalMarks),\n        }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Exam created successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/exams'] });\n      setIsAddExamDialogOpen(false);\n      setExamForm({\n        name: '',\n        type: '',\n        startDate: '',\n        endDate: '',\n        totalMarks: '100',\n        description: '',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to create exam',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleCreateExam = () => {\n    if (!examForm.name || !examForm.type || !examForm.startDate || !examForm.endDate) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n    createExamMutation.mutate();\n  };\n\n  const now = new Date();\n  const upcomingExams = exams.filter((exam: any) => new Date(exam.startDate) > now);\n  const completedExams = exams.filter((exam: any) => new Date(exam.endDate) < now);\n  const ongoingExams = exams.filter(\n    (exam: any) => new Date(exam.startDate) <= now && new Date(exam.endDate) >= now\n  );\n\n  const getStatusBadge = (exam: any) => {\n    const startDate = new Date(exam.startDate);\n    const endDate = new Date(exam.endDate);\n\n    if (now < startDate) {\n      return <Badge variant=\"secondary\">Upcoming</Badge>;\n    } else if (now >= startDate && now <= endDate) {\n      return <Badge>In Progress</Badge>;\n    } else {\n      return <Badge variant=\"outline\">Completed</Badge>;\n    }\n  };\n\n  const calculatePercentage = (marksObtained: number, totalMarks: number) => {\n    return ((marksObtained / totalMarks) * 100).toFixed(2);\n  };\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6\">\n        <Breadcrumb items={[{ label: 'Examinations' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">Examinations</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              {isStudent ? 'View your exam schedule and results' : 'Manage exams and results'}\n            </p>\n          </div>\n          {canManageExams && (\n            <Dialog open={isAddExamDialogOpen} onOpenChange={setIsAddExamDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-exam\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Exam\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Add New Exam</DialogTitle>\n                  <DialogDescription>Create a new examination schedule</DialogDescription>\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"exam-name\">Exam Name *</Label>\n                    <Input\n                      id=\"exam-name\"\n                      placeholder=\"e.g., Mid-Term Exam\"\n                      value={examForm.name}\n                      onChange={(e) => setExamForm({ ...examForm, name: e.target.value })}\n                      data-testid=\"input-exam-name\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"exam-type\">Exam Type *</Label>\n                    <Select value={examForm.type} onValueChange={(value) => setExamForm({ ...examForm, type: value })}>\n                      <SelectTrigger data-testid=\"select-exam-type\">\n                        <SelectValue placeholder=\"Select type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"midterm\">Mid-Term</SelectItem>\n                        <SelectItem value=\"final\">Final</SelectItem>\n                        <SelectItem value=\"unit_test\">Unit Test</SelectItem>\n                        <SelectItem value=\"practical\">Practical</SelectItem>\n                        <SelectItem value=\"assignment\">Assignment</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"start-date\">Start Date *</Label>\n                      <Input\n                        id=\"start-date\"\n                        type=\"date\"\n                        value={examForm.startDate}\n                        onChange={(e) => setExamForm({ ...examForm, startDate: e.target.value })}\n                        data-testid=\"input-start-date\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"end-date\">End Date *</Label>\n                      <Input\n                        id=\"end-date\"\n                        type=\"date\"\n                        value={examForm.endDate}\n                        onChange={(e) => setExamForm({ ...examForm, endDate: e.target.value })}\n                        data-testid=\"input-end-date\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"total-marks\">Total Marks</Label>\n                    <Input\n                      id=\"total-marks\"\n                      type=\"number\"\n                      placeholder=\"100\"\n                      value={examForm.totalMarks}\n                      onChange={(e) => setExamForm({ ...examForm, totalMarks: e.target.value })}\n                      data-testid=\"input-total-marks\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"description\">Description</Label>\n                    <Input\n                      id=\"description\"\n                      placeholder=\"Optional description\"\n                      value={examForm.description}\n                      onChange={(e) => setExamForm({ ...examForm, description: e.target.value })}\n                      data-testid=\"input-description\"\n                    />\n                  </div>\n                </div>\n                <DialogFooter>\n                  <Button variant=\"outline\" onClick={() => setIsAddExamDialogOpen(false)} data-testid=\"button-cancel-exam\">\n                    Cancel\n                  </Button>\n                  <Button onClick={handleCreateExam} disabled={createExamMutation.isPending} data-testid=\"button-create-exam\">\n                    {createExamMutation.isPending ? 'Creating...' : 'Create Exam'}\n                  </Button>\n                </DialogFooter>\n              </DialogContent>\n            </Dialog>\n          )}\n        </div>\n\n        <Tabs defaultValue=\"upcoming\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"upcoming\" data-testid=\"tab-upcoming\">\n              <Calendar className=\"h-4 w-4 mr-2\" />\n              Upcoming\n            </TabsTrigger>\n            <TabsTrigger value=\"schedule\" data-testid=\"tab-schedule\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              All Exams\n            </TabsTrigger>\n            {isStudent && (\n              <>\n                <TabsTrigger value=\"results\" data-testid=\"tab-results\">\n                  <TrendingUp className=\"h-4 w-4 mr-2\" />\n                  Results\n                </TabsTrigger>\n                <TabsTrigger value=\"marksheets\" data-testid=\"tab-marksheets\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Marksheets\n                </TabsTrigger>\n              </>\n            )}\n          </TabsList>\n\n          <TabsContent value=\"upcoming\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Upcoming Examinations</CardTitle>\n                <CardDescription>Exams scheduled for the future</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <DataTable\n                  data={upcomingExams}\n                  isLoading={examsLoading}\n                  emptyMessage=\"No upcoming exams\"\n                  columns={[\n                    {\n                      key: 'name',\n                      header: 'Exam Name',\n                      cell: (item) => (\n                        <div>\n                          <p className=\"font-medium\" data-testid={`exam-name-${item._id}`}>\n                            {item.name}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">{item.type}</p>\n                        </div>\n                      ),\n                    },\n                    {\n                      key: 'dates',\n                      header: 'Schedule',\n                      cell: (item) => (\n                        <div>\n                          <p className=\"text-sm\">\n                            {format(new Date(item.startDate), 'MMM dd, yyyy')}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            to {format(new Date(item.endDate), 'MMM dd, yyyy')}\n                          </p>\n                        </div>\n                      ),\n                    },\n                    {\n                      key: 'status',\n                      header: 'Status',\n                      cell: (item) => getStatusBadge(item),\n                    },\n                  ]}\n                  testId=\"upcoming-exams-table\"\n                />\n              </CardContent>\n            </Card>\n\n            {ongoingExams.length > 0 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle>In Progress</CardTitle>\n                  <CardDescription>Exams happening now</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <DataTable\n                    data={ongoingExams}\n                    emptyMessage=\"No ongoing exams\"\n                    columns={[\n                      {\n                        key: 'name',\n                        header: 'Exam Name',\n                        cell: (item) => (\n                          <div>\n                            <p className=\"font-medium\">{item.name}</p>\n                            <p className=\"text-sm text-muted-foreground\">{item.type}</p>\n                          </div>\n                        ),\n                      },\n                      {\n                        key: 'endDate',\n                        header: 'Ends On',\n                        cell: (item) => format(new Date(item.endDate), 'MMM dd, yyyy'),\n                      },\n                      {\n                        key: 'status',\n                        header: 'Status',\n                        cell: (item) => <Badge>In Progress</Badge>,\n                      },\n                    ]}\n                    testId=\"ongoing-exams-table\"\n                  />\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"schedule\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>All Examinations</CardTitle>\n                <CardDescription>Complete exam schedule</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <DataTable\n                  data={exams}\n                  isLoading={examsLoading}\n                  emptyMessage=\"No exams scheduled\"\n                  columns={[\n                    {\n                      key: 'name',\n                      header: 'Exam Name',\n                      cell: (item) => (\n                        <div>\n                          <p className=\"font-medium\">{item.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">{item.type}</p>\n                        </div>\n                      ),\n                    },\n                    {\n                      key: 'dates',\n                      header: 'Dates',\n                      cell: (item) => (\n                        <div>\n                          <p className=\"text-sm\">\n                            {format(new Date(item.startDate), 'MMM dd, yyyy')}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            to {format(new Date(item.endDate), 'MMM dd, yyyy')}\n                          </p>\n                        </div>\n                      ),\n                    },\n                    {\n                      key: 'status',\n                      header: 'Status',\n                      cell: (item) => getStatusBadge(item),\n                    },\n                  ]}\n                  testId=\"all-exams-table\"\n                />\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {isStudent && (\n            <>\n              <TabsContent value=\"results\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Exam Results</CardTitle>\n                    <CardDescription>Your academic performance</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <DataTable\n                      data={results}\n                      isLoading={resultsLoading}\n                      emptyMessage=\"No results available\"\n                      columns={[\n                        {\n                          key: 'exam',\n                          header: 'Exam',\n                          cell: (item) => (\n                            <div>\n                              <p className=\"font-medium\" data-testid={`result-exam-${item._id}`}>\n                                {item.examId?.name || 'Exam'}\n                              </p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {item.subjectId?.name || 'Subject'}\n                              </p>\n                            </div>\n                          ),\n                        },\n                        {\n                          key: 'marks',\n                          header: 'Marks',\n                          cell: (item) => (\n                            <div>\n                              <p className=\"font-mono font-medium\">\n                                {item.marksObtained || 0}/{item.totalMarks || 100}\n                              </p>\n                              <p className=\"text-xs text-muted-foreground\">\n                                {calculatePercentage(\n                                  item.marksObtained || 0,\n                                  item.totalMarks || 100\n                                )}\n                                %\n                              </p>\n                            </div>\n                          ),\n                        },\n                        {\n                          key: 'grade',\n                          header: 'Grade',\n                          cell: (item) => (\n                            <Badge variant=\"outline\" data-testid={`result-grade-${item._id}`}>\n                              {item.grade || 'N/A'}\n                            </Badge>\n                          ),\n                        },\n                        {\n                          key: 'date',\n                          header: 'Date',\n                          cell: (item) =>\n                            item.createdAt\n                              ? format(new Date(item.createdAt), 'MMM dd, yyyy')\n                              : 'N/A',\n                        },\n                      ]}\n                      testId=\"results-table\"\n                    />\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"marksheets\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Marksheets</CardTitle>\n                    <CardDescription>Download your exam marksheets</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {completedExams.length > 0 ? (\n                      <div className=\"space-y-3\">\n                        {completedExams.map((exam: any) => (\n                          <div\n                            key={exam._id}\n                            className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-muted/50 transition-colors\"\n                            data-testid={`marksheet-${exam._id}`}\n                          >\n                            <div className=\"flex items-center gap-4\">\n                              <div className=\"p-2 bg-primary/10 rounded\">\n                                <FileText className=\"h-5 w-5 text-primary\" />\n                              </div>\n                              <div>\n                                <p className=\"font-medium\">{exam.name}</p>\n                                <p className=\"text-sm text-muted-foreground\">\n                                  {format(new Date(exam.endDate), 'MMM dd, yyyy')}\n                                </p>\n                              </div>\n                            </div>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`download-${exam._id}`}>\n                              <Download className=\"h-4 w-4 mr-2\" />\n                              Download\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <p className=\"text-center text-muted-foreground py-8\">\n                        No marksheets available yet\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </>\n          )}\n        </Tabs>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":20275},"client/src/components/shared/StatCard.tsx":{"content":"import { Card, CardContent } from '@/components/ui/card';\nimport { LucideIcon } from 'lucide-react';\n\ninterface StatCardProps {\n  title: string;\n  value: string | number;\n  icon: LucideIcon;\n  trend?: {\n    value: number;\n    label: string;\n    isPositive: boolean;\n  };\n  testId?: string;\n}\n\nexport function StatCard({ title, value, icon: Icon, trend, testId }: StatCardProps) {\n  return (\n    <Card className=\"hover-elevate\" data-testid={testId}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"space-y-2\">\n            <p className=\"text-sm text-muted-foreground font-medium\">{title}</p>\n            <p className=\"text-3xl font-bold\" data-testid={`${testId}-value`}>{value}</p>\n            {trend && (\n              <p className={`text-xs flex items-center gap-1 ${trend.isPositive ? 'text-green-600' : 'text-red-600'}`}>\n                <span>{trend.isPositive ? '↑' : '↓'} {Math.abs(trend.value)}%</span>\n                <span className=\"text-muted-foreground\">{trend.label}</span>\n              </p>\n            )}\n          </div>\n          <div className=\"p-3 bg-primary/10 rounded-lg\">\n            <Icon className=\"h-6 w-6 text-primary\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1297},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/pages/Reports.tsx":{"content":"import { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Download, TrendingUp, Users, GraduationCap, IndianRupee, BookOpen, ClipboardCheck } from 'lucide-react';\nimport { StatCard } from '@/components/shared/StatCard';\nimport { Bar, BarChart, CartesianGrid, Legend, Line, LineChart, Pie, PieChart, Cell, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport { useAuth } from '@/lib/auth';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { formatCurrencyINR } from '@/lib/utils';\nimport { useQuery } from '@tanstack/react-query';\n\nexport default function Reports() {\n  const { user } = useAuth();\n\n  const exportReport = () => {\n    const csvData = [];\n    \n    csvData.push(['School ERP - Comprehensive Report']);\n    csvData.push(['']);\n    csvData.push(['Overview Statistics']);\n    csvData.push(['Metric', 'Value']);\n    csvData.push(['Total Students', stats?.totalStudents || 0]);\n    csvData.push(['Faculty Members', stats?.totalFaculty || 0]);\n    csvData.push(['Monthly Revenue', stats?.monthlyRevenue || 0]);\n    csvData.push(['Pending Fees', stats?.pendingFees || 0]);\n    csvData.push(['']);\n    \n    if (attendanceData.length > 0) {\n      csvData.push(['Attendance Trends']);\n      csvData.push(['Month', 'Present %', 'Absent %']);\n      attendanceData.forEach((row: any) => {\n        csvData.push([row.month, row.present, row.absent]);\n      });\n      csvData.push(['']);\n    }\n    \n    if (performanceData.length > 0) {\n      csvData.push(['Academic Performance']);\n      csvData.push(['Subject', 'Average Score']);\n      performanceData.forEach((row: any) => {\n        csvData.push([row.subject, row.average]);\n      });\n      csvData.push(['']);\n    }\n    \n    if (classDistribution.length > 0) {\n      csvData.push(['Class Distribution']);\n      csvData.push(['Grade', 'Students']);\n      classDistribution.forEach((row: any) => {\n        csvData.push([row.name, row.value]);\n      });\n      csvData.push(['']);\n    }\n    \n    if (feeCollectionData.length > 0) {\n      csvData.push(['Fee Collection Trends']);\n      csvData.push(['Month', 'Collected', 'Pending']);\n      feeCollectionData.forEach((row: any) => {\n        csvData.push([row.month, row.collected, row.pending]);\n      });\n      csvData.push(['']);\n      csvData.push(['Fee Summary']);\n      csvData.push(['Total Revenue', feeStats.totalRevenue]);\n      csvData.push(['Collected', feeStats.collected]);\n      csvData.push(['Pending', feeStats.pending]);\n    }\n    \n    const csvContent = csvData.map(row => row.join(',')).join('\\n');\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `school-report-${new Date().toISOString().split('T')[0]}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const { data: stats } = useQuery<{\n    totalStudents: number;\n    totalFaculty: number;\n    monthlyRevenue: number;\n    pendingFees: number;\n  }>({\n    queryKey: ['/api/dashboard/admin/stats'],\n  });\n\n  const { data: attendanceResponse, isLoading: isAttendanceLoading } = useQuery<{ data: Array<any> }>({\n    queryKey: ['/api/reports/attendance'],\n  });\n\n  const { data: performanceResponse, isLoading: isPerformanceLoading } = useQuery<{ data: Array<any> }>({\n    queryKey: ['/api/reports/performance'],\n  });\n\n  const { data: classDistResponse, isLoading: isClassDistLoading } = useQuery<{ data: Array<any> }>({\n    queryKey: ['/api/reports/class-distribution'],\n  });\n\n  const { data: feeCollectionResponse, isLoading: isFeeCollectionLoading } = useQuery<{\n    trends: Array<any>;\n    totalRevenue: number;\n    collected: number;\n    pending: number;\n  }>({\n    queryKey: ['/api/reports/fee-collection'],\n  });\n\n  const attendanceData = attendanceResponse?.data || [];\n  const performanceData = performanceResponse?.data || [];\n  const classDistribution = classDistResponse?.data || [];\n  const feeCollectionData = feeCollectionResponse?.trends || [];\n  const feeStats = {\n    totalRevenue: feeCollectionResponse?.totalRevenue || 0,\n    collected: feeCollectionResponse?.collected || 0,\n    pending: feeCollectionResponse?.pending || 0,\n  };\n\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8'];\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-7xl\">\n        <Breadcrumb items={[{ label: 'Reports & Analytics' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">Reports & Analytics</h1>\n            <p className=\"text-muted-foreground mt-1\">Comprehensive insights and data analysis</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Select defaultValue=\"2024-2025\">\n              <SelectTrigger className=\"w-48\" data-testid=\"select-academic-year\">\n                <SelectValue placeholder=\"Academic Year\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"2024-2025\">2024-2025</SelectItem>\n                <SelectItem value=\"2023-2024\">2023-2024</SelectItem>\n                <SelectItem value=\"2022-2023\">2022-2023</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"outline\" onClick={exportReport} data-testid=\"button-export-report\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Report\n            </Button>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <StatCard\n            title=\"Total Students\"\n            value={stats?.totalStudents?.toString() || '0'}\n            icon={GraduationCap}\n          />\n          <StatCard\n            title=\"Faculty Members\"\n            value={stats?.totalFaculty?.toString() || '0'}\n            icon={Users}\n          />\n          <StatCard\n            title=\"Avg. Attendance\"\n            value={attendanceData.length > 0 ? `${Math.round(attendanceData.reduce((sum: number, d: any) => sum + d.present, 0) / attendanceData.length)}%` : '0%'}\n            icon={ClipboardCheck}\n          />\n          <StatCard\n            title=\"Monthly Revenue\"\n            value={stats?.monthlyRevenue ? formatCurrencyINR(stats.monthlyRevenue) : formatCurrencyINR(0)}\n            icon={IndianRupee}\n          />\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"academic\" data-testid=\"tab-academic\">Academic Performance</TabsTrigger>\n            <TabsTrigger value=\"attendance\" data-testid=\"tab-attendance\">Attendance</TabsTrigger>\n            <TabsTrigger value=\"financial\" data-testid=\"tab-financial\">Financial</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Class Distribution</CardTitle>\n                  <CardDescription>Number of students per grade</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={classDistribution}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        labelLine={false}\n                        label={(entry: any) => `${entry.name}: ${entry.value}`}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                      >\n                        {classDistribution.map((entry: any, index: number) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Monthly Attendance Trend</CardTitle>\n                  <CardDescription>Student attendance percentage over time</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={attendanceData}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Legend />\n                      <Line type=\"monotone\" dataKey=\"present\" stroke=\"#10b981\" name=\"Present %\" />\n                      <Line type=\"monotone\" dataKey=\"absent\" stroke=\"#ef4444\" name=\"Absent %\" />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"academic\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Subject-wise Average Performance</CardTitle>\n                <CardDescription>Average marks across different subjects</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={performanceData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"subject\" />\n                    <YAxis domain={[0, 100]} />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"average\" fill=\"#3b82f6\" name=\"Average Marks\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Top Performers</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">Sarah Johnson</p>\n                        <p className=\"text-sm text-muted-foreground\">Grade 10-A</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-bold text-green-600\">95.2%</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">Michael Chen</p>\n                        <p className=\"text-sm text-muted-foreground\">Grade 10-A</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-bold text-green-600\">94.8%</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-muted rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">Emma Williams</p>\n                        <p className=\"text-sm text-muted-foreground\">Grade 9-B</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-bold text-green-600\">93.5%</p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Pass Rate</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span>Overall</span>\n                      <span className=\"font-bold text-green-600\">94.5%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Grade 12</span>\n                      <span className=\"font-bold text-green-600\">96.2%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Grade 11</span>\n                      <span className=\"font-bold text-green-600\">93.8%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Grade 10</span>\n                      <span className=\"font-bold text-green-600\">94.1%</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Performance Trend</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span>This Quarter</span>\n                      <span className=\"font-bold text-green-600\">↑ 2.3%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Last Quarter</span>\n                      <span className=\"font-bold\">87.2%</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Year Average</span>\n                      <span className=\"font-bold\">85.8%</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"attendance\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Attendance Trends</CardTitle>\n                <CardDescription>Monthly attendance comparison</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={attendanceData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis domain={[0, 100]} />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"present\" fill=\"#10b981\" name=\"Present %\" />\n                    <Bar dataKey=\"absent\" fill=\"#ef4444\" name=\"Absent %\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"financial\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Fee Collection Trends</CardTitle>\n                <CardDescription>Monthly fee collection and pending amounts</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <BarChart data={feeCollectionData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"collected\" fill=\"#10b981\" name=\"Collected (₹)\" />\n                    <Bar dataKey=\"pending\" fill=\"#ef4444\" name=\"Pending (₹)\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Revenue Overview</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span>Total Revenue</span>\n                      <span className=\"font-bold text-green-600\">{formatCurrencyINR(feeStats.totalRevenue)}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Collected</span>\n                      <span className=\"font-bold\">{formatCurrencyINR(feeStats.collected)}</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Pending</span>\n                      <span className=\"font-bold text-orange-600\">{formatCurrencyINR(feeStats.pending)}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Payment Status</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span>Collection Rate</span>\n                      <span className=\"font-bold text-green-600\">\n                        {feeStats.totalRevenue > 0 \n                          ? `${Math.round((feeStats.collected / feeStats.totalRevenue) * 100)}%`\n                          : '0%'}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Pending Rate</span>\n                      <span className=\"font-bold text-orange-600\">\n                        {feeStats.totalRevenue > 0 \n                          ? `${Math.round((feeStats.pending / feeStats.totalRevenue) * 100)}%`\n                          : '0%'}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Total Collected</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"text-center\">\n                      <p className=\"text-4xl font-bold text-green-600\">{formatCurrencyINR(feeStats.collected)}</p>\n                      <p className=\"text-sm text-muted-foreground mt-2\">Total Collected Fees</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":19074},"client/src/pages/Payroll.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { DataTable } from '@/components/shared/DataTable';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Plus, Download, IndianRupee, Eye, FileText, Edit, Trash2 } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { StatCard } from '@/components/shared/StatCard';\nimport { TrendingUp, Users, CreditCard } from 'lucide-react';\nimport { formatCurrencyINR } from '@/lib/utils';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\n\nexport default function Payroll() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedMonth, setSelectedMonth] = useState('');\n  const [generateMonth, setGenerateMonth] = useState('');\n  const [generateYear, setGenerateYear] = useState(new Date().getFullYear().toString());\n  const [isGenerateDialogOpen, setIsGenerateDialogOpen] = useState(false);\n  const [generatedPayrolls, setGeneratedPayrolls] = useState<any[]>([]);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [selectedPayroll, setSelectedPayroll] = useState<any>(null);\n  const [editForm, setEditForm] = useState({\n    basicSalary: '',\n    allowances: '',\n    deductions: '',\n    netSalary: '',\n    status: '',\n    remarks: '',\n  });\n\n  const canManagePayroll = user && ['admin', 'principal'].includes(user.role);\n  const isFaculty = user && user.role === 'faculty';\n\n  const { data: facultyData } = useQuery<{ faculty: Array<any> }>({\n    queryKey: ['/api/faculty'],\n    enabled: !!canManagePayroll,\n  });\n\n  // Fetch payroll data based on user role\n  const { data: payrollData, isLoading } = useQuery<{ payrolls: Array<any> }>({\n    queryKey: isFaculty ? ['/api/payroll/my'] : ['/api/payroll'],\n  });\n\n  const payrollRecords = payrollData?.payrolls || [];\n  const faculty = facultyData?.faculty || [];\n\n  const generatePayrollMutation = useMutation({\n    mutationFn: async (data: { month: string; year: number }) => {\n      const results = [];\n      for (const facultyMember of faculty) {\n        const payrollData = {\n          userId: facultyMember.id || facultyMember._id,\n          month: data.month,\n          year: data.year,\n          basicSalary: 50000,\n          allowances: 10000,\n          deductions: 5000,\n          netSalary: 55000,\n          remarks: `Generated payroll for ${data.month} ${data.year}`,\n        };\n        const result = await apiRequest('/api/payroll', {\n          method: 'POST',\n          body: JSON.stringify(payrollData),\n        });\n        results.push({\n          ...result,\n          employeeName: `${facultyMember.firstName} ${facultyMember.lastName}`,\n          employeeId: facultyMember.id || facultyMember._id,\n          role: facultyMember.role,\n        });\n      }\n      return results;\n    },\n    onSuccess: (results) => {\n      setGeneratedPayrolls(results);\n      queryClient.invalidateQueries({ queryKey: ['/api/payroll'] });\n      toast({\n        title: 'Success',\n        description: `Payroll generated for ${results.length} employees`,\n      });\n      setIsGenerateDialogOpen(false);\n      setGenerateMonth('');\n      setGenerateYear(new Date().getFullYear().toString());\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to generate payroll',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const editPayrollMutation = useMutation({\n    mutationFn: async (data: { id: string; updateData: any }) => {\n      return await apiRequest(`/api/payroll/${data.id}`, {\n        method: 'PATCH',\n        body: JSON.stringify(data.updateData),\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/payroll'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/payroll/my'] });\n      toast({\n        title: 'Success',\n        description: 'Payroll updated successfully',\n      });\n      setIsEditDialogOpen(false);\n      setSelectedPayroll(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update payroll',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const deletePayrollMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(`/api/payroll/${id}`, {\n        method: 'DELETE',\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/payroll'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/payroll/my'] });\n      toast({\n        title: 'Success',\n        description: 'Payroll deleted successfully',\n      });\n      setIsDeleteDialogOpen(false);\n      setSelectedPayroll(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to delete payroll',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleGeneratePayroll = () => {\n    if (!generateMonth || !generateYear) {\n      toast({\n        title: 'Error',\n        description: 'Please select month and year',\n        variant: 'destructive',\n      });\n      return;\n    }\n    generatePayrollMutation.mutate({\n      month: generateMonth,\n      year: parseInt(generateYear),\n    });\n  };\n\n  const handleEditPayroll = (record: any) => {\n    setSelectedPayroll(record);\n    setEditForm({\n      basicSalary: record.basicSalary?.toString() || '',\n      allowances: record.allowances?.toString() || '',\n      deductions: record.deductions?.toString() || '',\n      netSalary: record.netSalary?.toString() || '',\n      status: record.status || 'draft',\n      remarks: record.remarks || '',\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleSaveEdit = () => {\n    if (!selectedPayroll) return;\n\n    const basicSalary = parseFloat(editForm.basicSalary) || 0;\n    const allowances = parseFloat(editForm.allowances) || 0;\n    const deductions = parseFloat(editForm.deductions) || 0;\n    const netSalary = parseFloat(editForm.netSalary) || 0;\n\n    editPayrollMutation.mutate({\n      id: selectedPayroll._id || selectedPayroll.id,\n      updateData: {\n        basicSalary,\n        allowances,\n        deductions,\n        netSalary,\n        status: editForm.status,\n        remarks: editForm.remarks,\n      },\n    });\n  };\n\n  const handleDeletePayroll = (record: any) => {\n    setSelectedPayroll(record);\n    setIsDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    if (!selectedPayroll) return;\n    deletePayrollMutation.mutate(selectedPayroll._id || selectedPayroll.id);\n  };\n\n  const handleProcessPayment = (record: any) => {\n    toast({\n      title: 'Payment Processed',\n      description: `Payment of ${formatCurrencyINR(record.netSalary)} to ${record.employeeName} has been processed.`,\n    });\n  };\n\n  const handleViewSlip = (record: any) => {\n    toast({\n      title: 'Salary Slip',\n      description: `Viewing salary slip for ${record.employeeName}`,\n    });\n  };\n\n  const totalPayroll = payrollRecords.reduce((sum, record) => sum + record.netSalary, 0);\n  const paidAmount = payrollRecords.filter(r => r.status === 'paid').reduce((sum, record) => sum + record.netSalary, 0);\n  const pendingAmount = totalPayroll - paidAmount;\n\n  const handleExportReport = () => {\n    const csvHeaders = 'Employee Name,Month,Year,Basic Salary,Allowances,Deductions,Net Salary,Status\\n';\n    const csvRows = payrollRecords.map(record => \n      `${record.employeeName || 'N/A'},${record.month || 'N/A'},${record.year || 'N/A'},${record.basicSalary},${record.allowances},${record.deductions},${record.netSalary},${record.status}`\n    ).join('\\n');\n    \n    const csvContent = csvHeaders + csvRows;\n    const blob = new Blob([csvContent], { type: 'text/csv' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `payroll-report-${Date.now()}.csv`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    \n    toast({\n      title: 'Success',\n      description: 'Payroll report exported successfully',\n    });\n  };\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-7xl\">\n        <Breadcrumb items={[{ label: 'Payroll Management' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">Payroll Management</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage employee salaries and payment processing</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" onClick={handleExportReport} data-testid=\"button-export-payroll\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Report\n            </Button>\n            {canManagePayroll && (\n              <Dialog open={isGenerateDialogOpen} onOpenChange={setIsGenerateDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button data-testid=\"button-generate-payroll\">\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Generate Payroll\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <DialogHeader>\n                    <DialogTitle>Generate Payroll</DialogTitle>\n                    <DialogDescription>Generate payroll for selected month</DialogDescription>\n                  </DialogHeader>\n                  <div className=\"grid gap-4 py-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"month\">Month</Label>\n                      <Select value={generateMonth} onValueChange={setGenerateMonth}>\n                        <SelectTrigger data-testid=\"select-month\">\n                          <SelectValue placeholder=\"Select month\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"January\">January</SelectItem>\n                          <SelectItem value=\"February\">February</SelectItem>\n                          <SelectItem value=\"March\">March</SelectItem>\n                          <SelectItem value=\"April\">April</SelectItem>\n                          <SelectItem value=\"May\">May</SelectItem>\n                          <SelectItem value=\"June\">June</SelectItem>\n                          <SelectItem value=\"July\">July</SelectItem>\n                          <SelectItem value=\"August\">August</SelectItem>\n                          <SelectItem value=\"September\">September</SelectItem>\n                          <SelectItem value=\"October\">October</SelectItem>\n                          <SelectItem value=\"November\">November</SelectItem>\n                          <SelectItem value=\"December\">December</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"year\">Year</Label>\n                      <Input \n                        type=\"number\" \n                        placeholder=\"2025\" \n                        value={generateYear}\n                        onChange={(e) => setGenerateYear(e.target.value)}\n                        data-testid=\"input-year\"\n                      />\n                    </div>\n                  </div>\n                  <DialogFooter>\n                    <Button variant=\"outline\" onClick={() => setIsGenerateDialogOpen(false)} data-testid=\"button-cancel\">\n                      Cancel\n                    </Button>\n                    <Button \n                      onClick={handleGeneratePayroll} \n                      disabled={generatePayrollMutation.isPending}\n                      data-testid=\"button-confirm-generate\"\n                    >\n                      {generatePayrollMutation.isPending ? 'Generating...' : 'Generate'}\n                    </Button>\n                  </DialogFooter>\n                </DialogContent>\n              </Dialog>\n            )}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <StatCard\n            title=\"Total Payroll\"\n            value={formatCurrencyINR(totalPayroll)}\n            icon={IndianRupee}\n            trend={{ value: 5.2, label: 'vs last month', isPositive: true }}\n          />\n          <StatCard\n            title=\"Paid Amount\"\n            value={formatCurrencyINR(paidAmount)}\n            icon={CreditCard}\n          />\n          <StatCard\n            title=\"Pending\"\n            value={formatCurrencyINR(pendingAmount)}\n            icon={TrendingUp}\n          />\n          <StatCard\n            title=\"Employees\"\n            value={payrollRecords.length.toString()}\n            icon={Users}\n          />\n        </div>\n\n        {generatedPayrolls.length > 0 && (\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>Generated Payroll - {generateMonth} {generateYear}</CardTitle>\n                  <CardDescription>Newly generated payroll records</CardDescription>\n                </div>\n                <Button variant=\"outline\" onClick={() => {\n                  const csvContent = 'Employee Name,Employee ID,Basic Salary,Allowances,Deductions,Net Salary\\n' +\n                    generatedPayrolls.map(p => \n                      `${p.employeeName},${p.employeeId},${p.basicSalary},${p.allowances},${p.deductions},${p.netSalary}`\n                    ).join('\\n');\n                  const blob = new Blob([csvContent], { type: 'text/csv' });\n                  const url = window.URL.createObjectURL(blob);\n                  const a = document.createElement('a');\n                  a.href = url;\n                  a.download = `payroll-${generateMonth}-${generateYear}.csv`;\n                  a.click();\n                }} data-testid=\"button-download-payroll\">\n                  <Download className=\"mr-2 h-4 w-4\" />\n                  Download CSV\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <DataTable\n                data={generatedPayrolls}\n                emptyMessage=\"No generated payroll\"\n                columns={[\n                  {\n                    key: 'employee',\n                    header: 'Employee',\n                    cell: (item) => (\n                      <div>\n                        <p className=\"font-medium\">{item.employeeName}</p>\n                        <p className=\"text-sm text-muted-foreground\">{item.employeeId} • {item.role}</p>\n                      </div>\n                    ),\n                  },\n                  {\n                    key: 'basicSalary',\n                    header: 'Basic Salary',\n                    cell: (item) => formatCurrencyINR(item.basicSalary),\n                  },\n                  {\n                    key: 'allowances',\n                    header: 'Allowances',\n                    cell: (item) => formatCurrencyINR(item.allowances),\n                  },\n                  {\n                    key: 'deductions',\n                    header: 'Deductions',\n                    cell: (item) => formatCurrencyINR(item.deductions),\n                  },\n                  {\n                    key: 'netSalary',\n                    header: 'Net Salary',\n                    cell: (item) => (\n                      <p className=\"font-semibold text-green-600\">{formatCurrencyINR(item.netSalary)}</p>\n                    ),\n                  },\n                  {\n                    key: 'status',\n                    header: 'Status',\n                    cell: (item) => (\n                      <Badge variant=\"secondary\">\n                        {item.status || 'draft'}\n                      </Badge>\n                    ),\n                  },\n                ]}\n                testId=\"generated-payroll-table\"\n              />\n            </CardContent>\n          </Card>\n        )}\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle>Payroll Records</CardTitle>\n              <Select value={selectedMonth} onValueChange={setSelectedMonth}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-month-filter\">\n                  <SelectValue placeholder=\"Select month\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"january-2025\">January 2025</SelectItem>\n                  <SelectItem value=\"december-2024\">December 2024</SelectItem>\n                  <SelectItem value=\"november-2024\">November 2024</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <DataTable\n              data={payrollRecords}\n              emptyMessage=\"No payroll records found\"\n              columns={[\n                {\n                  key: 'employee',\n                  header: 'Employee',\n                  cell: (item) => (\n                    <div>\n                      <p className=\"font-medium\">{item.employeeName}</p>\n                      <p className=\"text-sm text-muted-foreground\">{item.employeeId} • {item.role}</p>\n                    </div>\n                  ),\n                },\n                {\n                  key: 'basicSalary',\n                  header: 'Basic Salary',\n                  cell: (item) => formatCurrencyINR(item.basicSalary),\n                },\n                {\n                  key: 'allowances',\n                  header: 'Allowances',\n                  cell: (item) => formatCurrencyINR(item.allowances),\n                },\n                {\n                  key: 'deductions',\n                  header: 'Deductions',\n                  cell: (item) => formatCurrencyINR(item.deductions),\n                },\n                {\n                  key: 'netSalary',\n                  header: 'Net Salary',\n                  cell: (item) => (\n                    <p className=\"font-semibold text-green-600\">{formatCurrencyINR(item.netSalary)}</p>\n                  ),\n                },\n                {\n                  key: 'status',\n                  header: 'Status',\n                  cell: (item) => (\n                    <Badge variant={item.status === 'paid' ? 'default' : item.status === 'approved' ? 'secondary' : 'outline'}>\n                      {item.status}\n                    </Badge>\n                  ),\n                },\n                {\n                  key: 'actions',\n                  header: 'Actions',\n                  cell: (item) => (\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => handleViewSlip(item)}\n                        data-testid={`button-view-slip-${item.id}`}\n                      >\n                        <Eye className=\"h-4 w-4\" />\n                      </Button>\n                      {canManagePayroll && (\n                        <>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEditPayroll(item)}\n                            data-testid={`button-edit-payroll-${item._id || item.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeletePayroll(item)}\n                            data-testid={`button-delete-payroll-${item._id || item.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4 text-destructive\" />\n                          </Button>\n                        </>\n                      )}\n                      {canManagePayroll && item.status === 'approved' && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleProcessPayment(item)}\n                          data-testid={`button-process-payment-${item.id}`}\n                        >\n                          Process Payment\n                        </Button>\n                      )}\n                    </div>\n                  ),\n                },\n              ]}\n            />\n          </CardContent>\n        </Card>\n\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Edit Payroll</DialogTitle>\n              <DialogDescription>\n                Update payroll details for {selectedPayroll?.employeeName}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-basicSalary\">Basic Salary</Label>\n                  <Input\n                    id=\"edit-basicSalary\"\n                    type=\"number\"\n                    value={editForm.basicSalary}\n                    onChange={(e) => setEditForm({ ...editForm, basicSalary: e.target.value })}\n                    data-testid=\"input-edit-basic-salary\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-allowances\">Allowances</Label>\n                  <Input\n                    id=\"edit-allowances\"\n                    type=\"number\"\n                    value={editForm.allowances}\n                    onChange={(e) => setEditForm({ ...editForm, allowances: e.target.value })}\n                    data-testid=\"input-edit-allowances\"\n                  />\n                </div>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-deductions\">Deductions</Label>\n                  <Input\n                    id=\"edit-deductions\"\n                    type=\"number\"\n                    value={editForm.deductions}\n                    onChange={(e) => setEditForm({ ...editForm, deductions: e.target.value })}\n                    data-testid=\"input-edit-deductions\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"edit-netSalary\">Net Salary</Label>\n                  <Input\n                    id=\"edit-netSalary\"\n                    type=\"number\"\n                    value={editForm.netSalary}\n                    onChange={(e) => setEditForm({ ...editForm, netSalary: e.target.value })}\n                    data-testid=\"input-edit-net-salary\"\n                  />\n                </div>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-status\">Status</Label>\n                <Select value={editForm.status} onValueChange={(value) => setEditForm({ ...editForm, status: value })}>\n                  <SelectTrigger data-testid=\"select-edit-status\">\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"draft\">Draft</SelectItem>\n                    <SelectItem value=\"approved\">Approved</SelectItem>\n                    <SelectItem value=\"paid\">Paid</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-remarks\">Remarks</Label>\n                <Input\n                  id=\"edit-remarks\"\n                  value={editForm.remarks}\n                  onChange={(e) => setEditForm({ ...editForm, remarks: e.target.value })}\n                  data-testid=\"input-edit-remarks\"\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setIsEditDialogOpen(false)} data-testid=\"button-cancel-edit\">\n                Cancel\n              </Button>\n              <Button onClick={handleSaveEdit} disabled={editPayrollMutation.isPending} data-testid=\"button-save-edit\">\n                {editPayrollMutation.isPending ? 'Saving...' : 'Save Changes'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Delete Payroll</AlertDialogTitle>\n              <AlertDialogDescription>\n                Are you sure you want to delete the payroll record for {selectedPayroll?.employeeName}? This action cannot be undone.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n              <AlertDialogAction\n                onClick={confirmDelete}\n                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                data-testid=\"button-confirm-delete\"\n              >\n                {deletePayrollMutation.isPending ? 'Deleting...' : 'Delete'}\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":26500},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/AddStudent.tsx":{"content":"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { insertStudentSchema, type InsertStudent } from '@shared/schema';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { z } from 'zod';\n\nconst studentFormSchema = z.object({\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  userId: z.string().optional(),\n  classId: z.string().optional().nullable(),\n  admissionNumber: z.string().min(1, 'Admission number is required'),\n  rollNumber: z.string().optional().nullable(),\n  dateOfBirth: z.string().min(1, 'Date of birth is required'),\n  gender: z.enum(['male', 'female', 'other']),\n  bloodGroup: z.string().optional().nullable(),\n  parentId: z.string().optional().nullable(),\n  address: z.string().optional().nullable(),\n  emergencyContact: z.string().optional().nullable(),\n  admissionDate: z.string().min(1, 'Admission date is required'),\n});\n\ntype StudentFormValues = z.infer<typeof studentFormSchema>;\n\nexport default function AddStudent() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: classesData } = useQuery<{ classes: Array<{ id: string; name: string }> }>({\n    queryKey: ['/api/classes'],\n  });\n\n  const form = useForm<StudentFormValues>({\n    resolver: zodResolver(studentFormSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      firstName: '',\n      lastName: '',\n      classId: null,\n      admissionNumber: '',\n      rollNumber: null,\n      dateOfBirth: '',\n      gender: 'male',\n      bloodGroup: null,\n      parentId: null,\n      address: null,\n      emergencyContact: null,\n      admissionDate: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  const createStudentMutation = useMutation({\n    mutationFn: async (data: StudentFormValues) => {\n      const result = await apiRequest('/api/students', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n      return result;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/students'] });\n      toast({\n        title: 'Success',\n        description: 'Student created successfully',\n      });\n      setLocation('/students');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to create student',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: StudentFormValues) => {\n    createStudentMutation.mutate(data);\n  };\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-4xl\">\n        <Breadcrumb items={[{ label: 'Students', href: '/students' }, { label: 'Add Student' }]} />\n\n        <div>\n          <h1 className=\"text-3xl font-semibold\">Add New Student</h1>\n          <p className=\"text-muted-foreground mt-1\">Fill in the student information below</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Student Information</CardTitle>\n            <CardDescription>Enter the details of the new student</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-first-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-last-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"email\" data-testid=\"input-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"password\" data-testid=\"input-password\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"admissionNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Admission Number</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-admission-number\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"rollNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Roll Number</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || ''} data-testid=\"input-roll-number\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"dateOfBirth\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Date of Birth</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"date\" data-testid=\"input-date-of-birth\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"gender\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Gender</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-gender\">\n                              <SelectValue placeholder=\"Select gender\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"male\">Male</SelectItem>\n                            <SelectItem value=\"female\">Female</SelectItem>\n                            <SelectItem value=\"other\">Other</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"bloodGroup\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Blood Group</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || ''} data-testid=\"input-blood-group\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"classId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Class</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value || ''}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-class\">\n                              <SelectValue placeholder=\"Select class\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {classesData?.classes?.map((cls: any) => (\n                              <SelectItem key={cls.id} value={cls.id}>\n                                {cls.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"emergencyContact\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Emergency Contact</FormLabel>\n                        <FormControl>\n                          <Input {...field} value={field.value || ''} data-testid=\"input-emergency-contact\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"admissionDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Admission Date</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"date\" data-testid=\"input-admission-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Address</FormLabel>\n                      <FormControl>\n                        <Input {...field} value={field.value || ''} data-testid=\"input-address\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setLocation('/students')}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createStudentMutation.isPending}\n                    data-testid=\"button-submit\"\n                  >\n                    {createStudentMutation.isPending ? 'Creating...' : 'Create Student'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":12956},"client/src/pages/ProfileSettings.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useAuth } from '@/lib/auth';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { User, Mail, Phone, Calendar, Users, Home } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { format } from 'date-fns';\n\nexport default function ProfileSettings() {\n  const { user } = useAuth();\n\n  const { data: profileData, isLoading } = useQuery<any>({\n    queryKey: user?.role === 'student' ? ['/api/student/profile'] : ['/api/profile'],\n  });\n\n  const profile = user?.role === 'student' ? profileData?.user : profileData;\n  const student = profileData?.student;\n\n  const getInitials = () => {\n    if (profile) {\n      return `${profile.firstName?.[0] || ''}${profile.lastName?.[0] || ''}`.toUpperCase();\n    }\n    return 'U';\n  };\n\n  if (isLoading) {\n    return (\n      <AppLayout>\n        <div className=\"p-6 max-w-4xl space-y-6\">\n          <Skeleton className=\"h-12 w-64\" />\n          <Skeleton className=\"h-64\" />\n          <Skeleton className=\"h-96\" />\n        </div>\n      </AppLayout>\n    );\n  }\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 max-w-4xl space-y-6\">\n        <Breadcrumb items={[{ label: 'Profile Settings' }]} />\n        \n        <div>\n          <h1 className=\"text-3xl font-semibold\">Profile Settings</h1>\n          <p className=\"text-muted-foreground mt-1\">View your personal information</p>\n        </div>\n\n        <div className=\"grid gap-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Profile Picture</CardTitle>\n              <CardDescription>Your avatar</CardDescription>\n            </CardHeader>\n            <CardContent className=\"flex items-center gap-6\">\n              <Avatar className=\"h-24 w-24\">\n                <AvatarImage src={profile?.avatar} />\n                <AvatarFallback className=\"text-2xl\">{getInitials()}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1\">\n                <p className=\"font-medium\" data-testid=\"text-profile-name\">\n                  {profile?.firstName} {profile?.lastName}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">{profile?.role?.replace('_', ' ').toUpperCase()}</p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {user?.role === 'student' && student && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Student Information</CardTitle>\n                <CardDescription>Your admission and academic details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"admissionNumber\">Admission Number</Label>\n                    <Input\n                      id=\"admissionNumber\"\n                      value={student.admissionNumber || 'N/A'}\n                      disabled\n                      className=\"bg-muted\"\n                      data-testid=\"input-admission-number\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"rollNumber\">Roll Number</Label>\n                    <Input\n                      id=\"rollNumber\"\n                      value={student.rollNumber || 'N/A'}\n                      disabled\n                      className=\"bg-muted\"\n                      data-testid=\"input-roll-number\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"dob\">Date of Birth</Label>\n                    <div className=\"relative\">\n                      <Calendar className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                      <Input\n                        id=\"dob\"\n                        value={\n                          student.dateOfBirth\n                            ? format(new Date(student.dateOfBirth), 'MMM dd, yyyy')\n                            : 'N/A'\n                        }\n                        disabled\n                        className=\"pl-10 bg-muted\"\n                        data-testid=\"input-dob\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"gender\">Gender</Label>\n                    <Input\n                      id=\"gender\"\n                      value={student.gender || 'N/A'}\n                      disabled\n                      className=\"bg-muted\"\n                      data-testid=\"input-gender\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"bloodGroup\">Blood Group</Label>\n                    <Input\n                      id=\"bloodGroup\"\n                      value={student.bloodGroup || 'N/A'}\n                      disabled\n                      className=\"bg-muted\"\n                      data-testid=\"input-blood-group\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"admissionDate\">Admission Date</Label>\n                    <Input\n                      id=\"admissionDate\"\n                      value={\n                        student.admissionDate\n                          ? format(new Date(student.admissionDate), 'MMM dd, yyyy')\n                          : 'N/A'\n                      }\n                      disabled\n                      className=\"bg-muted\"\n                      data-testid=\"input-admission-date\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <User className=\"h-5 w-5\" />\n                Personal Information\n              </CardTitle>\n              <CardDescription>Your contact details</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"firstName\">First Name</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"firstName\"\n                      value={profile?.firstName || ''}\n                      disabled\n                      className=\"pl-10 bg-muted\"\n                      data-testid=\"input-first-name\"\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastName\">Last Name</Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      id=\"lastName\"\n                      value={profile?.lastName || ''}\n                      disabled\n                      className=\"pl-10 bg-muted\"\n                      data-testid=\"input-last-name\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={profile?.email || ''}\n                    disabled\n                    className=\"pl-10 bg-muted\"\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"phone\">Phone Number</Label>\n                <div className=\"relative\">\n                  <Phone className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    value={profile?.phone || 'Not provided'}\n                    disabled\n                    className=\"pl-10 bg-muted\"\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {user?.role === 'student' && student && (\n            <>\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"h-5 w-5\" />\n                    Parent/Guardian Information\n                  </CardTitle>\n                  <CardDescription>Emergency contact details</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"fatherName\">Father's Name</Label>\n                      <Input\n                        id=\"fatherName\"\n                        value={student.fatherName || 'Not provided'}\n                        disabled\n                        className=\"bg-muted\"\n                        data-testid=\"input-father-name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"motherName\">Mother's Name</Label>\n                      <Input\n                        id=\"motherName\"\n                        value={student.motherName || 'Not provided'}\n                        disabled\n                        className=\"bg-muted\"\n                        data-testid=\"input-mother-name\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"parentContact\">Parent Contact</Label>\n                      <div className=\"relative\">\n                        <Phone className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          id=\"parentContact\"\n                          value={student.parentContact || 'Not provided'}\n                          disabled\n                          className=\"pl-10 bg-muted\"\n                          data-testid=\"input-parent-contact\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"emergencyContact\">Emergency Contact</Label>\n                      <div className=\"relative\">\n                        <Phone className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          id=\"emergencyContact\"\n                          value={student.emergencyContact || 'Not provided'}\n                          disabled\n                          className=\"pl-10 bg-muted\"\n                          data-testid=\"input-emergency-contact\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {student.address && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Home className=\"h-5 w-5\" />\n                      Address\n                    </CardTitle>\n                    <CardDescription>Residential address</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Input\n                      value={student.address}\n                      disabled\n                      className=\"bg-muted\"\n                      data-testid=\"input-address\"\n                    />\n                  </CardContent>\n                </Card>\n              )}\n            </>\n          )}\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Account Information</CardTitle>\n              <CardDescription>System assigned details</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label>Role</Label>\n                <Input\n                  value={profile?.role?.replace('_', ' ').toUpperCase() || ''}\n                  disabled\n                  className=\"bg-muted\"\n                  data-testid=\"input-role\"\n                />\n                <p className=\"text-sm text-muted-foreground\">\n                  Role is assigned by administrators and cannot be changed\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":13454},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/pages/Dashboard.tsx":{"content":"import { useAuth } from '@/lib/auth';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { AdminDashboard } from '@/components/dashboards/AdminDashboard';\nimport { PrincipalDashboard } from '@/components/dashboards/PrincipalDashboard';\nimport { FacultyDashboard } from '@/components/dashboards/FacultyDashboard';\nimport { StudentDashboard } from '@/components/dashboards/StudentDashboard';\nimport { ParentDashboard } from '@/components/dashboards/ParentDashboard';\nimport { SuperAdminDashboard } from '@/components/dashboards/SuperAdminDashboard';\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n\n  const renderDashboard = () => {\n    switch (user?.role) {\n      case 'super_admin':\n        return <SuperAdminDashboard />;\n      case 'admin':\n        return <AdminDashboard />;\n      case 'principal':\n        return <PrincipalDashboard />;\n      case 'faculty':\n        return <FacultyDashboard />;\n      case 'student':\n        return <StudentDashboard />;\n      case 'parent':\n        return <ParentDashboard />;\n      default:\n        return <div>Unknown role</div>;\n    }\n  };\n\n  return <AppLayout>{renderDashboard()}</AppLayout>;\n}\n","size_bytes":1174},"client/src/components/layout/AppLayout.tsx":{"content":"import { ReactNode, useState, startTransition } from 'react';\nimport { SidebarProvider, SidebarInset, SidebarTrigger } from '@/components/ui/sidebar';\nimport { AppSidebar } from './AppSidebar';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Bell, Search } from 'lucide-react';\nimport { useAuth } from '@/lib/auth';\nimport { Input } from '@/components/ui/input';\nimport { useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface AppLayoutProps {\n  children: ReactNode;\n}\n\nexport function AppLayout({ children }: AppLayoutProps) {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState('');\n  const { toast } = useToast();\n\n  const { data: notificationsData } = useQuery({\n    queryKey: ['/api/notifications'],\n    enabled: !!user,\n  });\n\n  const { data: notificationsCount } = useQuery({\n    queryKey: ['/api/notifications/unread-count'],\n    enabled: !!user,\n  });\n\n  const notifications = notificationsData?.notifications || [];\n  const unreadCount = notificationsCount?.count || 0;\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      toast({\n        title: 'Search',\n        description: `Searching for: ${searchQuery}`,\n      });\n    }\n  };\n\n  const style = {\n    '--sidebar-width': '16rem',\n    '--sidebar-width-icon': '3rem',\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <SidebarInset className=\"flex-1\">\n          <header className=\"sticky top-0 z-10 flex h-16 items-center justify-between border-b bg-background px-6\">\n            <div className=\"flex items-center gap-4 flex-1\">\n              <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              \n              <form onSubmit={handleSearch} className=\"relative max-w-md flex-1\">\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  type=\"search\"\n                  placeholder=\"Search students, classes, subjects...\"\n                  className=\"pl-9 w-full\"\n                  data-testid=\"input-global-search\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                />\n              </form>\n            </div>\n\n            <div className=\"flex items-center gap-2\">\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-notifications\" className=\"relative\">\n                    <Bell className=\"h-5 w-5\" />\n                    {unreadCount > 0 && (\n                      <Badge \n                        variant=\"destructive\" \n                        className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n                      >\n                        {unreadCount}\n                      </Badge>\n                    )}\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-80\">\n                  <DropdownMenuLabel>Notifications</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  {notifications.length > 0 ? (\n                    <div className=\"max-h-96 overflow-y-auto\">\n                      {notifications.slice(0, 5).map((notification: any) => (\n                        <DropdownMenuItem \n                          key={notification._id}\n                          data-testid={`item-notification-${notification._id}`}\n                          onClick={() => startTransition(() => setLocation('/communication'))}\n                          className=\"flex flex-col items-start py-3 cursor-pointer\"\n                        >\n                          <p className=\"font-medium text-sm\">{notification.title}</p>\n                          <p className=\"text-xs text-muted-foreground line-clamp-2\">{notification.message}</p>\n                        </DropdownMenuItem>\n                      ))}\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem \n                        onClick={() => startTransition(() => setLocation('/communication'))}\n                        data-testid=\"button-view-all-notifications\"\n                        className=\"text-center text-sm text-primary\"\n                      >\n                        View All Notifications\n                      </DropdownMenuItem>\n                    </div>\n                  ) : (\n                    <div className=\"py-6 text-center text-sm text-muted-foreground\" data-testid=\"text-no-notifications\">\n                      No notifications\n                    </div>\n                  )}\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"gap-2\" data-testid=\"button-user-menu\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user?.avatar} />\n                      <AvatarFallback>\n                        {user?.firstName[0]}{user?.lastName[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex flex-col items-start text-sm\">\n                      <span className=\"font-medium\">{user?.firstName} {user?.lastName}</span>\n                      <span className=\"text-xs text-muted-foreground capitalize\">{user?.role.replace('_', ' ')}</span>\n                    </div>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={() => startTransition(() => setLocation('/profile'))} data-testid=\"button-profile\">\n                    Profile Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => startTransition(() => setLocation('/preferences'))} data-testid=\"button-preferences\">\n                    Preferences\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={logout} data-testid=\"button-logout\">\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </header>\n\n          <main className=\"flex-1 overflow-auto\">\n            {children}\n          </main>\n        </SidebarInset>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":7132},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/pages/LeaveManagement.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { DataTable } from '@/components/shared/DataTable';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Label } from '@/components/ui/label';\nimport { Plus, Check, X } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\nconst leaveFormSchema = z.object({\n  leaveType: z.string().min(1, 'Please select a leave type'),\n  startDate: z.string().min(1, 'Start date is required'),\n  endDate: z.string().min(1, 'End date is required'),\n  reason: z.string().min(10, 'Reason must be at least 10 characters'),\n});\n\ntype LeaveFormData = z.infer<typeof leaveFormSchema>;\n\ntype LeaveRequest = {\n  _id: string;\n  userId: {\n    _id: string;\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n  leaveType: string;\n  startDate: string;\n  endDate: string;\n  reason: string;\n  status: 'pending' | 'approved' | 'rejected';\n  reviewedBy?: {\n    _id: string;\n    firstName: string;\n    lastName: string;\n  };\n  reviewedAt?: string;\n  reviewNotes?: string;\n  createdAt: string;\n};\n\nexport default function LeaveManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isApplyDialogOpen, setIsApplyDialogOpen] = useState(false);\n\n  const canApproveLeave = user && ['admin', 'principal'].includes(user.role);\n  const canApplyLeave = user && ['faculty'].includes(user.role);\n\n  const form = useForm<LeaveFormData>({\n    resolver: zodResolver(leaveFormSchema),\n    defaultValues: {\n      leaveType: '',\n      startDate: '',\n      endDate: '',\n      reason: '',\n    },\n  });\n\n  const { data: leaveRequestsData, isLoading } = useQuery<{ leaveRequests: LeaveRequest[] }>({\n    queryKey: ['/api/leave-requests'],\n    enabled: !!user,\n  });\n\n  const leaveRequests = leaveRequestsData?.leaveRequests || [];\n\n  const applyLeaveMutation = useMutation({\n    mutationFn: async (data: LeaveFormData) => {\n      return await apiRequest('/api/leave-requests', {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Leave Applied',\n        description: 'Your leave request has been submitted successfully.',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/leave-requests'] });\n      setIsApplyDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to submit leave request.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const updateLeaveStatusMutation = useMutation({\n    mutationFn: async ({ id, status, reviewNotes }: { id: string; status: string; reviewNotes?: string }) => {\n      return await apiRequest(`/api/leave-requests/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify({ status, reviewNotes }),\n      });\n    },\n    onSuccess: (_, variables) => {\n      toast({\n        title: variables.status === 'approved' ? 'Leave Approved' : 'Leave Rejected',\n        description: `Leave request has been ${variables.status}.`,\n        variant: variables.status === 'approved' ? 'default' : 'destructive',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/leave-requests'] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Error',\n        description: error.message || 'Failed to update leave status.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleApplyLeave = (data: LeaveFormData) => {\n    applyLeaveMutation.mutate(data);\n  };\n\n  const handleApproveLeave = (leave: LeaveRequest) => {\n    updateLeaveStatusMutation.mutate({ id: leave._id, status: 'approved' });\n  };\n\n  const handleRejectLeave = (leave: LeaveRequest) => {\n    updateLeaveStatusMutation.mutate({ id: leave._id, status: 'rejected' });\n  };\n\n  const calculateDays = (startDate: string, endDate: string) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const diffTime = Math.abs(end.getTime() - start.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1;\n    return diffDays;\n  };\n\n  const pendingRequests = leaveRequests.filter(l => l.status === 'pending');\n  const myRequests = canApplyLeave ? leaveRequests : [];\n\n  if (isLoading) {\n    return (\n      <AppLayout>\n        <div className=\"p-6 space-y-6 max-w-7xl\">\n          <Breadcrumb items={[{ label: 'Leave Management' }]} />\n          <div className=\"flex items-center justify-center h-64\">\n            <p className=\"text-muted-foreground\">Loading...</p>\n          </div>\n        </div>\n      </AppLayout>\n    );\n  }\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-7xl\">\n        <Breadcrumb items={[{ label: 'Leave Management' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">Leave Management</h1>\n            <p className=\"text-muted-foreground mt-1\">Apply for and manage leave requests</p>\n          </div>\n          {canApplyLeave && (\n            <Dialog open={isApplyDialogOpen} onOpenChange={setIsApplyDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-apply-leave\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Apply Leave\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Apply for Leave</DialogTitle>\n                  <DialogDescription>Submit a new leave request</DialogDescription>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(handleApplyLeave)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"leaveType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Leave Type</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-leave-type\">\n                                <SelectValue placeholder=\"Select leave type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"sick\">Sick Leave</SelectItem>\n                              <SelectItem value=\"casual\">Casual Leave</SelectItem>\n                              <SelectItem value=\"earned\">Earned Leave</SelectItem>\n                              <SelectItem value=\"maternity\">Maternity Leave</SelectItem>\n                              <SelectItem value=\"other\">Other</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"startDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Start Date</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" data-testid=\"input-start-date\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={form.control}\n                        name=\"endDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>End Date</FormLabel>\n                            <FormControl>\n                              <Input type=\"date\" data-testid=\"input-end-date\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    <FormField\n                      control={form.control}\n                      name=\"reason\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Reason</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Enter reason for leave\"\n                              rows={3}\n                              data-testid=\"textarea-reason\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <DialogFooter>\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => setIsApplyDialogOpen(false)} \n                        data-testid=\"button-cancel\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        data-testid=\"button-submit-leave\"\n                        disabled={applyLeaveMutation.isPending}\n                      >\n                        {applyLeaveMutation.isPending ? 'Submitting...' : 'Submit Request'}\n                      </Button>\n                    </DialogFooter>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          )}\n        </div>\n\n        <Tabs defaultValue={canApproveLeave ? 'all' : 'my-requests'} className=\"space-y-6\">\n          <TabsList>\n            {canApproveLeave && (\n              <>\n                <TabsTrigger value=\"all\" data-testid=\"tab-all-requests\">All Requests</TabsTrigger>\n                <TabsTrigger value=\"pending\" data-testid=\"tab-pending\">\n                  Pending ({pendingRequests.length})\n                </TabsTrigger>\n              </>\n            )}\n            {canApplyLeave && (\n              <TabsTrigger value=\"my-requests\" data-testid=\"tab-my-requests\">My Requests</TabsTrigger>\n            )}\n          </TabsList>\n\n          {canApproveLeave && (\n            <>\n              <TabsContent value=\"all\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>All Leave Requests</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <DataTable\n                      data={leaveRequests}\n                      emptyMessage=\"No leave requests found\"\n                      columns={[\n                        {\n                          key: 'employee',\n                          header: 'Employee',\n                          cell: (item) => (\n                            <div>\n                              <p className=\"font-medium\">{item.userId.firstName} {item.userId.lastName}</p>\n                              <p className=\"text-sm text-muted-foreground\">{item.userId.email}</p>\n                            </div>\n                          ),\n                        },\n                        {\n                          key: 'leaveType',\n                          header: 'Leave Type',\n                          cell: (item) => (\n                            <span className=\"capitalize\">{item.leaveType.replace('_', ' ')}</span>\n                          ),\n                        },\n                        {\n                          key: 'duration',\n                          header: 'Duration',\n                          cell: (item) => (\n                            <div>\n                              <p className=\"font-medium\">{calculateDays(item.startDate, item.endDate)} days</p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {new Date(item.startDate).toLocaleDateString()} - {new Date(item.endDate).toLocaleDateString()}\n                              </p>\n                            </div>\n                          ),\n                        },\n                        {\n                          key: 'reason',\n                          header: 'Reason',\n                          cell: (item) => (\n                            <p className=\"max-w-xs truncate\">{item.reason}</p>\n                          ),\n                        },\n                        {\n                          key: 'status',\n                          header: 'Status',\n                          cell: (item) => (\n                            <Badge\n                              variant={\n                                item.status === 'approved' ? 'default' :\n                                item.status === 'pending' ? 'secondary' : 'destructive'\n                              }\n                            >\n                              {item.status}\n                            </Badge>\n                          ),\n                        },\n                        {\n                          key: 'actions',\n                          header: 'Actions',\n                          cell: (item) => item.status === 'pending' && canApproveLeave ? (\n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleApproveLeave(item)}\n                                data-testid={`button-approve-${item._id}`}\n                                disabled={updateLeaveStatusMutation.isPending}\n                              >\n                                <Check className=\"h-4 w-4 mr-1 text-green-600\" />\n                                Approve\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleRejectLeave(item)}\n                                data-testid={`button-reject-${item._id}`}\n                                disabled={updateLeaveStatusMutation.isPending}\n                              >\n                                <X className=\"h-4 w-4 mr-1 text-red-600\" />\n                                Reject\n                              </Button>\n                            </div>\n                          ) : item.reviewedBy ? (\n                            <div className=\"text-sm text-muted-foreground\">\n                              Reviewed by {item.reviewedBy.firstName} {item.reviewedBy.lastName}\n                            </div>\n                          ) : null,\n                        },\n                      ]}\n                    />\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              <TabsContent value=\"pending\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Pending Approvals</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <DataTable\n                      data={pendingRequests}\n                      emptyMessage=\"No pending leave requests\"\n                      columns={[\n                        {\n                          key: 'employee',\n                          header: 'Employee',\n                          cell: (item) => (\n                            <div>\n                              <p className=\"font-medium\">{item.userId.firstName} {item.userId.lastName}</p>\n                              <p className=\"text-sm text-muted-foreground\">{item.userId.email}</p>\n                            </div>\n                          ),\n                        },\n                        {\n                          key: 'leaveType',\n                          header: 'Leave Type',\n                          cell: (item) => (\n                            <span className=\"capitalize\">{item.leaveType.replace('_', ' ')}</span>\n                          ),\n                        },\n                        {\n                          key: 'duration',\n                          header: 'Duration',\n                          cell: (item) => (\n                            <div>\n                              <p className=\"font-medium\">{calculateDays(item.startDate, item.endDate)} days</p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {new Date(item.startDate).toLocaleDateString()} - {new Date(item.endDate).toLocaleDateString()}\n                              </p>\n                            </div>\n                          ),\n                        },\n                        {\n                          key: 'reason',\n                          header: 'Reason',\n                          cell: (item) => item.reason,\n                        },\n                        {\n                          key: 'actions',\n                          header: 'Actions',\n                          cell: (item) => (\n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleApproveLeave(item)}\n                                data-testid={`button-approve-pending-${item._id}`}\n                                disabled={updateLeaveStatusMutation.isPending}\n                              >\n                                <Check className=\"h-4 w-4 mr-1 text-green-600\" />\n                                Approve\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleRejectLeave(item)}\n                                data-testid={`button-reject-pending-${item._id}`}\n                                disabled={updateLeaveStatusMutation.isPending}\n                              >\n                                <X className=\"h-4 w-4 mr-1 text-red-600\" />\n                                Reject\n                              </Button>\n                            </div>\n                          ),\n                        },\n                      ]}\n                    />\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </>\n          )}\n\n          {canApplyLeave && (\n            <TabsContent value=\"my-requests\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>My Leave Requests</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <DataTable\n                    data={myRequests}\n                    emptyMessage=\"No leave requests found\"\n                    columns={[\n                      {\n                        key: 'leaveType',\n                        header: 'Leave Type',\n                        cell: (item) => (\n                          <span className=\"capitalize\">{item.leaveType.replace('_', ' ')}</span>\n                        ),\n                      },\n                      {\n                        key: 'duration',\n                        header: 'Duration',\n                        cell: (item) => (\n                          <div>\n                            <p className=\"font-medium\">{calculateDays(item.startDate, item.endDate)} days</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {new Date(item.startDate).toLocaleDateString()} - {new Date(item.endDate).toLocaleDateString()}\n                            </p>\n                          </div>\n                        ),\n                      },\n                      {\n                        key: 'reason',\n                        header: 'Reason',\n                        cell: (item) => item.reason,\n                      },\n                      {\n                        key: 'status',\n                        header: 'Status',\n                        cell: (item) => (\n                          <Badge\n                            variant={\n                              item.status === 'approved' ? 'default' :\n                              item.status === 'pending' ? 'secondary' : 'destructive'\n                            }\n                          >\n                            {item.status}\n                          </Badge>\n                        ),\n                      },\n                      {\n                        key: 'applied',\n                        header: 'Applied On',\n                        cell: (item) => new Date(item.createdAt).toLocaleDateString(),\n                      },\n                    ]}\n                  />\n                </CardContent>\n              </Card>\n            </TabsContent>\n          )}\n        </Tabs>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":22271},"client/src/components/dashboards/StudentDashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Calendar, ClipboardCheck, FileText, IndianRupee, Bell, User, Bus, BookOpen } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/lib/auth';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { format } from 'date-fns';\nimport { startTransition } from 'react';\n\nexport function StudentDashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: profileData, isLoading: profileLoading } = useQuery({\n    queryKey: ['/api/student/profile'],\n    enabled: !!user && user.role === 'student',\n  });\n\n  const { data: timetableData, isLoading: timetableLoading } = useQuery({\n    queryKey: ['/api/student/timetable'],\n    enabled: !!user && user.role === 'student',\n  });\n\n  const { data: examResults, isLoading: resultsLoading } = useQuery({\n    queryKey: ['/api/student/exam-results'],\n    enabled: !!user && user.role === 'student',\n  });\n\n  const { data: transportData } = useQuery({\n    queryKey: ['/api/student/transport'],\n    enabled: !!user && user.role === 'student',\n  });\n\n  const { data: announcementsData } = useQuery({\n    queryKey: ['/api/announcements'],\n    enabled: !!user,\n  });\n\n  const { data: notificationsCount } = useQuery({\n    queryKey: ['/api/notifications/unread-count'],\n    enabled: !!user,\n  });\n\n  const { data: messagesCount } = useQuery({\n    queryKey: ['/api/messages/unread-count'],\n    enabled: !!user,\n  });\n\n  const { data: feePaymentsData } = useQuery({\n    queryKey: ['/api/fee-payments/student', profileData?.student?._id],\n    enabled: !!profileData?.student?._id,\n  });\n\n  const student = profileData?.student;\n  const userProfile = profileData?.user;\n  const timetable = timetableData?.timetable || [];\n  const results = examResults?.results || [];\n  const transport = transportData?.transport;\n  const announcements = announcementsData?.announcements || [];\n  const feePayments = feePaymentsData?.payments || [];\n\n  const todaysTimetable = timetable\n    .filter((item: any) => {\n      const today = new Date().getDay();\n      const dayMap: Record<number, number> = { 0: 6, 1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5 };\n      return item.day === dayMap[today];\n    })\n    .slice(0, 4);\n\n  const recentResults = results.slice(0, 3);\n\n  const calculateAttendance = () => 94.2;\n  const calculateGPA = () => {\n    if (results.length === 0) return 0;\n    const total = results.reduce((sum: number, r: any) => sum + (r.marksObtained || 0), 0);\n    const max = results.reduce((sum: number, r: any) => sum + (r.totalMarks || 100), 0);\n    return ((total / max) * 4).toFixed(2);\n  };\n\n  const calculateFeeStatus = () => {\n    const totalPaid = feePayments\n      .filter((p: any) => p.status === 'paid')\n      .reduce((sum: number, p: any) => sum + p.amount, 0);\n    const totalPending = feePayments\n      .filter((p: any) => p.status === 'pending')\n      .reduce((sum: number, p: any) => sum + p.amount, 0);\n    const totalOverdue = feePayments\n      .filter((p: any) => p.status === 'overdue')\n      .reduce((sum: number, p: any) => sum + p.amount, 0);\n\n    const nextDuePayment = feePayments\n      .filter((p: any) => (p.status === 'pending' || p.status === 'overdue') && p.feeStructureId?.dueDate)\n      .sort((a: any, b: any) => new Date(a.feeStructureId.dueDate).getTime() - new Date(b.feeStructureId.dueDate).getTime())[0];\n\n    return {\n      status: totalOverdue > 0 ? 'Overdue' : totalPending > 0 ? 'Pending' : 'Paid',\n      statusColor: totalOverdue > 0 ? 'text-red-600' : totalPending > 0 ? 'text-orange-600' : 'text-green-600',\n      totalPaid,\n      totalPending,\n      totalOverdue,\n      nextDueDate: nextDuePayment?.feeStructureId?.dueDate ? format(new Date(nextDuePayment.feeStructureId.dueDate), 'MMM dd, yyyy') : null,\n    };\n  };\n\n  const feeStatus = calculateFeeStatus();\n\n  if (profileLoading) {\n    return (\n      <div className=\"p-6 space-y-8 max-w-7xl\">\n        <Skeleton className=\"h-12 w-64\" />\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n          <Skeleton className=\"h-64\" />\n          <Skeleton className=\"lg:col-span-3 h-64\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-8 max-w-7xl\">\n      <div>\n        <h1 className=\"text-3xl font-semibold mb-2\">Student Dashboard</h1>\n        <p className=\"text-muted-foreground\">Welcome back! Here's your academic overview</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n        <Card className=\"lg:col-span-1\">\n          <CardHeader>\n            <CardTitle className=\"text-base\">Student Profile</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col items-center text-center space-y-3\">\n              <div className=\"h-20 w-20 rounded-full bg-primary/10 flex items-center justify-center\">\n                <User className=\"h-10 w-10 text-primary\" />\n              </div>\n              <div>\n                <p className=\"font-semibold\" data-testid=\"text-student-name\">\n                  {userProfile?.firstName} {userProfile?.lastName}\n                </p>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-student-class\">\n                  {student?.classId ? `Class ${student.classId}` : 'Not Assigned'}\n                </p>\n                <p className=\"text-xs text-muted-foreground mt-1\" data-testid=\"text-roll-number\">\n                  Roll No: {student?.rollNumber || 'N/A'}\n                </p>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"w-full\"\n                data-testid=\"button-view-profile\"\n                onClick={() => startTransition(() => setLocation('/profile'))}\n              >\n                View Full Profile\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"lg:col-span-3 grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground font-medium\">Attendance This Month</p>\n                  <p className=\"text-3xl font-bold\" data-testid=\"text-attendance\">\n                    {calculateAttendance()}%\n                  </p>\n                  <Progress value={calculateAttendance()} className=\"h-2\" />\n                </div>\n                <div className=\"p-3 bg-primary/10 rounded-lg\">\n                  <ClipboardCheck className=\"h-6 w-6 text-primary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground font-medium\">Overall GPA</p>\n                  <p className=\"text-3xl font-bold\" data-testid=\"text-gpa\">\n                    {calculateGPA()}\n                  </p>\n                  <p className=\"text-xs text-green-600\">Based on exam results</p>\n                </div>\n                <div className=\"p-3 bg-primary/10 rounded-lg\">\n                  <FileText className=\"h-6 w-6 text-primary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover-elevate\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground font-medium\">Fee Status</p>\n                  <p className={`text-lg font-bold ${feeStatus.statusColor}`} data-testid=\"text-fee-status\">\n                    {feeStatus.status}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {feeStatus.nextDueDate ? `Next due: ${feeStatus.nextDueDate}` : 'No pending fees'}\n                  </p>\n                </div>\n                <div className=\"p-3 bg-primary/10 rounded-lg\">\n                  <IndianRupee className=\"h-6 w-6 text-primary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Link href=\"/timetable\">\n          <Card className=\"hover-elevate cursor-pointer transition-all\" data-testid=\"card-timetable\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-3 bg-blue-500/10 rounded-lg\">\n                  <Calendar className=\"h-6 w-6 text-blue-500\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold\">View Timetable</p>\n                  <p className=\"text-sm text-muted-foreground\">Full schedule</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n\n        <Link href=\"/examinations\">\n          <Card className=\"hover-elevate cursor-pointer transition-all\" data-testid=\"card-examinations\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-3 bg-green-500/10 rounded-lg\">\n                  <BookOpen className=\"h-6 w-6 text-green-500\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold\">Exam Results</p>\n                  <p className=\"text-sm text-muted-foreground\">View all results</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n\n        <Link href=\"/fees\">\n          <Card className=\"hover-elevate cursor-pointer transition-all\" data-testid=\"card-fees\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"p-3 bg-purple-500/10 rounded-lg\">\n                  <IndianRupee className=\"h-6 w-6 text-purple-500\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold\">Pay Fees</p>\n                  <p className=\"text-sm text-muted-foreground\">Online payment</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </Link>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle>Today's Timetable</CardTitle>\n                <CardDescription>Your classes for today</CardDescription>\n              </div>\n              <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n            </div>\n          </CardHeader>\n          <CardContent>\n            {timetableLoading ? (\n              <div className=\"space-y-3\">\n                {[1, 2, 3].map((i) => (\n                  <Skeleton key={i} className=\"h-16\" />\n                ))}\n              </div>\n            ) : todaysTimetable.length > 0 ? (\n              <div className=\"space-y-3\">\n                {todaysTimetable.map((classItem: any) => (\n                  <div\n                    key={classItem._id}\n                    className=\"flex items-center justify-between p-3 rounded-lg hover-elevate border\"\n                    data-testid={`timetable-${classItem._id}`}\n                  >\n                    <div>\n                      <p className=\"font-medium\">{classItem.subjectId?.name || 'Subject'}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {classItem.teacherId\n                          ? `${classItem.teacherId.firstName} ${classItem.teacherId.lastName}`\n                          : 'Teacher'}{' '}\n                        • Room {classItem.room || 'TBA'}\n                      </p>\n                    </div>\n                    <span className=\"font-mono text-sm font-medium\">\n                      {classItem.startTime || '00:00'}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-center text-muted-foreground py-8\">No classes scheduled for today</p>\n            )}\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Bus className=\"h-5 w-5\" />\n              <CardTitle>Transport Details</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {transport ? (\n              <div className=\"space-y-4\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Route</p>\n                  <p className=\"font-semibold\" data-testid=\"text-route-name\">\n                    {transport.routeId?.routeName || 'N/A'}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Bus Number</p>\n                  <p className=\"font-semibold\" data-testid=\"text-bus-number\">\n                    {transport.routeId?.vehicleNumber || 'N/A'}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Pickup Stop</p>\n                  <p className=\"font-semibold\" data-testid=\"text-pickup-stop\">\n                    {transport.pickupStop || 'N/A'}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Pickup Time</p>\n                  <p className=\"font-semibold text-primary\" data-testid=\"text-pickup-time\">\n                    {transport.pickupTime || 'N/A'}\n                  </p>\n                </div>\n                <Link href=\"/transport\">\n                  <Button variant=\"outline\" className=\"w-full\" size=\"sm\" data-testid=\"button-view-transport\">\n                    View Transport Details\n                  </Button>\n                </Link>\n              </div>\n            ) : (\n              <div className=\"py-4\">\n                <p className=\"text-center text-muted-foreground\">No transport allocated</p>\n                <Link href=\"/transport\">\n                  <Button variant=\"outline\" className=\"w-full mt-4\" size=\"sm\" data-testid=\"button-view-transport\">\n                    View Transport Options\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Exam Results</CardTitle>\n            <CardDescription>Your latest academic performance</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {resultsLoading ? (\n              <div className=\"space-y-3\">\n                {[1, 2, 3].map((i) => (\n                  <Skeleton key={i} className=\"h-20\" />\n                ))}\n              </div>\n            ) : recentResults.length > 0 ? (\n              <div className=\"space-y-3\">\n                {recentResults.map((result: any) => (\n                  <div\n                    key={result._id}\n                    className=\"p-3 rounded-lg hover-elevate border\"\n                    data-testid={`result-${result._id}`}\n                  >\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <p className=\"font-medium\">\n                        {result.examId?.name || 'Exam'} - {result.subjectId?.name || 'Subject'}\n                      </p>\n                      <Badge variant=\"outline\">{result.grade || 'N/A'}</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-mono text-sm font-medium\">\n                        {result.marksObtained || 0}/{result.totalMarks || 100}\n                      </span>\n                      <span className=\"text-xs text-muted-foreground\">\n                        {result.createdAt ? format(new Date(result.createdAt), 'MMM dd, yyyy') : ''}\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-center text-muted-foreground py-8\">No exam results available</p>\n            )}\n            <Link href=\"/examinations\">\n              <Button variant=\"outline\" className=\"w-full mt-4\" data-testid=\"button-view-all-results\">\n                View All Results\n              </Button>\n            </Link>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Bell className=\"h-5 w-5\" />\n              <CardTitle>Announcements</CardTitle>\n            </div>\n            <CardDescription>Important updates from school</CardDescription>\n          </CardHeader>\n          <CardContent>\n            {announcements.length > 0 ? (\n              <div className=\"space-y-3\">\n                {announcements.slice(0, 3).map((announcement: any) => (\n                  <div\n                    key={announcement._id}\n                    className=\"flex items-center justify-between p-3 rounded-lg hover-elevate border\"\n                    data-testid={`announcement-${announcement._id}`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`h-2 w-2 rounded-full bg-blue-500`} />\n                      <div>\n                        <p className=\"font-medium\">{announcement.title}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {announcement.publishedDate\n                            ? format(new Date(announcement.publishedDate), 'MMM dd, yyyy')\n                            : 'Recent'}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-center text-muted-foreground py-8\">No announcements</p>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":18649},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/pages/Fees.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Plus, Download, IndianRupee, Search } from 'lucide-react';\nimport { DataTable } from '@/components/shared/DataTable';\nimport { Badge } from '@/components/ui/badge';\nimport { StatCard } from '@/components/shared/StatCard';\nimport { TrendingUp, AlertCircle, CreditCard } from 'lucide-react';\nimport { formatCurrencyINR } from '@/lib/utils';\nimport { useAuth } from '@/lib/auth';\nimport { format } from 'date-fns';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\n\ninterface FeePayment {\n  id: string;\n  student: string;\n  class: string;\n  amount: number;\n  status: string;\n  date: string;\n  receipt: string;\n  admissionNumber?: string;\n  paymentMode?: string;\n}\n\ninterface FeeStructure {\n  _id: string;\n  name: string;\n  amount: number;\n  classId: string;\n  dueDate?: string;\n  description?: string;\n}\n\nexport default function Fees() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const isStudent = user?.role === 'student';\n  const [isAddFeeDialogOpen, setIsAddFeeDialogOpen] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState('all');\n  const [feeForm, setFeeForm] = useState({\n    name: '',\n    amount: '',\n    classId: '',\n    academicYear: new Date().getFullYear().toString(),\n    dueDate: '',\n    description: '',\n  });\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedSearchQuery(searchQuery);\n    }, 300);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery]);\n\n  const { data: profileData } = useQuery<{ student: { _id: string } }>({\n    queryKey: ['/api/student/profile'],\n    enabled: isStudent,\n  });\n\n  const studentId = profileData?.student?._id;\n\n  const { data: paymentsData, isLoading: paymentsLoading } = useQuery<{ payments: any[] }>({\n    queryKey: isStudent ? ['/api/fee-payments/student', studentId] : ['/api/fee-payments'],\n    enabled: !isStudent || !!studentId,\n  });\n\n  const { data: searchResultsData, isLoading: searchLoading } = useQuery<{ payments: any[] }>({\n    queryKey: ['/api/fee-payments/search', { q: debouncedSearchQuery, status: statusFilter }],\n    enabled: !isStudent && (!!debouncedSearchQuery || (!!statusFilter && statusFilter !== 'all')),\n  });\n\n  const { data: structuresData, isLoading: structuresLoading } = useQuery<{ feeStructures: FeeStructure[] }>({\n    queryKey: ['/api/fee-structures'],\n  });\n\n  const { data: classesData } = useQuery<{ classes: any[] }>({\n    queryKey: ['/api/classes'],\n    enabled: !isStudent,\n  });\n\n  const feePayments = !isStudent && (debouncedSearchQuery || (statusFilter && statusFilter !== 'all')) \n    ? (searchResultsData?.payments || [])\n    : (paymentsData?.payments || []);\n  const feeStructures = structuresData?.feeStructures || [];\n  const classes = classesData?.classes || [];\n  const isLoading = isStudent ? paymentsLoading : (debouncedSearchQuery || (statusFilter && statusFilter !== 'all') ? searchLoading : paymentsLoading);\n\n  const createFeeStructureMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest('/api/fee-structures', {\n        method: 'POST',\n        body: JSON.stringify({\n          ...feeForm,\n          amount: parseFloat(feeForm.amount),\n        }),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Fee structure created successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/fee-structures'] });\n      setIsAddFeeDialogOpen(false);\n      setFeeForm({\n        name: '',\n        amount: '',\n        classId: '',\n        academicYear: new Date().getFullYear().toString(),\n        dueDate: '',\n        description: '',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to create fee structure',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleCreateFeeStructure = () => {\n    if (!feeForm.name || !feeForm.amount || !feeForm.classId) {\n      toast({\n        title: 'Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive',\n      });\n      return;\n    }\n    createFeeStructureMutation.mutate();\n  };\n\n  const totalCollected = feePayments\n    .filter(p => p.status === 'paid')\n    .reduce((sum, p) => sum + p.amount, 0);\n\n  const pendingAmount = feePayments\n    .filter(p => p.status === 'pending')\n    .reduce((sum, p) => sum + p.amount, 0);\n\n  const overdueAmount = feePayments\n    .filter(p => p.status === 'overdue')\n    .reduce((sum, p) => sum + p.amount, 0);\n\n  const totalAmount = totalCollected + pendingAmount + overdueAmount;\n  const collectionRate = totalAmount > 0 ? (totalCollected / totalAmount) * 100 : 0;\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-7xl\">\n        <Breadcrumb items={[{ label: isStudent ? 'My Fees' : 'Fee Management' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">{isStudent ? 'My Fees' : 'Fee Management'}</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              {isStudent ? 'View your fee payment history and pending fees' : 'Track fee collection and payment status'}\n            </p>\n          </div>\n          <Button variant=\"outline\" data-testid=\"button-export-fees\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export {isStudent ? 'Fee Statement' : 'Report'}\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <StatCard\n            title={isStudent ? \"Total Paid\" : \"Total Collected\"}\n            value={formatCurrencyINR(totalCollected)}\n            icon={IndianRupee}\n            testId=\"stat-total-collected\"\n          />\n          <StatCard\n            title=\"Pending Payments\"\n            value={formatCurrencyINR(pendingAmount)}\n            icon={AlertCircle}\n            testId=\"stat-pending-payments\"\n          />\n          <StatCard\n            title=\"Overdue\"\n            value={formatCurrencyINR(overdueAmount)}\n            icon={TrendingUp}\n            testId=\"stat-overdue\"\n          />\n          <StatCard\n            title={isStudent ? \"Total Amount\" : \"Collection Rate\"}\n            value={isStudent ? formatCurrencyINR(totalAmount) : `${collectionRate.toFixed(1)}%`}\n            icon={CreditCard}\n            testId=\"stat-collection-rate\"\n          />\n        </div>\n\n        <Tabs defaultValue=\"payments\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"payments\" data-testid=\"tab-payments\">Payments</TabsTrigger>\n            <TabsTrigger value=\"structures\" data-testid=\"tab-structures\">Fee Structures</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"payments\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex flex-col space-y-4\">\n                  <div>\n                    <CardTitle>{isStudent ? 'My Payment History' : 'Recent Payments'}</CardTitle>\n                    <CardDescription>{isStudent ? 'Your fee payment records' : 'Latest fee payments and pending amounts'}</CardDescription>\n                  </div>\n                  {!isStudent && (\n                    <div className=\"flex flex-col sm:flex-row gap-4\">\n                      <div className=\"relative flex-1\">\n                        <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                        <Input\n                          placeholder=\"Search by student name, admission number, or class...\"\n                          value={searchQuery}\n                          onChange={(e) => setSearchQuery(e.target.value)}\n                          className=\"pl-10\"\n                          data-testid=\"input-search-fees\"\n                        />\n                      </div>\n                      <Select value={statusFilter} onValueChange={setStatusFilter}>\n                        <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-status-filter\">\n                          <SelectValue placeholder=\"All Statuses\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"all\">All Statuses</SelectItem>\n                          <SelectItem value=\"paid\">Paid</SelectItem>\n                          <SelectItem value=\"pending\">Pending</SelectItem>\n                          <SelectItem value=\"overdue\">Overdue</SelectItem>\n                          <SelectItem value=\"partial\">Partial</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">Loading payments...</div>\n                ) : (\n                  <DataTable\n                    data={feePayments}\n                    emptyMessage={isStudent ? \"No payment records found\" : \"No payments found\"}\n                    columns={\n                      isStudent ? [\n                        {\n                          key: 'feeStructureId',\n                          header: 'Fee Type',\n                          cell: (item) => (\n                            <div>\n                              <p className=\"font-medium\">{item.feeStructureId?.name || 'Fee Payment'}</p>\n                              {item.feeStructureId?.description && (\n                                <p className=\"text-sm text-muted-foreground\">{item.feeStructureId.description}</p>\n                              )}\n                            </div>\n                          ),\n                        },\n                        {\n                          key: 'amount',\n                          header: 'Amount',\n                          cell: (item) => <span className=\"font-mono font-medium\">{formatCurrencyINR(item.amount)}</span>,\n                        },\n                        {\n                          key: 'paymentDate',\n                          header: 'Payment Date',\n                          cell: (item) => <span className=\"text-sm\">{item.paymentDate ? format(new Date(item.paymentDate), 'MMM dd, yyyy') : 'N/A'}</span>,\n                        },\n                        {\n                          key: 'paymentMode',\n                          header: 'Payment Method',\n                          cell: (item) => <span className=\"text-sm capitalize\">{item.paymentMode || 'N/A'}</span>,\n                        },\n                        {\n                          key: 'status',\n                          header: 'Status',\n                          cell: (item) => (\n                            <Badge\n                              variant={\n                                item.status === 'paid' ? 'default' :\n                                item.status === 'pending' ? 'secondary' :\n                                'destructive'\n                              }\n                              data-testid={`badge-${item.status}`}\n                            >\n                              {item.status}\n                            </Badge>\n                          ),\n                        },\n                        {\n                          key: 'receiptNumber',\n                          header: 'Receipt',\n                          cell: (item) => (\n                            item.receiptNumber ? (\n                              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-receipt\">\n                                {item.receiptNumber}\n                              </Button>\n                            ) : (\n                              <span className=\"text-sm text-muted-foreground\">-</span>\n                            )\n                          ),\n                        },\n                      ] : [\n                        {\n                          key: 'student',\n                          header: 'Student',\n                          cell: (item) => (\n                            <div>\n                              <p className=\"font-medium\">{item.student}</p>\n                              <p className=\"text-sm text-muted-foreground\">{item.class}</p>\n                            </div>\n                          ),\n                        },\n                        {\n                          key: 'amount',\n                          header: 'Amount',\n                          cell: (item) => <span className=\"font-mono font-medium\">{formatCurrencyINR(item.amount)}</span>,\n                        },\n                        {\n                          key: 'date',\n                          header: 'Date',\n                          cell: (item) => <span className=\"text-sm\">{item.date}</span>,\n                        },\n                        {\n                          key: 'status',\n                          header: 'Status',\n                          cell: (item) => (\n                            <Badge\n                              variant={\n                                item.status === 'paid' ? 'default' :\n                                item.status === 'pending' ? 'secondary' :\n                                'destructive'\n                              }\n                            >\n                              {item.status}\n                            </Badge>\n                          ),\n                        },\n                        {\n                          key: 'receipt',\n                          header: 'Receipt',\n                          cell: (item) => (\n                            item.receipt ? (\n                              <Button variant=\"ghost\" size=\"sm\">\n                                View\n                              </Button>\n                            ) : (\n                              <span className=\"text-sm text-muted-foreground\">-</span>\n                            )\n                          ),\n                        },\n                      ]\n                    }\n                  />\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"structures\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>{isStudent ? 'Applicable Fees' : 'Fee Structures'}</CardTitle>\n                    <CardDescription>{isStudent ? 'Fee structures applicable to you' : 'Manage fee types and amounts'}</CardDescription>\n                  </div>\n                  {!isStudent && (\n                    <Dialog open={isAddFeeDialogOpen} onOpenChange={setIsAddFeeDialogOpen}>\n                      <DialogTrigger asChild>\n                        <Button data-testid=\"button-add-fee-structure\">\n                          <Plus className=\"mr-2 h-4 w-4\" />\n                          Add Fee Structure\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"max-w-md\">\n                        <DialogHeader>\n                          <DialogTitle>Add Fee Structure</DialogTitle>\n                          <DialogDescription>Create a new fee structure for a class</DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid gap-4 py-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"fee-name\">Fee Name *</Label>\n                            <Input\n                              id=\"fee-name\"\n                              placeholder=\"e.g., Tuition Fee, Lab Fee\"\n                              value={feeForm.name}\n                              onChange={(e) => setFeeForm({ ...feeForm, name: e.target.value })}\n                              data-testid=\"input-fee-name\"\n                            />\n                          </div>\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"class\">Class *</Label>\n                            <Select value={feeForm.classId} onValueChange={(value) => setFeeForm({ ...feeForm, classId: value })}>\n                              <SelectTrigger data-testid=\"select-class\">\n                                <SelectValue placeholder=\"Select class\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                {classes.map((cls) => (\n                                  <SelectItem key={cls._id} value={cls._id}>\n                                    Class {cls.grade} {cls.section}\n                                  </SelectItem>\n                                ))}\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"amount\">Amount *</Label>\n                              <Input\n                                id=\"amount\"\n                                type=\"number\"\n                                placeholder=\"0\"\n                                value={feeForm.amount}\n                                onChange={(e) => setFeeForm({ ...feeForm, amount: e.target.value })}\n                                data-testid=\"input-amount\"\n                              />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"academic-year\">Academic Year</Label>\n                              <Input\n                                id=\"academic-year\"\n                                placeholder=\"2025\"\n                                value={feeForm.academicYear}\n                                onChange={(e) => setFeeForm({ ...feeForm, academicYear: e.target.value })}\n                                data-testid=\"input-academic-year\"\n                              />\n                            </div>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"due-date\">Due Date</Label>\n                            <Input\n                              id=\"due-date\"\n                              type=\"date\"\n                              value={feeForm.dueDate}\n                              onChange={(e) => setFeeForm({ ...feeForm, dueDate: e.target.value })}\n                              data-testid=\"input-due-date\"\n                            />\n                          </div>\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"fee-description\">Description</Label>\n                            <Textarea\n                              id=\"fee-description\"\n                              placeholder=\"Optional description\"\n                              rows={2}\n                              value={feeForm.description}\n                              onChange={(e) => setFeeForm({ ...feeForm, description: e.target.value })}\n                              data-testid=\"textarea-description\"\n                            />\n                          </div>\n                        </div>\n                        <DialogFooter>\n                          <Button variant=\"outline\" onClick={() => setIsAddFeeDialogOpen(false)} data-testid=\"button-cancel-fee\">\n                            Cancel\n                          </Button>\n                          <Button onClick={handleCreateFeeStructure} disabled={createFeeStructureMutation.isPending} data-testid=\"button-create-fee\">\n                            {createFeeStructureMutation.isPending ? 'Creating...' : 'Create Fee Structure'}\n                          </Button>\n                        </DialogFooter>\n                      </DialogContent>\n                    </Dialog>\n                  )}\n                </div>\n              </CardHeader>\n              <CardContent>\n                {structuresLoading ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">Loading fee structures...</div>\n                ) : (\n                  <DataTable\n                    data={feeStructures}\n                    emptyMessage={isStudent ? \"No applicable fees found\" : \"No fee structures found. Add one to get started.\"}\n                    columns={[\n                      {\n                        key: 'name',\n                        header: 'Fee Name',\n                        cell: (item) => (\n                          <div>\n                            <p className=\"font-medium\" data-testid={`text-fee-name-${item._id}`}>{item.name}</p>\n                            {item.description && (\n                              <p className=\"text-sm text-muted-foreground\">{item.description}</p>\n                            )}\n                          </div>\n                        ),\n                      },\n                      {\n                        key: 'amount',\n                        header: 'Amount',\n                        cell: (item) => <span className=\"font-mono font-medium\" data-testid={`text-fee-amount-${item._id}`}>{formatCurrencyINR(item.amount)}</span>,\n                      },\n                      {\n                        key: 'dueDate',\n                        header: 'Due Date',\n                        cell: (item) => (\n                          <span className=\"text-sm\" data-testid={`text-fee-due-${item._id}`}>\n                            {item.dueDate ? format(new Date(item.dueDate), 'MMM dd, yyyy') : 'N/A'}\n                          </span>\n                        ),\n                      },\n                      ...(!isStudent ? [{\n                        key: 'actions',\n                        header: 'Actions',\n                        cell: () => (\n                          <div className=\"flex gap-2\">\n                            <Button variant=\"ghost\" size=\"sm\">Edit</Button>\n                            <Button variant=\"ghost\" size=\"sm\">Delete</Button>\n                          </div>\n                        ),\n                      }] : []),\n                    ]}\n                  />\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":23338},"client/src/pages/SupportTickets.tsx":{"content":"import { useState } from 'react';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { DataTable } from '@/components/shared/DataTable';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Eye, MessageSquare } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/lib/auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\nexport default function SupportTickets() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [selectedTicket, setSelectedTicket] = useState<any>(null);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n\n  const canManageTickets = user && user.role === 'super_admin';\n\n  const tickets = [\n    {\n      id: '1',\n      ticketId: 'TKT-001',\n      school: 'Springfield High School',\n      title: 'Unable to add new students',\n      description: 'Getting an error when trying to add new student records through the student management module.',\n      category: 'Technical',\n      priority: 'high',\n      status: 'open',\n      createdBy: 'Admin User',\n      createdAt: '2025-01-26 09:30 AM',\n      assignedTo: null,\n    },\n    {\n      id: '2',\n      ticketId: 'TKT-002',\n      school: 'Riverside Academy',\n      title: 'Request for additional faculty licenses',\n      description: 'We need to add 5 more faculty members but have reached our subscription limit.',\n      category: 'Billing',\n      priority: 'medium',\n      status: 'in_progress',\n      createdBy: 'Principal',\n      createdAt: '2025-01-25 02:15 PM',\n      assignedTo: 'Support Team',\n    },\n    {\n      id: '3',\n      ticketId: 'TKT-003',\n      school: 'Greenwood International',\n      title: 'Fee payment gateway not working',\n      description: 'Parents are reporting that they cannot make online payments. The payment gateway returns an error.',\n      category: 'Technical',\n      priority: 'urgent',\n      status: 'open',\n      createdBy: 'Finance Manager',\n      createdAt: '2025-01-27 11:45 AM',\n      assignedTo: null,\n    },\n    {\n      id: '4',\n      ticketId: 'TKT-004',\n      school: 'Oakdale School',\n      title: 'Question about exam module features',\n      description: 'Need clarification on how to set up different grading scales for different subjects.',\n      category: 'Support',\n      priority: 'low',\n      status: 'resolved',\n      createdBy: 'Admin',\n      createdAt: '2025-01-24 10:00 AM',\n      assignedTo: 'Support Team',\n      resolvedAt: '2025-01-25 03:30 PM',\n    },\n  ];\n\n  const handleViewTicket = (ticket: any) => {\n    setSelectedTicket(ticket);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleAssignTicket = (ticket: any) => {\n    toast({\n      title: 'Ticket Assigned',\n      description: `Ticket ${ticket.ticketId} has been assigned to support team.`,\n    });\n  };\n\n  const handleResolveTicket = (ticket: any) => {\n    toast({\n      title: 'Ticket Resolved',\n      description: `Ticket ${ticket.ticketId} has been marked as resolved.`,\n    });\n  };\n\n  const openTickets = tickets.filter(t => t.status === 'open');\n  const inProgressTickets = tickets.filter(t => t.status === 'in_progress');\n  const resolvedTickets = tickets.filter(t => t.status === 'resolved');\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'urgent':\n        return 'destructive';\n      case 'high':\n        return 'default';\n      case 'medium':\n        return 'secondary';\n      case 'low':\n        return 'outline';\n      default:\n        return 'outline';\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'open':\n        return 'destructive';\n      case 'in_progress':\n        return 'default';\n      case 'resolved':\n        return 'secondary';\n      default:\n        return 'outline';\n    }\n  };\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-7xl\">\n        <Breadcrumb items={[{ label: 'Support Tickets' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">Support Tickets</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage support tickets from all schools</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Select defaultValue=\"all\">\n              <SelectTrigger className=\"w-48\" data-testid=\"select-filter-priority\">\n                <SelectValue placeholder=\"Filter by Priority\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Priorities</SelectItem>\n                <SelectItem value=\"urgent\">Urgent</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"low\">Low</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <p className=\"text-3xl font-bold\">{tickets.length}</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">Total Tickets</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <p className=\"text-3xl font-bold text-red-600\">{openTickets.length}</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">Open</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <p className=\"text-3xl font-bold text-blue-600\">{inProgressTickets.length}</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">In Progress</p>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"text-center\">\n                <p className=\"text-3xl font-bold text-green-600\">{resolvedTickets.length}</p>\n                <p className=\"text-sm text-muted-foreground mt-1\">Resolved</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"all\" className=\"space-y-6\">\n          <TabsList>\n            <TabsTrigger value=\"all\" data-testid=\"tab-all-tickets\">All ({tickets.length})</TabsTrigger>\n            <TabsTrigger value=\"open\" data-testid=\"tab-open\">Open ({openTickets.length})</TabsTrigger>\n            <TabsTrigger value=\"in-progress\" data-testid=\"tab-in-progress\">In Progress ({inProgressTickets.length})</TabsTrigger>\n            <TabsTrigger value=\"resolved\" data-testid=\"tab-resolved\">Resolved ({resolvedTickets.length})</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"all\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>All Tickets</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <DataTable\n                  data={tickets}\n                  emptyMessage=\"No tickets found\"\n                  columns={[\n                    {\n                      key: 'ticket',\n                      header: 'Ticket',\n                      cell: (item) => (\n                        <div>\n                          <p className=\"font-medium\">{item.ticketId}</p>\n                          <p className=\"text-sm text-muted-foreground\">{item.title}</p>\n                        </div>\n                      ),\n                    },\n                    {\n                      key: 'school',\n                      header: 'School',\n                      cell: (item) => item.school,\n                    },\n                    {\n                      key: 'category',\n                      header: 'Category',\n                      cell: (item) => item.category,\n                    },\n                    {\n                      key: 'priority',\n                      header: 'Priority',\n                      cell: (item) => (\n                        <Badge variant={getPriorityColor(item.priority)}>\n                          {item.priority}\n                        </Badge>\n                      ),\n                    },\n                    {\n                      key: 'status',\n                      header: 'Status',\n                      cell: (item) => (\n                        <Badge variant={getStatusColor(item.status)}>\n                          {item.status.replace('_', ' ')}\n                        </Badge>\n                      ),\n                    },\n                    {\n                      key: 'created',\n                      header: 'Created',\n                      cell: (item) => (\n                        <div>\n                          <p className=\"text-sm\">{item.createdAt}</p>\n                          <p className=\"text-xs text-muted-foreground\">by {item.createdBy}</p>\n                        </div>\n                      ),\n                    },\n                    {\n                      key: 'actions',\n                      header: 'Actions',\n                      cell: (item) => canManageTickets ? (\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleViewTicket(item)}\n                            data-testid={`button-view-ticket-${item.id}`}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          {item.status === 'open' && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleAssignTicket(item)}\n                              data-testid={`button-assign-ticket-${item.id}`}\n                            >\n                              Assign\n                            </Button>\n                          )}\n                          {item.status === 'in_progress' && (\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleResolveTicket(item)}\n                              data-testid={`button-resolve-ticket-${item.id}`}\n                            >\n                              Resolve\n                            </Button>\n                          )}\n                        </div>\n                      ) : null,\n                    },\n                  ]}\n                />\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"open\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Open Tickets</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <DataTable\n                  data={openTickets}\n                  emptyMessage=\"No open tickets\"\n                  columns={[\n                    {\n                      key: 'ticket',\n                      header: 'Ticket',\n                      cell: (item) => (\n                        <div>\n                          <p className=\"font-medium\">{item.ticketId}</p>\n                          <p className=\"text-sm text-muted-foreground\">{item.title}</p>\n                        </div>\n                      ),\n                    },\n                    {\n                      key: 'school',\n                      header: 'School',\n                      cell: (item) => item.school,\n                    },\n                    {\n                      key: 'category',\n                      header: 'Category',\n                      cell: (item) => item.category,\n                    },\n                    {\n                      key: 'priority',\n                      header: 'Priority',\n                      cell: (item) => (\n                        <Badge variant={getPriorityColor(item.priority)}>\n                          {item.priority}\n                        </Badge>\n                      ),\n                    },\n                    {\n                      key: 'created',\n                      header: 'Created',\n                      cell: (item) => item.createdAt,\n                    },\n                    {\n                      key: 'actions',\n                      header: 'Actions',\n                      cell: (item) => canManageTickets ? (\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleViewTicket(item)}\n                            data-testid={`button-view-open-${item.id}`}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleAssignTicket(item)}\n                            data-testid={`button-assign-open-${item.id}`}\n                          >\n                            Assign\n                          </Button>\n                        </div>\n                      ) : null,\n                    },\n                  ]}\n                />\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"in-progress\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>In Progress Tickets</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <DataTable\n                  data={inProgressTickets}\n                  emptyMessage=\"No tickets in progress\"\n                  columns={[\n                    {\n                      key: 'ticket',\n                      header: 'Ticket',\n                      cell: (item) => (\n                        <div>\n                          <p className=\"font-medium\">{item.ticketId}</p>\n                          <p className=\"text-sm text-muted-foreground\">{item.title}</p>\n                        </div>\n                      ),\n                    },\n                    {\n                      key: 'school',\n                      header: 'School',\n                      cell: (item) => item.school,\n                    },\n                    {\n                      key: 'assignedTo',\n                      header: 'Assigned To',\n                      cell: (item) => item.assignedTo || 'Unassigned',\n                    },\n                    {\n                      key: 'priority',\n                      header: 'Priority',\n                      cell: (item) => (\n                        <Badge variant={getPriorityColor(item.priority)}>\n                          {item.priority}\n                        </Badge>\n                      ),\n                    },\n                    {\n                      key: 'actions',\n                      header: 'Actions',\n                      cell: (item) => canManageTickets ? (\n                        <div className=\"flex items-center gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleViewTicket(item)}\n                            data-testid={`button-view-progress-${item.id}`}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => handleResolveTicket(item)}\n                            data-testid={`button-resolve-progress-${item.id}`}\n                          >\n                            Resolve\n                          </Button>\n                        </div>\n                      ) : null,\n                    },\n                  ]}\n                />\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"resolved\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Resolved Tickets</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <DataTable\n                  data={resolvedTickets}\n                  emptyMessage=\"No resolved tickets\"\n                  columns={[\n                    {\n                      key: 'ticket',\n                      header: 'Ticket',\n                      cell: (item) => (\n                        <div>\n                          <p className=\"font-medium\">{item.ticketId}</p>\n                          <p className=\"text-sm text-muted-foreground\">{item.title}</p>\n                        </div>\n                      ),\n                    },\n                    {\n                      key: 'school',\n                      header: 'School',\n                      cell: (item) => item.school,\n                    },\n                    {\n                      key: 'resolved',\n                      header: 'Resolved',\n                      cell: (item) => item.resolvedAt || '-',\n                    },\n                    {\n                      key: 'actions',\n                      header: 'Actions',\n                      cell: (item) => (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleViewTicket(item)}\n                          data-testid={`button-view-resolved-${item.id}`}\n                        >\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      ),\n                    },\n                  ]}\n                />\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Ticket Details - {selectedTicket?.ticketId}</DialogTitle>\n              <DialogDescription>\n                Created by {selectedTicket?.createdBy} on {selectedTicket?.createdAt}\n              </DialogDescription>\n            </DialogHeader>\n            {selectedTicket && (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>School</Label>\n                  <p className=\"mt-1\">{selectedTicket.school}</p>\n                </div>\n                <div>\n                  <Label>Title</Label>\n                  <p className=\"mt-1 font-medium\">{selectedTicket.title}</p>\n                </div>\n                <div>\n                  <Label>Description</Label>\n                  <p className=\"mt-1 text-sm text-muted-foreground\">{selectedTicket.description}</p>\n                </div>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label>Category</Label>\n                    <p className=\"mt-1\">{selectedTicket.category}</p>\n                  </div>\n                  <div>\n                    <Label>Priority</Label>\n                    <Badge className=\"mt-1\" variant={getPriorityColor(selectedTicket.priority)}>\n                      {selectedTicket.priority}\n                    </Badge>\n                  </div>\n                  <div>\n                    <Label>Status</Label>\n                    <Badge className=\"mt-1\" variant={getStatusColor(selectedTicket.status)}>\n                      {selectedTicket.status}\n                    </Badge>\n                  </div>\n                </div>\n                {selectedTicket.assignedTo && (\n                  <div>\n                    <Label>Assigned To</Label>\n                    <p className=\"mt-1\">{selectedTicket.assignedTo}</p>\n                  </div>\n                )}\n              </div>\n            )}\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setIsViewDialogOpen(false)} data-testid=\"button-close-ticket-dialog\">\n                Close\n              </Button>\n              {selectedTicket?.status !== 'resolved' && canManageTickets && (\n                <Button onClick={() => {\n                  handleResolveTicket(selectedTicket);\n                  setIsViewDialogOpen(false);\n                }} data-testid=\"button-resolve-from-dialog\">\n                  Mark as Resolved\n                </Button>\n              )}\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":21360},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"server/seed.ts":{"content":"import { connectToDatabase } from './db';\nimport { storage } from './storage';\nimport bcrypt from 'bcryptjs';\n\nasync function seed() {\n  console.log('Starting database seed...');\n\n  try {\n    await connectToDatabase();\n    // Create demo tenant\n    const tenant = await storage.createTenant({\n      name: 'Springfield High School',\n      code: 'SHS001',\n      email: 'admin@springfield.edu',\n      phone: '+1-555-0100',\n      address: '123 Education Lane, Springfield',\n      active: true,\n    });\n    console.log('Created tenant:', tenant.name);\n\n    // Create users for different roles\n    const hashedPassword = await bcrypt.hash('demo123', 10);\n\n    const adminUser = await storage.createUser({\n      tenantId: tenant._id,\n      email: 'admin@school.com',\n      password: hashedPassword,\n      role: 'admin',\n      firstName: 'Admin',\n      lastName: 'User',\n      phone: '+1-555-0101',\n      active: true,\n    });\n    console.log('Created admin user');\n\n    const principalUser = await storage.createUser({\n      tenantId: tenant._id,\n      email: 'principal@school.com',\n      password: hashedPassword,\n      role: 'principal',\n      firstName: 'John',\n      lastName: 'Principal',\n      phone: '+1-555-0102',\n      active: true,\n    });\n    console.log('Created principal user');\n\n    const facultyUser = await storage.createUser({\n      tenantId: tenant._id,\n      email: 'teacher@school.com',\n      password: hashedPassword,\n      role: 'faculty',\n      firstName: 'Ms.',\n      lastName: 'Anderson',\n      phone: '+1-555-0103',\n      active: true,\n    });\n    console.log('Created faculty user');\n\n    // Create classes\n    const class10A = await storage.createClass({\n      tenantId: tenant._id,\n      name: 'Grade 10-A',\n      grade: 10,\n      section: 'A',\n      capacity: 40,\n      classTeacherId: facultyUser._id,\n      academicYear: '2024-2025',\n    });\n\n    const class9B = await storage.createClass({\n      tenantId: tenant._id,\n      name: 'Grade 9-B',\n      grade: 9,\n      section: 'B',\n      capacity: 45,\n      classTeacherId: facultyUser._id,\n      academicYear: '2024-2025',\n    });\n    console.log('Created classes');\n\n    // Create subjects\n    const mathSubject = await storage.createSubject({\n      tenantId: tenant._id,\n      name: 'Mathematics',\n      code: 'MATH101',\n      description: 'Core mathematics curriculum',\n    });\n\n    const physicsSubject = await storage.createSubject({\n      tenantId: tenant._id,\n      name: 'Physics',\n      code: 'PHY101',\n      description: 'Introduction to physics',\n    });\n    console.log('Created subjects');\n\n    // Create parent user\n    const parentUser = await storage.createUser({\n      tenantId: tenant._id,\n      email: 'parent@school.com',\n      password: hashedPassword,\n      role: 'parent',\n      firstName: 'Jane',\n      lastName: 'Johnson',\n      phone: '+1-555-0104',\n      active: true,\n    });\n    console.log('Created parent user');\n\n    // Create student user\n    const studentUserAccount = await storage.createUser({\n      tenantId: tenant._id,\n      email: 'student@school.com',\n      password: hashedPassword,\n      role: 'student',\n      firstName: 'Sarah',\n      lastName: 'Johnson',\n      phone: '+1-555-0105',\n      active: true,\n    });\n\n    // Create student profile\n    const student = await storage.createStudent({\n      tenantId: tenant._id,\n      userId: studentUserAccount._id,\n      classId: class10A._id,\n      admissionNumber: 'STD001',\n      rollNumber: '15',\n      dateOfBirth: new Date('2008-05-15'),\n      gender: 'female',\n      bloodGroup: 'A+',\n      parentId: parentUser._id,\n      address: '456 Student Street, Springfield',\n      emergencyContact: '+1-555-0104',\n      admissionDate: new Date('2020-04-01'),\n    });\n    console.log('Created student');\n\n    // Create exam\n    const exam = await storage.createExam({\n      tenantId: tenant._id,\n      name: 'Mid-term Examination',\n      type: 'mid_term',\n      startDate: new Date('2025-02-01'),\n      endDate: new Date('2025-02-10'),\n      academicYear: '2024-2025',\n      description: 'First semester mid-term exams',\n      published: false,\n    });\n    console.log('Created exam');\n\n    // Create fee structure\n    const feeStructure = await storage.createFeeStructure({\n      tenantId: tenant._id,\n      classId: class10A._id,\n      name: 'Annual Tuition Fee',\n      amount: 5000,\n      academicYear: '2024-2025',\n      dueDate: new Date('2025-04-01'),\n      description: 'Annual tuition fee for Grade 10',\n    });\n    console.log('Created fee structure');\n\n    // Create announcement\n    const announcement = await storage.createAnnouncement({\n      tenantId: tenant._id,\n      title: 'Welcome to Springfield High School',\n      content: 'We are excited to have you here. This is a demo announcement.',\n      targetRole: undefined,\n      priority: 'high',\n      publishedBy: adminUser._id,\n      expiresAt: undefined,\n    });\n    console.log('Created announcement');\n\n    // Create super admin (not tied to any tenant)\n    const superAdminUser = await storage.createUser({\n      tenantId: undefined,\n      email: 'superadmin@school.com',\n      password: hashedPassword,\n      role: 'super_admin',\n      firstName: 'Super',\n      lastName: 'Admin',\n      phone: '+1-555-0100',\n      active: true,\n    });\n    console.log('Created super admin user');\n\n    console.log('\\n✅ Database seeded successfully!');\n    console.log('\\nDemo credentials:');\n    console.log('Super Admin: superadmin@school.com / demo123');\n    console.log('Admin: admin@school.com / demo123');\n    console.log('Principal: principal@school.com / demo123');\n    console.log('Teacher: teacher@school.com / demo123');\n    console.log('Student: student@school.com / demo123');\n    console.log('Parent: parent@school.com / demo123');\n  } catch (error) {\n    console.error('Seed error:', error);\n    throw error;\n  } finally {\n    process.exit(0);\n  }\n}\n\nseed();\n","size_bytes":5896},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/shared/DataTable.tsx":{"content":"import { ReactNode } from 'react';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport { Button } from '@/components/ui/button';\nimport { ChevronLeft, ChevronRight, FileX } from 'lucide-react';\n\ninterface Column<T> {\n  key: string;\n  header: string;\n  cell: (item: T) => ReactNode;\n  sortable?: boolean;\n}\n\ninterface DataTableProps<T> {\n  data: T[];\n  columns: Column<T>[];\n  isLoading?: boolean;\n  emptyMessage?: string;\n  testId?: string;\n  pagination?: {\n    page: number;\n    pageSize: number;\n    total: number;\n    onPageChange: (page: number) => void;\n  };\n}\n\nexport function DataTable<T>({\n  data,\n  columns,\n  isLoading,\n  emptyMessage = 'No data available',\n  testId = 'data-table',\n  pagination,\n}: DataTableProps<T>) {\n  if (isLoading) {\n    return (\n      <div className=\"border rounded-lg\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              {columns.map((column) => (\n                <TableHead key={column.key}>{column.header}</TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {[...Array(5)].map((_, i) => (\n              <TableRow key={i}>\n                {columns.map((column) => (\n                  <TableCell key={column.key}>\n                    <div className=\"h-4 bg-muted animate-pulse rounded\" />\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n    );\n  }\n\n  if (data.length === 0) {\n    return (\n      <div className=\"border rounded-lg p-12 text-center\">\n        <FileX className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n        <p className=\"text-muted-foreground\" data-testid={`${testId}-empty`}>{emptyMessage}</p>\n      </div>\n    );\n  }\n\n  const totalPages = pagination ? Math.ceil(pagination.total / pagination.pageSize) : 1;\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"border rounded-lg\">\n        <Table data-testid={testId}>\n          <TableHeader>\n            <TableRow>\n              {columns.map((column) => (\n                <TableHead key={column.key} className=\"font-semibold\">\n                  {column.header}\n                </TableHead>\n              ))}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {data.map((item, index) => (\n              <TableRow key={index} className=\"hover-elevate\" data-testid={`${testId}-row-${index}`}>\n                {columns.map((column) => (\n                  <TableCell key={column.key} data-testid={`${testId}-cell-${column.key}-${index}`}>\n                    {column.cell(item)}\n                  </TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n\n      {pagination && totalPages > 1 && (\n        <div className=\"flex items-center justify-between\">\n          <p className=\"text-sm text-muted-foreground\">\n            Showing {((pagination.page - 1) * pagination.pageSize) + 1} to {Math.min(pagination.page * pagination.pageSize, pagination.total)} of {pagination.total} results\n          </p>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => pagination.onPageChange(pagination.page - 1)}\n              disabled={pagination.page === 1}\n              data-testid=\"button-prev-page\"\n            >\n              <ChevronLeft className=\"h-4 w-4 mr-1\" />\n              Previous\n            </Button>\n            <span className=\"text-sm\">\n              Page {pagination.page} of {totalPages}\n            </span>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => pagination.onPageChange(pagination.page + 1)}\n              disabled={pagination.page >= totalPages}\n              data-testid=\"button-next-page\"\n            >\n              Next\n              <ChevronRight className=\"h-4 w-4 ml-1\" />\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4119},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { authenticateToken, requireRole, tenantIsolation, generateToken, type AuthRequest } from \"./middleware/auth\";\nimport { insertTenantSchema, AttendanceModel } from \"@shared/schema\";\nimport bcrypt from \"bcryptjs\";\nimport cookieParser from \"cookie-parser\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(cookieParser());\n\n  // Health check\n  app.get('/api/health', (_req, res) => {\n    res.json({ status: 'ok' });\n  });\n\n  // ============ Authentication Routes ============\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n\n      const token = generateToken({\n        id: user._id,\n        email: user.email,\n        role: user.role,\n        tenantId: user.tenantId || null,\n      });\n\n      res.cookie('auth_token', token, {\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\n      });\n\n      res.json({\n        user: {\n          id: user._id,\n          email: user.email,\n          role: user.role,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          tenantId: user.tenantId,\n          avatar: user.avatar,\n        },\n        token,\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/auth/logout', (_req, res) => {\n    res.clearCookie('auth_token');\n    res.json({ success: true });\n  });\n\n  // ============ Dashboard Stats Routes ============\n  app.get('/api/dashboard/admin/stats', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const [totalStudents, totalFaculty, monthlyRevenue, pendingFees] = await Promise.all([\n        storage.getStudentsCount(tenantId),\n        storage.getFacultyCount(tenantId),\n        storage.getMonthlyRevenue(tenantId),\n        storage.getPendingFees(tenantId),\n      ]);\n      \n      res.json({\n        totalStudents,\n        totalFaculty,\n        monthlyRevenue,\n        pendingFees,\n      });\n    } catch (error) {\n      console.error('Dashboard stats error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/dashboard/superadmin/stats', authenticateToken, requireRole(['super_admin']), async (_req: AuthRequest, res) => {\n    try {\n      const [totalSchools, totalUsers, totalMRR] = await Promise.all([\n        storage.getTotalTenantsCount(),\n        storage.getTotalUsersCount(),\n        storage.getTotalMRR(),\n      ]);\n      \n      res.json({\n        totalSchools,\n        totalUsers,\n        totalMRR,\n      });\n    } catch (error) {\n      console.error('SuperAdmin dashboard stats error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/tenants/with-stats', authenticateToken, requireRole(['super_admin']), async (_req: AuthRequest, res) => {\n    try {\n      const tenants = await storage.getTenantsWithStats();\n      res.json({ tenants });\n    } catch (error) {\n      console.error('Get tenants with stats error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/dashboard/admin/recent-admissions', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 5;\n      const admissions = await storage.getRecentAdmissions(tenantId, limit);\n      res.json({ admissions });\n    } catch (error) {\n      console.error('Recent admissions error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/dashboard/admin/fee-collection-trends', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const months = req.query.months ? parseInt(req.query.months as string) : 6;\n      const trends = await storage.getFeeCollectionTrends(tenantId, months);\n      res.json({ trends });\n    } catch (error) {\n      console.error('Fee collection trends error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/dashboard/admin/recent-activities', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 5;\n      const activities = await storage.getRecentActivities(tenantId, limit);\n      res.json({ activities });\n    } catch (error) {\n      console.error('Recent activities error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Reports Routes ============\n  app.get('/api/reports/attendance', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const months = req.query.months ? parseInt(req.query.months as string) : 6;\n      const data = await storage.getAttendanceStats(tenantId, months);\n      res.json({ data });\n    } catch (error) {\n      console.error('Attendance stats error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/reports/performance', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const data = await storage.getPerformanceData(tenantId);\n      res.json({ data });\n    } catch (error) {\n      console.error('Performance data error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/reports/class-distribution', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const data = await storage.getClassDistribution(tenantId);\n      res.json({ data });\n    } catch (error) {\n      console.error('Class distribution error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/reports/fee-collection', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const months = req.query.months ? parseInt(req.query.months as string) : 6;\n      const data = await storage.getFeeCollectionStats(tenantId, months);\n      res.json(data);\n    } catch (error) {\n      console.error('Fee collection stats error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Faculty Routes ============\n  app.get('/api/faculty', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const faculty = await storage.getFacultyByTenant(tenantId);\n      res.json({ faculty });\n    } catch (error) {\n      console.error('Get faculty error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/faculty', authenticateToken, requireRole(['admin', 'principal']), tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { email, password, firstName, lastName, phone, role } = req.body;\n\n      const hashedPassword = await bcrypt.hash(password, 10);\n      const user = await storage.createUser({\n        tenantId,\n        email,\n        password: hashedPassword,\n        role: role || 'faculty',\n        firstName,\n        lastName,\n        phone,\n        active: true,\n      });\n\n      res.status(201).json({ user });\n    } catch (error) {\n      console.error('Create faculty error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.patch('/api/faculty/:id', authenticateToken, requireRole(['admin', 'principal']), tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const tenantId = req.tenantId!;\n      const updateData = req.body;\n      \n      if (updateData.password) {\n        updateData.password = await bcrypt.hash(updateData.password, 10);\n      }\n\n      const user = await storage.updateUser(id, tenantId, updateData);\n      res.json({ user });\n    } catch (error) {\n      console.error('Update faculty error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.delete('/api/faculty/:id', authenticateToken, requireRole(['admin', 'principal']), tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const { id } = req.params;\n      const tenantId = req.tenantId!;\n      await storage.deleteUser(id, tenantId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete faculty error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Students Routes ============\n  app.get('/api/students', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      \n      // Sanitize pagination parameters\n      let limit: number | undefined = undefined;\n      let offset: number | undefined = undefined;\n      \n      if (req.query.limit) {\n        const parsedLimit = parseInt(req.query.limit as string);\n        if (!isNaN(parsedLimit) && parsedLimit > 0) {\n          limit = Math.min(parsedLimit, 1000); // Cap at 1000\n        }\n      }\n      \n      if (req.query.offset) {\n        const parsedOffset = parseInt(req.query.offset as string);\n        if (!isNaN(parsedOffset) && parsedOffset >= 0) {\n          offset = parsedOffset;\n        }\n      }\n      \n      const [students, total] = await Promise.all([\n        storage.getStudentsWithDetailsOptimized(tenantId, limit, offset),\n        storage.getStudentsCount(tenantId)\n      ]);\n      \n      res.json({ students, total });\n    } catch (error) {\n      console.error('Get students error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/students', authenticateToken, requireRole(['admin']), tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { email, password, firstName, lastName, ...studentData } = req.body;\n\n      // Create user account first\n      const hashedPassword = await bcrypt.hash(password, 10);\n      const user = await storage.createUser({\n        tenantId,\n        email,\n        password: hashedPassword,\n        role: 'student',\n        firstName,\n        lastName,\n        phone: studentData.emergencyContact || null,\n        active: true,\n      });\n\n      // Create student profile\n      const student = await storage.createStudent({\n        ...studentData,\n        tenantId,\n        userId: user._id,\n      });\n\n      res.status(201).json(student);\n    } catch (error) {\n      console.error('Create student error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/students/:id', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const student = await storage.getStudent(req.params.id, tenantId);\n      if (!student) {\n        return res.status(404).json({ error: 'Student not found' });\n      }\n      res.json(student);\n    } catch (error) {\n      console.error('Get student error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Classes Routes ============\n  app.get('/api/classes', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const classes = await storage.getClassesByTenant(tenantId);\n      res.json({ classes });\n    } catch (error) {\n      console.error('Get classes error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/classes', authenticateToken, tenantIsolation, requireRole(['admin', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const classData = { ...req.body, tenantId };\n      const newClass = await storage.createClass(classData);\n      res.status(201).json(newClass);\n    } catch (error) {\n      console.error('Create class error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Subjects Routes ============\n  app.get('/api/subjects', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const subjects = await storage.getSubjectsByTenant(tenantId);\n      res.json({ subjects });\n    } catch (error) {\n      console.error('Get subjects error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/subjects', authenticateToken, tenantIsolation, requireRole(['admin', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const subjectData = { ...req.body, tenantId };\n      const subject = await storage.createSubject(subjectData);\n      res.status(201).json(subject);\n    } catch (error) {\n      console.error('Create subject error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Attendance Routes ============\n  app.get('/api/attendance', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { classId, date } = req.query;\n      const attendanceRecords = await storage.getAttendanceByDate(\n        classId as string,\n        date as string,\n        tenantId\n      );\n      res.json({ attendance: attendanceRecords });\n    } catch (error) {\n      console.error('Get attendance error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/attendance', authenticateToken, tenantIsolation, requireRole(['admin', 'faculty', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const attendanceData = { ...req.body, tenantId, markedBy: req.user!.id };\n      const attendance = await storage.createAttendance(attendanceData);\n      res.status(201).json(attendance);\n    } catch (error) {\n      console.error('Create attendance error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/attendance/bulk', authenticateToken, tenantIsolation, requireRole(['admin', 'faculty', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { attendanceRecords } = req.body;\n      \n      if (!Array.isArray(attendanceRecords) || attendanceRecords.length === 0) {\n        return res.status(400).json({ error: 'attendanceRecords must be a non-empty array' });\n      }\n\n      const result = await storage.bulkCreateAttendance(\n        attendanceRecords,\n        tenantId,\n        req.user!.id\n      );\n\n      res.status(201).json(result);\n    } catch (error) {\n      console.error('Bulk attendance error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Timetable Routes ============\n  app.get('/api/timetable', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { classId } = req.query;\n      \n      if (!classId) {\n        return res.status(400).json({ error: 'classId is required' });\n      }\n\n      const timetable = await storage.getTimetableByClass(classId as string, tenantId);\n      res.json({ timetable });\n    } catch (error) {\n      console.error('Get timetable error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/timetable', authenticateToken, tenantIsolation, requireRole(['admin', 'principal', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const timetableData = { ...req.body, tenantId };\n      \n      const conflictCheck = await storage.checkTimetableConflict(\n        timetableData.classId,\n        timetableData.dayOfWeek,\n        timetableData.startTime,\n        timetableData.endTime,\n        tenantId,\n        null\n      );\n      \n      if (conflictCheck) {\n        return res.status(409).json({ error: 'Time slot conflict detected for this class' });\n      }\n\n      const timetable = await storage.createTimetable(timetableData);\n      res.status(201).json(timetable);\n    } catch (error) {\n      console.error('Create timetable error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/timetable/:id', authenticateToken, tenantIsolation, requireRole(['admin', 'principal', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      const conflictCheck = await storage.checkTimetableConflict(\n        updateData.classId,\n        updateData.dayOfWeek,\n        updateData.startTime,\n        updateData.endTime,\n        tenantId,\n        id\n      );\n      \n      if (conflictCheck) {\n        return res.status(409).json({ error: 'Time slot conflict detected for this class' });\n      }\n\n      const updatedTimetable = await storage.updateTimetable(id, updateData, tenantId);\n      if (!updatedTimetable) {\n        return res.status(404).json({ error: 'Timetable entry not found' });\n      }\n      res.json(updatedTimetable);\n    } catch (error) {\n      console.error('Update timetable error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.delete('/api/timetable/:id', authenticateToken, tenantIsolation, requireRole(['admin', 'principal', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { id } = req.params;\n      \n      const deleted = await storage.deleteTimetable(id, tenantId);\n      if (!deleted) {\n        return res.status(404).json({ error: 'Timetable entry not found' });\n      }\n      res.json({ message: 'Timetable entry deleted successfully' });\n    } catch (error) {\n      console.error('Delete timetable error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Exams Routes ============\n  app.get('/api/exams', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const exams = await storage.getExamsByTenant(tenantId);\n      res.json({ exams });\n    } catch (error) {\n      console.error('Get exams error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/exams', authenticateToken, tenantIsolation, requireRole(['admin', 'principal', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const examData = { ...req.body, tenantId };\n      const exam = await storage.createExam(examData);\n      res.status(201).json(exam);\n    } catch (error) {\n      console.error('Create exam error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Exam Results Routes ============\n  app.get('/api/exam-results/:examId', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const results = await storage.getResultsByExam(req.params.examId, tenantId);\n      res.json({ results });\n    } catch (error) {\n      console.error('Get exam results error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/exam-results', authenticateToken, tenantIsolation, requireRole(['admin', 'faculty', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const resultData = { ...req.body, tenantId };\n      const result = await storage.createExamResult(resultData);\n      res.status(201).json(result);\n    } catch (error) {\n      console.error('Create exam result error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Fee Structures Routes ============\n  app.get('/api/fee-structures', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const feeStructures = await storage.getFeeStructuresByTenant(tenantId);\n      res.json({ feeStructures });\n    } catch (error) {\n      console.error('Get fee structures error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/fee-structures', authenticateToken, tenantIsolation, requireRole(['admin', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const feeStructureData = { ...req.body, tenantId };\n      const feeStructure = await storage.createFeeStructure(feeStructureData);\n      res.status(201).json(feeStructure);\n    } catch (error) {\n      console.error('Create fee structure error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Fee Payments Routes ============\n  app.get('/api/fee-payments', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const payments = await storage.getFeePaymentsByTenant(tenantId, limit);\n      res.json({ payments });\n    } catch (error) {\n      console.error('Get fee payments error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/fee-payments/student/:studentId', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const payments = await storage.getFeePaymentsByStudent(req.params.studentId, tenantId);\n      res.json({ payments });\n    } catch (error) {\n      console.error('Get fee payments error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/fee-payments', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const paymentData = { ...req.body, tenantId };\n      const payment = await storage.createFeePayment(paymentData);\n      res.status(201).json(payment);\n    } catch (error) {\n      console.error('Create fee payment error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/fee-payments/search', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const query = req.query.q as string || '';\n      const status = req.query.status as string || '';\n      const payments = await storage.searchFeePayments(tenantId, query, status);\n      res.json({ payments });\n    } catch (error) {\n      console.error('Search fee payments error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Announcements Routes ============\n  app.get('/api/announcements', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const announcements = await storage.getAnnouncementsByTenant(tenantId);\n      res.json({ announcements });\n    } catch (error) {\n      console.error('Get announcements error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/announcements', authenticateToken, tenantIsolation, requireRole(['admin', 'principal', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const announcementData = { ...req.body, tenantId, publishedBy: req.user!.id };\n      const announcement = await storage.createAnnouncement(announcementData);\n      res.status(201).json(announcement);\n    } catch (error) {\n      console.error('Create announcement error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ User Profile Routes ============\n  app.get('/api/profile', authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      \n      const { password, ...userProfile } = user;\n      res.json(userProfile);\n    } catch (error) {\n      console.error('Get profile error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/profile', authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { firstName, lastName, phone, avatar } = req.body;\n      \n      const updatedUser = await storage.updateUserProfile(userId, {\n        firstName,\n        lastName,\n        phone,\n        avatar,\n      });\n      \n      const { password, ...userProfile } = updatedUser;\n      res.json(userProfile);\n    } catch (error) {\n      console.error('Update profile error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ User Preferences Routes ============\n  app.get('/api/preferences', authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      let prefs = await storage.getUserPreferences(userId);\n      \n      if (!prefs) {\n        prefs = await storage.createUserPreferences({ \n          userId,\n          emailNotifications: true,\n          pushNotifications: true,\n        });\n      }\n      \n      res.json(prefs);\n    } catch (error) {\n      console.error('Get preferences error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.put('/api/preferences', authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { theme, language, emailNotifications, pushNotifications, timezone, dateFormat } = req.body;\n      \n      let prefs = await storage.getUserPreferences(userId);\n      \n      if (!prefs) {\n        prefs = await storage.createUserPreferences({\n          userId,\n          theme,\n          language,\n          emailNotifications,\n          pushNotifications,\n          timezone,\n          dateFormat,\n        });\n      } else {\n        prefs = await storage.updateUserPreferences(userId, {\n          theme,\n          language,\n          emailNotifications,\n          pushNotifications,\n          timezone,\n          dateFormat,\n        });\n      }\n      \n      res.json(prefs);\n    } catch (error) {\n      console.error('Update preferences error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Tenants Routes (Super Admin only) ============\n  app.get('/api/tenants', authenticateToken, requireRole(['super_admin']), async (_req: AuthRequest, res) => {\n    try {\n      const tenantsData = await storage.getAllTenants();\n      res.json({ tenants: tenantsData });\n    } catch (error) {\n      console.error('Get tenants error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/tenants', authenticateToken, requireRole(['super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const validatedData = insertTenantSchema.parse(req.body);\n      const tenant = await storage.createTenant(validatedData);\n      res.status(201).json(tenant);\n    } catch (error: any) {\n      console.error('Create tenant error:', error);\n      if (error.name === 'ZodError') {\n        return res.status(400).json({ error: 'Validation failed', details: error.errors });\n      }\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Messages Routes ============\n  app.get('/api/messages', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const tenantId = req.tenantId!;\n      const messages = await storage.getMessagesByUser(userId, tenantId);\n      res.json({ messages });\n    } catch (error) {\n      console.error('Get messages error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/messages/unread-count', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const tenantId = req.tenantId!;\n      const count = await storage.getUnreadMessagesCount(userId, tenantId);\n      res.json({ count });\n    } catch (error) {\n      console.error('Get unread messages count error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/messages', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const senderId = req.user!.id;\n      const { recipientId, subject, content } = req.body;\n      \n      const message = await storage.createMessage({\n        tenantId,\n        senderId,\n        recipientId,\n        subject,\n        content,\n        read: false,\n        createdAt: new Date(),\n      });\n      \n      res.status(201).json(message);\n    } catch (error) {\n      console.error('Create message error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.patch('/api/messages/:id/read', authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      await storage.markMessageAsRead(req.params.id, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Mark message as read error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Notifications Routes ============\n  app.get('/api/notifications', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const tenantId = req.tenantId!;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 20;\n      const notifications = await storage.getNotificationsByUser(userId, tenantId, limit);\n      res.json({ notifications });\n    } catch (error) {\n      console.error('Get notifications error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/notifications/unread-count', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const tenantId = req.tenantId!;\n      const count = await storage.getUnreadNotificationsCount(userId, tenantId);\n      res.json({ count });\n    } catch (error) {\n      console.error('Get unread notifications count error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', authenticateToken, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      await storage.markNotificationAsRead(req.params.id, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Mark notification as read error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Student Dashboard Routes ============\n  app.get('/api/student/timetable', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const tenantId = req.tenantId!;\n      \n      const student = await storage.getStudentByUserId(userId, tenantId);\n      if (!student) {\n        return res.status(404).json({ error: 'Student not found' });\n      }\n      \n      const timetable = await storage.getStudentTimetable(student._id, tenantId);\n      res.json({ timetable });\n    } catch (error) {\n      console.error('Get student timetable error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/student/exam-results', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const tenantId = req.tenantId!;\n      \n      const student = await storage.getStudentByUserId(userId, tenantId);\n      if (!student) {\n        return res.status(404).json({ error: 'Student not found' });\n      }\n      \n      const results = await storage.getStudentExamResults(student._id, tenantId);\n      res.json({ results });\n    } catch (error) {\n      console.error('Get student exam results error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/student/transport', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const tenantId = req.tenantId!;\n      \n      const student = await storage.getStudentByUserId(userId, tenantId);\n      if (!student) {\n        return res.status(404).json({ error: 'Student not found' });\n      }\n      \n      const transport = await storage.getStudentTransportDetails(student._id, tenantId);\n      res.json({ transport });\n    } catch (error) {\n      console.error('Get student transport error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Transport Management Routes ============\n  app.get('/api/transport/routes', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const routes = await storage.getAllTransportRoutes(tenantId);\n      res.json({ routes });\n    } catch (error) {\n      console.error('Get transport routes error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/transport/routes', authenticateToken, tenantIsolation, requireRole(['admin', 'principal']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const routeData = { ...req.body, tenantId };\n      const route = await storage.createTransportRoute(routeData);\n      res.status(201).json(route);\n    } catch (error) {\n      console.error('Create transport route error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/transport/assignments', authenticateToken, tenantIsolation, requireRole(['admin', 'principal', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { studentId, routeId, pickupStop, dropStop } = req.body;\n      \n      const student = await storage.getStudent(studentId);\n      if (!student || student.tenantId !== tenantId) {\n        return res.status(403).json({ error: 'Access denied: Student not in your tenant' });\n      }\n      \n      const assignmentData = {\n        tenantId,\n        studentId,\n        routeId,\n        pickupStop,\n        dropStop,\n        active: true,\n        createdAt: new Date(),\n      };\n      \n      const assignment = await storage.createStudentTransport(assignmentData);\n      res.status(201).json(assignment);\n    } catch (error) {\n      console.error('Create transport assignment error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.delete('/api/transport/assignments/:id', authenticateToken, tenantIsolation, requireRole(['admin', 'principal', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { id } = req.params;\n      \n      await storage.deleteStudentTransport(id, tenantId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete transport assignment error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/transport/assignments/:routeId', authenticateToken, tenantIsolation, requireRole(['admin', 'principal', 'super_admin']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { routeId } = req.params;\n      \n      const students = await storage.getRouteStudents(routeId, tenantId);\n      res.json({ students });\n    } catch (error) {\n      console.error('Get route students error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/student/profile', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const tenantId = req.tenantId!;\n      \n      const student = await storage.getStudentByUserId(userId, tenantId);\n      if (!student) {\n        return res.status(404).json({ error: 'Student not found' });\n      }\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      \n      // Get transport details\n      const transport = await storage.getStudentTransportDetails(student._id, tenantId);\n      \n      // Get fee summary\n      const feeClass = await storage.getClass(student.classId, tenantId);\n      const feeStructures = await storage.getFeeStructuresByTenant(tenantId);\n      const classFeeStructures = feeStructures.filter((fs: any) => fs.classId === student.classId);\n      const totalFees = classFeeStructures.reduce((sum: number, fs: any) => sum + (fs.amount || 0), 0);\n      \n      const feePayments = await storage.getFeePaymentsByStudent(student._id, tenantId);\n      const paidAmount = feePayments\n        .filter((fp: any) => fp.status === 'paid')\n        .reduce((sum: number, fp: any) => sum + (fp.amount || 0), 0);\n      const pendingAmount = totalFees - paidAmount;\n      \n      // Get recent 5 payments\n      const recentPayments = feePayments\n        .sort((a: any, b: any) => new Date(b.paymentDate).getTime() - new Date(a.paymentDate).getTime())\n        .slice(0, 5);\n      \n      const { password, ...userWithoutPassword } = user;\n      res.json({ \n        student, \n        user: userWithoutPassword,\n        transport: transport ? {\n          routeName: transport.routeId?.routeName,\n          routeNumber: transport.routeId?.routeNumber,\n          vehicleNumber: transport.routeId?.vehicleNumber,\n          pickupStop: transport.pickupStop,\n          dropStop: transport.dropStop,\n          fare: transport.routeId?.fare\n        } : null,\n        fees: {\n          totalFees,\n          paidAmount,\n          pendingAmount,\n          recentPayments: recentPayments.map((fp: any) => ({\n            _id: fp._id,\n            amount: fp.amount,\n            paymentDate: fp.paymentDate,\n            paymentMode: fp.paymentMode,\n            status: fp.status,\n            receiptNumber: fp.receiptNumber,\n            remarks: fp.remarks\n          }))\n        }\n      });\n    } catch (error) {\n      console.error('Get student profile error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Payroll Routes ============\n  app.get('/api/payroll', authenticateToken, tenantIsolation, requireRole(['admin', 'principal']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { month, year } = req.query;\n      const payrolls = await storage.getPayrollByTenant(tenantId, month as string, year ? Number(year) : undefined);\n      res.json({ payrolls });\n    } catch (error) {\n      console.error('Get payrolls error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.get('/api/payroll/my', authenticateToken, tenantIsolation, requireRole(['faculty']), async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const tenantId = req.tenantId!;\n      const payrolls = await storage.getPayrollByUser(userId, tenantId);\n      res.json({ payrolls });\n    } catch (error) {\n      console.error('Get my payrolls error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/payroll', authenticateToken, tenantIsolation, requireRole(['admin', 'principal']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { userId, month, year, basicSalary, allowances, deductions, netSalary, remarks } = req.body;\n      \n      const payroll = await storage.createPayroll({\n        tenantId,\n        userId,\n        month,\n        year,\n        basicSalary,\n        allowances: allowances || 0,\n        deductions: deductions || 0,\n        netSalary,\n        status: 'draft',\n        remarks,\n        createdAt: new Date(),\n      });\n      \n      res.status(201).json(payroll);\n    } catch (error) {\n      console.error('Create payroll error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.patch('/api/payroll/:id', authenticateToken, tenantIsolation, requireRole(['admin', 'principal']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      const payroll = await storage.updatePayroll(id, tenantId, updateData);\n      res.json(payroll);\n    } catch (error) {\n      console.error('Update payroll error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.delete('/api/payroll/:id', authenticateToken, tenantIsolation, requireRole(['admin', 'principal']), async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { id } = req.params;\n      \n      await storage.deletePayroll(id, tenantId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete payroll error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  // ============ Leave Management Routes ============\n  app.get('/api/leave-requests', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const tenantId = req.tenantId!;\n      const userRole = req.user!.role;\n      \n      // Faculty sees only their own leave requests\n      if (userRole === 'faculty') {\n        const leaveRequests = await storage.getLeaveRequestsByUser(userId, tenantId);\n        return res.json({ leaveRequests });\n      }\n      \n      // Admin/Principal see all leave requests in their tenant\n      const { status } = req.query;\n      const leaveRequests = await storage.getLeaveRequestsByTenant(tenantId, status as string);\n      res.json({ leaveRequests });\n    } catch (error) {\n      console.error('Get leave requests error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/leave-requests', authenticateToken, tenantIsolation, requireRole(['faculty']), async (req: AuthRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const tenantId = req.tenantId!;\n      const { leaveType, startDate, endDate, reason } = req.body;\n      \n      const leaveRequest = await storage.createLeaveRequest({\n        tenantId,\n        userId,\n        leaveType,\n        startDate: new Date(startDate),\n        endDate: new Date(endDate),\n        reason,\n        status: 'pending',\n        createdAt: new Date(),\n      });\n      \n      res.status(201).json(leaveRequest);\n    } catch (error) {\n      console.error('Create leave request error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.patch('/api/leave-requests/:id', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { id } = req.params;\n      const updateData = req.body;\n      \n      // If approving/rejecting, add reviewer info\n      if (updateData.status && updateData.status !== 'pending') {\n        updateData.reviewedBy = req.user!.id;\n        updateData.reviewedAt = new Date();\n      }\n      \n      const leaveRequest = await storage.updateLeaveRequest(id, tenantId, updateData);\n      res.json(leaveRequest);\n    } catch (error) {\n      console.error('Update leave request error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  app.delete('/api/leave-requests/:id', authenticateToken, tenantIsolation, async (req: AuthRequest, res) => {\n    try {\n      const tenantId = req.tenantId!;\n      const { id } = req.params;\n      \n      await storage.deleteLeaveRequest(id, tenantId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete leave request error:', error);\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":45394},"client/src/pages/Students.tsx":{"content":"import { useState, startTransition } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { DataTable } from '@/components/shared/DataTable';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Plus, Search, Download, Filter } from 'lucide-react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Link, useLocation } from 'wouter';\nimport { useAuth } from '@/lib/auth';\n\nexport default function Students() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [classFilter, setClassFilter] = useState('all');\n  const [page, setPage] = useState(1);\n\n  const { data, isLoading } = useQuery({\n    queryKey: ['/api/students'],\n  });\n\n  const { data: classesData } = useQuery<{ classes: Array<{ id: string; name: string }> }>({\n    queryKey: ['/api/classes'],\n  });\n\n  const allStudents = data?.students || [];\n  \n  const canAddStudent = user && ['admin', 'principal'].includes(user.role);\n  \n  const filteredStudents = allStudents.filter(student => {\n    const matchesSearch = searchQuery === '' || \n      student.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      student.admissionNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (student.email && student.email.toLowerCase().includes(searchQuery.toLowerCase()));\n    \n    const matchesClass = classFilter === 'all' || student.class === classFilter;\n    \n    return matchesSearch && matchesClass;\n  });\n  \n  const students = filteredStudents;\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-7xl\">\n        <Breadcrumb items={[{ label: 'Students' }]} />\n\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-semibold\">Students</h1>\n            <p className=\"text-muted-foreground mt-1\">Manage student information and records</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button variant=\"outline\" data-testid=\"button-export-students\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export\n            </Button>\n            {canAddStudent && (\n              <Link href=\"/students/add\">\n                <Button data-testid=\"button-add-student\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Student\n                </Button>\n              </Link>\n            )}\n          </div>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>All Students</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search by name, admission number, or email...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-9\"\n                  data-testid=\"input-search-students\"\n                />\n              </div>\n              <Select value={classFilter} onValueChange={setClassFilter}>\n                <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"select-class-filter\">\n                  <Filter className=\"mr-2 h-4 w-4\" />\n                  <SelectValue placeholder=\"Filter by class\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Classes</SelectItem>\n                  {classesData?.classes?.map((classItem) => (\n                    <SelectItem key={classItem.id} value={classItem.name}>\n                      {classItem.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <DataTable\n              data={students}\n              columns={[\n                {\n                  key: 'student',\n                  header: 'Student',\n                  cell: (item) => (\n                    <div className=\"flex items-center gap-3\">\n                      <Avatar>\n                        <AvatarImage src={item.avatar} />\n                        <AvatarFallback>\n                          {item.name.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-medium\">{item.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{item.admissionNumber}</p>\n                      </div>\n                    </div>\n                  ),\n                },\n                {\n                  key: 'class',\n                  header: 'Class & Roll',\n                  cell: (item) => (\n                    <div>\n                      <p className=\"font-medium\">{item.class}</p>\n                      <p className=\"text-sm text-muted-foreground\">Roll No: {item.rollNumber}</p>\n                    </div>\n                  ),\n                },\n                {\n                  key: 'contact',\n                  header: 'Contact',\n                  cell: (item) => (\n                    <div>\n                      <p className=\"text-sm\">{item.email}</p>\n                      <p className=\"text-sm text-muted-foreground\">{item.phone}</p>\n                    </div>\n                  ),\n                },\n                {\n                  key: 'status',\n                  header: 'Status',\n                  cell: (item) => (\n                    <Badge variant={item.status === 'active' ? 'default' : 'secondary'}>\n                      {item.status}\n                    </Badge>\n                  ),\n                },\n                {\n                  key: 'actions',\n                  header: 'Actions',\n                  cell: (item) => (\n                    <div className=\"flex items-center gap-2\">\n                      <Link href={`/students/${item.id}`}>\n                        <Button variant=\"ghost\" size=\"sm\" data-testid={`button-view-${item.id}`}>\n                          View\n                        </Button>\n                      </Link>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\" \n                        onClick={() => startTransition(() => setLocation(`/students/${item.id}/edit`))}\n                        data-testid={`button-edit-${item.id}`}\n                      >\n                        Edit\n                      </Button>\n                    </div>\n                  ),\n                },\n              ]}\n              isLoading={isLoading}\n              emptyMessage=\"No students found\"\n              testId=\"students-table\"\n              pagination={{\n                page,\n                pageSize: 10,\n                total: data?.total || students.length,\n                onPageChange: setPage,\n              }}\n            />\n          </CardContent>\n        </Card>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":7501},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/dashboards/ParentDashboard.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { ClipboardCheck, FileText, IndianRupee, MessageSquare, Calendar } from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\n\nexport function ParentDashboard() {\n  const children = [\n    { id: '1', name: 'Sarah Johnson', class: 'Grade 10-A' },\n    { id: '2', name: 'Michael Johnson', class: 'Grade 8-B' },\n  ];\n\n  const attendanceSummary = {\n    thisMonth: 94.2,\n    lastMonth: 92.5,\n    present: 17,\n    absent: 1,\n    total: 18,\n  };\n\n  const recentResults = [\n    { id: '1', exam: 'Mathematics Unit Test 3', marks: '85/100', grade: 'A', percentage: 85 },\n    { id: '2', exam: 'Physics Mid-term', marks: '78/100', grade: 'B+', percentage: 78 },\n    { id: '3', exam: 'English Literature Essay', marks: '92/100', grade: 'A+', percentage: 92 },\n  ];\n\n  const feeStatus = {\n    totalAmount: 5000,\n    paidAmount: 5000,\n    pendingAmount: 0,\n    nextDueDate: 'Feb 1, 2025',\n    status: 'paid',\n  };\n\n  const upcomingEvents = [\n    { id: '1', title: 'Parent-Teacher Meeting', date: 'Jan 20, 2025', time: '10:00 AM' },\n    { id: '2', title: 'Sports Day', date: 'Jan 25, 2025', time: '09:00 AM' },\n    { id: '3', title: 'Science Exhibition', date: 'Feb 5, 2025', time: '11:00 AM' },\n  ];\n\n  return (\n    <div className=\"p-6 space-y-8 max-w-7xl\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-semibold mb-2\">Parent Dashboard</h1>\n          <p className=\"text-muted-foreground\">Monitor your child's academic progress</p>\n        </div>\n        <Select defaultValue={children[0].id}>\n          <SelectTrigger className=\"w-64\" data-testid=\"select-child\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            {children.map((child) => (\n              <SelectItem key={child.id} value={child.id}>\n                {child.name} ({child.class})\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"hover-elevate\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"space-y-2 flex-1\">\n                <p className=\"text-sm text-muted-foreground font-medium\">Attendance This Month</p>\n                <p className=\"text-3xl font-bold\">{attendanceSummary.thisMonth}%</p>\n                <Progress value={attendanceSummary.thisMonth} className=\"h-2\" />\n                <p className=\"text-xs text-muted-foreground\">\n                  {attendanceSummary.present} Present • {attendanceSummary.absent} Absent\n                </p>\n              </div>\n              <div className=\"p-3 bg-primary/10 rounded-lg\">\n                <ClipboardCheck className=\"h-6 w-6 text-primary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-muted-foreground font-medium\">Overall Performance</p>\n                <p className=\"text-3xl font-bold\">85%</p>\n                <p className=\"text-xs text-green-600\">↑ 3% vs last term</p>\n              </div>\n              <div className=\"p-3 bg-primary/10 rounded-lg\">\n                <FileText className=\"h-6 w-6 text-primary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"space-y-2\">\n                <p className=\"text-sm text-muted-foreground font-medium\">Fee Status</p>\n                <Badge variant=\"default\" className=\"text-base px-3 py-1\">\n                  {feeStatus.status === 'paid' ? 'Paid' : 'Pending'}\n                </Badge>\n                <p className=\"text-xs text-muted-foreground\">Next due: {feeStatus.nextDueDate}</p>\n                {feeStatus.status !== 'paid' && (\n                  <Button size=\"sm\" className=\"mt-2 w-full\">\n                    Pay Now\n                  </Button>\n                )}\n              </div>\n              <div className=\"p-3 bg-primary/10 rounded-lg\">\n                <IndianRupee className=\"h-6 w-6 text-primary\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Exam Results</CardTitle>\n            <CardDescription>Latest academic performance</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentResults.map((result) => (\n                <div key={result.id} className=\"p-4 rounded-lg hover-elevate border\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div>\n                      <p className=\"font-medium\">{result.exam}</p>\n                      <p className=\"text-sm text-muted-foreground mt-1\">Marks: {result.marks}</p>\n                    </div>\n                    <Badge variant=\"outline\" className=\"text-base\">\n                      {result.grade}\n                    </Badge>\n                  </div>\n                  <Progress value={result.percentage} className=\"h-2\" />\n                </div>\n              ))}\n            </div>\n            <Button variant=\"outline\" className=\"w-full mt-4\">\n              View All Results\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              <CardTitle>Upcoming Events</CardTitle>\n            </div>\n            <CardDescription>Mark your calendar</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {upcomingEvents.map((event) => (\n                <div key={event.id} className=\"flex items-center justify-between p-3 rounded-lg hover-elevate border\">\n                  <div>\n                    <p className=\"font-medium\">{event.title}</p>\n                    <p className=\"text-sm text-muted-foreground\">{event.time}</p>\n                  </div>\n                  <span className=\"text-sm font-medium\">{event.date}</span>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle>Communication</CardTitle>\n              <CardDescription>Messages from teachers and school</CardDescription>\n            </div>\n            <Button variant=\"outline\" size=\"sm\">\n              <MessageSquare className=\"mr-2 h-4 w-4\" />\n              Send Message\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <MessageSquare className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n            <p>No new messages</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7643},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"replit.md":{"content":"# School ERP SaaS System\n\n## Overview\n\nA comprehensive multi-tenant School ERP (Enterprise Resource Planning) system built as a SaaS platform. The application serves K-12 educational institutions (50-5000+ students) with modules for student management, attendance tracking, academics, fee management, examinations, communication, faculty management, payroll, and reporting. The system supports multiple user roles (super admin, admin, principal, faculty, student, parent) with role-based access control and tenant isolation.\n\n## Recent Changes\n\n### Bug Fixes and Feature Enhancements (October 31, 2025 - Session 2)\n- **Attendance Status Fix**: Fixed attendance marking buttons stuck on 'present' - modified handleStatusChange to immutably update state when clicking absent/late/half-day status buttons\n- **Add Exam Feature**: Implemented complete exam creation UI for admin/principal roles with dialog form, validation, React Query mutation, cache invalidation, and data-testid attributes for testing\n- **Add Fee Structure Feature**: Made \"Add Fee Structure\" button functional with complete dialog, form with class selection dropdown, backend integration, and proper mutation handling\n- **Payroll Generation Fix**: Fixed 500 error during payroll generation by correcting faculty object property access (changed `faculty._id` to `faculty.id || faculty._id` to handle both MongoDB and API formats)\n- **Transport Route Management**: Added complete transport management system:\n  - Backend: `getAllTransportRoutes` and `createTransportRoute` storage methods\n  - API Routes: `GET /api/transport/routes` and `POST /api/transport/routes` with authentication and authorization\n  - Frontend: Dialog with comprehensive form for creating routes (route name/number, vehicle, driver, capacity, stops, fare) with all data-testid attributes\n- **Faculty Leave Requests Fix**: Resolved issue where faculty users couldn't see their own leave requests - removed redundant frontend filtering since backend already filters by user role, and fixed mutation bug by removing incorrect `.json()` calls on apiRequest results\n\n### Timetable and Attendance System Enhancements (October 31, 2025 - Session 1)\n- **Timetable UI Redesign**: Completely redesigned timetable page with modern day-wise layout showing colored time slot blocks organized by day with time ranges, durations, subject names, teacher names, and room locations\n- **Bulk Attendance API**: Implemented secure bulk attendance endpoint (`POST /api/attendance/bulk`) with comprehensive tenant isolation validation through storage layer\n- **Security Enhancement**: Added `bulkCreateAttendance` method to storage layer that validates every student and class belongs to the tenant before any database operations, preventing cross-tenant data access\n- **Timetable Data Population**: Verified timetable query properly populates subject (name, code) and teacher (firstName, lastName) information for complete contextual data display\n- **Attendance Data Loading**: Fixed attendance system to properly load and save different data for different dates (previously defaulted to \"present\" for all dates)\n- **Type Safety Improvements**: Added missing type exports (Payroll, LeaveRequest) to shared/schema.ts for better type checking across the application\n- **API Route Optimization**: Simplified bulk attendance route from ~35 lines of direct model manipulation to a clean 3-line storage call maintaining security\n\n### MongoDB Migration (October 29, 2025)\n- **Database Migration**: Successfully migrated from PostgreSQL (Drizzle ORM) to MongoDB (Mongoose)\n- **Schema Conversion**: Converted all database schemas from Drizzle pgTable definitions to Mongoose schemas\n- **Storage Layer Refactor**: Updated entire storage layer to use Mongoose models with proper ObjectId handling\n- **Real Data Implementation**: Removed all dummy/mock data from dashboard stats endpoint\n- **New Analytics Methods**: Added `getFacultyCount`, `getMonthlyRevenue`, and `getPendingFees` methods using MongoDB aggregations\n- **Authentication Updates**: Fixed all API routes to use MongoDB `_id` instead of PostgreSQL `id`\n- **Database Seeding**: Updated seed script to work with MongoDB and populate demo data\n\n### Performance Optimizations (October 29, 2025)\n- **Fixed N+1 Query Problem**: Replaced sequential database queries in `/api/students` endpoint with optimized Mongoose populate queries\n- **Lazy Route Loading**: Implemented React.lazy() and Suspense for all frontend routes to reduce initial bundle size and improve page load times\n- **Database Indexes**: Added indexes to frequently queried fields (tenantId, userId, classId, email) across all major collections\n- **Pagination Support**: Added limit/offset pagination to student list endpoint with parameter validation (capped at 1000, rejects invalid values)\n- **Deterministic Ordering**: Added orderBy clause to student queries for consistent pagination results\n- **Optimized Dashboard Stats**: Using MongoDB aggregations and count queries for real-time statistics\n\n### Dummy Data Removal (October 29, 2025)\n- **Complete Dummy Data Elimination**: Removed all hardcoded/dummy data from all dashboards and reports\n- **SuperAdmin Dashboard**: Added `getTenantsWithStats()` storage method and `/api/tenants/with-stats` endpoint to fetch real student counts and revenue for each tenant\n- **Admin Dashboard**: Created storage methods and API routes for real-time data:\n  - `getRecentAdmissions()` - fetches latest student enrollments with class and parent information\n  - `getFeeCollectionTrends()` - aggregates monthly fee collection data for trend charts\n  - `getRecentActivities()` - tracks recent system activities (admissions, fee payments, exam results)\n- **Reports Page**: Implemented comprehensive analytics methods:\n  - `getAttendanceStats()` - calculates attendance percentages by class\n  - `getPerformanceData()` - aggregates exam results and grade distributions\n  - `getClassDistribution()` - provides student counts by class and section\n  - `getFeeCollectionStats()` - summarizes fee collection status (total, collected, pending)\n- **All Frontend Components Updated**: SuperAdminDashboard, AdminDashboard, and Reports page now fetch and display only real database values\n- **API Endpoints Created**: All new endpoints protected with `authenticateToken`, `tenantIsolation`, and `requireRole` middleware\n- **MongoDB Aggregations**: Utilized MongoDB aggregation pipelines for efficient analytics and statistics calculation\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React with TypeScript using Vite as the build tool and development server.\n\n**Routing**: Wouter - lightweight client-side routing solution for navigation between pages.\n\n**State Management**: \n- TanStack Query (React Query) for server state management, caching, and data fetching\n- React Context API for authentication state (AuthContext)\n- Local component state with React hooks\n\n**UI Component System**:\n- shadcn/ui components (customizable, accessible component library)\n- Radix UI primitives for accessible, unstyled components\n- Tailwind CSS for styling with custom design tokens\n- Design philosophy: Enterprise Application Pattern with focus on clarity, consistency, and efficient data entry\n- Typography: Inter font family for primary text, JetBrains Mono for monospace data\n\n**Form Handling**: React Hook Form with Zod schema validation for type-safe form validation.\n\n**Key Architectural Decisions**:\n- Component-based architecture with reusable UI components (`StatCard`, `DataTable`, `Breadcrumb`)\n- Role-based dashboard rendering - separate dashboard components for each user role\n- Protected route pattern using `ProtectedRoute` wrapper component with Suspense for lazy loading\n- Path aliases configured for cleaner imports (`@/`, `@shared/`, `@assets/`)\n- Lazy loading for all routes to reduce initial bundle size and improve page load performance\n\n### Backend Architecture\n\n**Framework**: Express.js (Node.js) with TypeScript running in ESM mode.\n\n**API Design**: RESTful API structure with resource-based endpoints.\n\n**Authentication & Authorization**:\n- JWT (JSON Web Tokens) for stateless authentication\n- bcryptjs for password hashing\n- Cookie-based token storage with httpOnly flag for security\n- Custom middleware (`authenticateToken`, `requireRole`, `tenantIsolation`) for request validation\n- Session management using cookies\n\n**Multi-tenancy Strategy**:\n- Tenant isolation at database level using `tenantId` foreign keys\n- Middleware-enforced tenant filtering on all queries\n- Super admin role bypasses tenant isolation for system-wide management\n\n**Database ORM**: Mongoose ODM (Object Document Mapper) for MongoDB with schema-based modeling.\n\n**Key Architectural Decisions**:\n- Separation of concerns with storage layer abstraction (`storage.ts` interface)\n- Middleware pipeline for logging, authentication, and tenant isolation\n- Type-safe schema definitions shared between client and server (`shared/schema.ts`)\n- Mongoose models with Zod validation for request data\n- Optimized populate queries to eliminate N+1 query patterns\n- MongoDB aggregations for analytics and statistics\n- Pagination support with parameter validation for list endpoints\n\n### Data Storage\n\n**Database**: MongoDB (cloud-hosted via MongoDB Atlas or similar)\n\n**Connection**: \n- Mongoose ODM for MongoDB\n- Connection string via `MONGODB_URI` environment variable\n- Automatic reconnection handling with connection pooling\n- Environment-based configuration\n\n**Schema Design**:\n- Multi-tenant architecture with `tenants` collection as root\n- User roles managed via string enums: `super_admin`, `admin`, `principal`, `faculty`, `student`, `parent`\n- Core collections: tenants, users, students, classes, subjects, attendance, exams, examResults, feeStructures, feePayments, announcements\n- Document references using ObjectId for relationships\n- Embedded documents where appropriate for performance\n\n**Schema Validation**: \n- Mongoose schema definitions with built-in validation\n- Zod schemas for API request validation\n- Type-safe TypeScript interfaces exported from schema\n\n**Key Design Decisions**:\n- MongoDB ObjectId (`_id`) as primary keys for all documents\n- Timestamp tracking (`createdAt`, `updatedAt` where needed) on all collections\n- String enums for standardized values (user roles, attendance status, gender, fee status, exam types)\n- Mongoose schema references with populate for relational data\n- Database indexes on frequently queried fields (tenantId, userId, classId, email, composite indexes for date-based queries)\n- MongoDB aggregations for analytics and dashboard statistics\n\n### External Dependencies\n\n**Database Services**:\n- MongoDB - NoSQL document database\n- Mongoose - MongoDB object modeling for Node.js\n- MongoDB Atlas (or compatible) - cloud-hosted MongoDB service\n\n**Authentication**:\n- jsonwebtoken - JWT token generation and verification\n- bcryptjs - password hashing and comparison\n- cookie-parser - cookie parsing middleware\n\n**UI Libraries**:\n- Radix UI - accessible component primitives (accordion, alert-dialog, avatar, checkbox, dialog, dropdown-menu, label, popover, progress, radio-group, scroll-area, select, separator, slider, switch, tabs, toast, tooltip)\n- Tailwind CSS - utility-first CSS framework\n- class-variance-authority - variant-based component styling\n- clsx & tailwind-merge - conditional className utilities\n- cmdk - command palette component\n- Recharts - charting library for data visualization\n\n**Development Tools**:\n- TypeScript - type safety across frontend and backend\n- Vite - frontend build tool and dev server\n- ESBuild - backend bundling for production\n- tsx - TypeScript execution for development\n\n**Fonts**:\n- Google Fonts API - Inter (primary) and JetBrains Mono (monospace) font families\n\n**Session Management**:\n- connect-pg-simple - PostgreSQL session store (dependency present but JWT is primary auth method)\n\n**Key Integration Points**:\n- No external payment gateways (fee management is internal tracking)\n- No email service integration (future consideration for notifications)\n- No SMS gateway (future consideration for parent communication)\n- No file storage service (avatars/logos likely stored as URLs)","size_bytes":12312},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/layout/AppSidebar.tsx":{"content":"import { useLocation } from 'wouter';\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from '@/components/ui/sidebar';\nimport {\n  LayoutDashboard,\n  Users,\n  GraduationCap,\n  ClipboardCheck,\n  Calendar,\n  BookOpen,\n  IndianRupee,\n  FileText,\n  MessageSquare,\n  Settings,\n  Building2,\n  UserCog,\n  Bus,\n  Wallet,\n  CalendarDays,\n  BarChart3,\n  LifeBuoy,\n} from 'lucide-react';\nimport { useAuth, type UserRole } from '@/lib/auth';\n\ninterface MenuItem {\n  title: string;\n  icon: React.ComponentType<{ className?: string }>;\n  path: string;\n  roles: UserRole[];\n}\n\nconst menuItems: MenuItem[] = [\n  {\n    title: 'Dashboard',\n    icon: LayoutDashboard,\n    path: '/dashboard',\n    roles: ['super_admin', 'admin', 'principal', 'faculty', 'student', 'parent'],\n  },\n  {\n    title: 'Schools',\n    icon: Building2,\n    path: '/tenants',\n    roles: ['super_admin'],\n  },\n  {\n    title: 'Support Tickets',\n    icon: LifeBuoy,\n    path: '/support-tickets',\n    roles: ['super_admin'],\n  },\n  {\n    title: 'Students',\n    icon: GraduationCap,\n    path: '/students',\n    roles: ['admin', 'principal', 'faculty'],\n  },\n  {\n    title: 'Faculty',\n    icon: Users,\n    path: '/faculty',\n    roles: ['admin', 'principal'],\n  },\n  {\n    title: 'Attendance',\n    icon: ClipboardCheck,\n    path: '/attendance',\n    roles: ['admin', 'principal', 'faculty'],\n  },\n  {\n    title: 'Classes & Subjects',\n    icon: BookOpen,\n    path: '/academics',\n    roles: ['admin', 'principal'],\n  },\n  {\n    title: 'Timetable',\n    icon: Calendar,\n    path: '/timetable',\n    roles: ['admin', 'principal', 'faculty', 'student'],\n  },\n  {\n    title: 'Examinations',\n    icon: FileText,\n    path: '/examinations',\n    roles: ['admin', 'principal', 'faculty', 'student', 'parent'],\n  },\n  {\n    title: 'Fee Management',\n    icon: IndianRupee,\n    path: '/fees',\n    roles: ['admin', 'principal', 'parent', 'student'],\n  },\n  {\n    title: 'Payroll',\n    icon: Wallet,\n    path: '/payroll',\n    roles: ['admin', 'principal', 'faculty'],\n  },\n  {\n    title: 'Transport',\n    icon: Bus,\n    path: '/transport',\n    roles: ['admin', 'student', 'parent'],\n  },\n  {\n    title: 'Leave Management',\n    icon: CalendarDays,\n    path: '/leave-management',\n    roles: ['admin', 'principal', 'faculty'],\n  },\n  {\n    title: 'Reports & Analytics',\n    icon: BarChart3,\n    path: '/reports',\n    roles: ['admin', 'principal'],\n  },\n  {\n    title: 'Communication',\n    icon: MessageSquare,\n    path: '/communication',\n    roles: ['admin', 'principal', 'faculty', 'student', 'parent'],\n  },\n];\n\nexport function AppSidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const filteredMenuItems = menuItems.filter(item =>\n    user && item.roles.includes(user.role)\n  );\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"border-b px-6 py-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex h-10 w-10 items-center justify-center rounded-lg bg-primary text-primary-foreground\">\n            <GraduationCap className=\"h-6 w-6\" />\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold\">School ERP</h2>\n            <p className=\"text-xs text-muted-foreground\">Management System</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Main Menu</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {filteredMenuItems.map((item) => {\n                const Icon = item.icon;\n                const isActive = location === item.path;\n                \n                return (\n                  <SidebarMenuItem key={item.path}>\n                    <SidebarMenuButton\n                      asChild\n                      isActive={isActive}\n                      data-testid={`nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <a href={item.path}>\n                        <Icon className=\"h-5 w-5\" />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}\n","size_bytes":4432},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/pages/Preferences.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Label } from '@/components/ui/label';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Bell, Globe, Save } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function Preferences() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: preferences, isLoading } = useQuery<any>({\n    queryKey: ['/api/preferences'],\n  });\n\n  const [formData, setFormData] = useState({\n    theme: 'system',\n    language: 'en',\n    emailNotifications: true,\n    pushNotifications: true,\n    timezone: 'UTC',\n    dateFormat: 'MM/DD/YYYY',\n  });\n\n  useEffect(() => {\n    if (preferences) {\n      setFormData({\n        theme: preferences.theme || 'system',\n        language: preferences.language || 'en',\n        emailNotifications: preferences.emailNotifications !== false,\n        pushNotifications: preferences.pushNotifications !== false,\n        timezone: preferences.timezone || 'UTC',\n        dateFormat: preferences.dateFormat || 'MM/DD/YYYY',\n      });\n    }\n  }, [preferences]);\n\n  const updatePreferencesMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await fetch('/api/preferences', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update preferences');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/preferences'] });\n      toast({\n        title: 'Success',\n        description: 'Preferences updated successfully',\n      });\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to update preferences',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updatePreferencesMutation.mutate(formData);\n  };\n\n  if (isLoading) {\n    return (\n      <AppLayout>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      </AppLayout>\n    );\n  }\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 max-w-4xl space-y-6\">\n        <Breadcrumb items={[{ label: 'Preferences' }]} />\n        \n        <div>\n          <h1 className=\"text-3xl font-semibold\">Preferences</h1>\n          <p className=\"text-muted-foreground mt-1\">Customize your experience</p>\n        </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Bell className=\"h-5 w-5\" />\n              Notifications\n            </CardTitle>\n            <CardDescription>Manage how you receive notifications</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"emailNotifications\">Email Notifications</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Receive notifications via email\n                </p>\n              </div>\n              <Switch\n                id=\"emailNotifications\"\n                data-testid=\"switch-email-notifications\"\n                checked={formData.emailNotifications}\n                onCheckedChange={(checked) => \n                  setFormData({ ...formData, emailNotifications: checked })\n                }\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"pushNotifications\">Push Notifications</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Receive push notifications in your browser\n                </p>\n              </div>\n              <Switch\n                id=\"pushNotifications\"\n                data-testid=\"switch-push-notifications\"\n                checked={formData.pushNotifications}\n                onCheckedChange={(checked) => \n                  setFormData({ ...formData, pushNotifications: checked })\n                }\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Globe className=\"h-5 w-5\" />\n              Appearance\n            </CardTitle>\n            <CardDescription>Customize how the app looks and feels</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"theme\">Theme</Label>\n              <Select\n                value={formData.theme}\n                onValueChange={(value) => setFormData({ ...formData, theme: value })}\n              >\n                <SelectTrigger id=\"theme\" data-testid=\"select-theme\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"light\">Light</SelectItem>\n                  <SelectItem value=\"dark\">Dark</SelectItem>\n                  <SelectItem value=\"system\">System</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Globe className=\"h-5 w-5\" />\n              Date Format\n            </CardTitle>\n            <CardDescription>Customize how dates are displayed</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dateFormat\">Date Format</Label>\n              <Select\n                value={formData.dateFormat}\n                onValueChange={(value) => setFormData({ ...formData, dateFormat: value })}\n              >\n                <SelectTrigger id=\"dateFormat\" data-testid=\"select-dateformat\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                  <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                  <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"flex justify-end\">\n          <Button type=\"submit\" data-testid=\"button-save-preferences\" disabled={updatePreferencesMutation.isPending}>\n            <Save className=\"mr-2 h-4 w-4\" />\n            {updatePreferencesMutation.isPending ? 'Saving...' : 'Save Preferences'}\n          </Button>\n        </div>\n      </form>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":7509},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { connectToDatabase } from \"./db\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  await connectToDatabase();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2284},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool\n[x] 5. Migrated from PostgreSQL to MongoDB successfully\n[x] 6. Removed dummy data from dashboard stats endpoint - now showing real data from MongoDB\n[x] 7. Added MONGODB_URI secret and connected to MongoDB successfully\n[x] 8. Verified application is running on port 5000 with working login page\n[x] 9. Removed ALL dummy hardcoded data from SuperAdminDashboard, AdminDashboard, and Reports pages\n[x] 10. Created new storage methods for fetching real data (attendance stats, performance, fee collection, class distribution, recent admissions, activities)\n[x] 11. Created new backend API routes for all dashboard and reports data\n[x] 12. Updated all frontend components to fetch and display real data from MongoDB database\n[x] 13. Confirmed database schema - no separate Teacher table, teachers are Users with role='faculty'\n[x] 14. Removed dummy data from Faculty page - now showing real teachers from database\n[x] 15. Removed dummy data from Academics page (Classes & Subjects) - now showing real data\n[x] 16. Fixed critical security vulnerability in faculty management (added tenant isolation)\n[x] 17. Verified application is running successfully with all changes\n[x] 18. User provided MONGODB_URI secret - successfully connected to MongoDB\n[x] 19. Application fully running and verified with screenshot - login page working perfectly\n[x] 20. Migration from Replit Agent to Replit environment completed successfully - October 30, 2025\n[x] 21. All dependencies installed and workflow running on port 5000\n[x] 22. MongoDB connection verified and application ready for production use\n[x] 23. Final migration step completed - MONGODB_URI secret added and verified (October 30, 2025)\n[x] 24. Application successfully running on port 5000 with working login page\n[x] 25. All migration tasks completed - Project fully operational in Replit environment\n[x] 26. October 31, 2025 - MONGODB_URI secret re-added and verified working\n[x] 27. Resolved port conflict (port 5000 already in use) by killing existing process\n[x] 28. Workflow \"Start application\" configured with webview output on port 5000\n[x] 29. Application verified running with screenshot - login page displaying correctly\n[x] 30. All items in progress tracker marked as complete - ready for user to continue building\n[x] 31. October 31, 2025 - Added fee management feature for student role\n[x] 32. Updated AppSidebar to show \"Fee Management\" menu item for students\n[x] 33. Modified Fees.tsx to display student-specific view with payment history and applicable fees\n[x] 34. Updated StudentDashboard to fetch and display real fee data (status, amounts, due dates)\n[x] 35. Architect review completed - feature working correctly with live data from database\n[x] 36. Students can now view their fee payments, pending amounts, and payment history\n[x] 37. October 31, 2025 - Migration to Replit environment completed successfully\n[x] 38. MONGODB_URI secret provided by user and configured\n[x] 39. Resolved port 5000 conflict by killing existing process\n[x] 40. Workflow \"Start application\" restarted successfully with webview output\n[x] 41. MongoDB connection verified - \"Connected to MongoDB successfully\"\n[x] 42. Application running on port 5000 and serving correctly\n[x] 43. Screenshot verification completed - Login page displaying with demo credentials\n[x] 44. All migration tasks marked as complete - Project ready for use\n[x] 45. October 31, 2025 - Fixed leave management bug in faculty section\n[x] 46. Removed hardcoded dummy data from LeaveManagement.tsx\n[x] 47. Integrated React Query for fetching leave requests from API\n[x] 48. Added useMutation for creating new leave requests with proper form validation\n[x] 49. Added useMutation for approving/rejecting leave requests\n[x] 50. Implemented proper cache invalidation - queryClient.invalidateQueries after mutations\n[x] 51. Leave requests now persist to MongoDB and display correctly in UI after creation\n[x] 52. Application restarted successfully - leave management working with real data\n[x] 53. October 31, 2025 - Fixed leave requests not showing for faculty users\n[x] 54. Updated storage method to populate userId field for faculty leave requests\n[x] 55. Faculty users can now see their submitted leave requests in \"My Requests\" tab\n[x] 56. Fixed attendance feature to load existing attendance data\n[x] 57. Added query to fetch existing attendance records for selected date and class\n[x] 58. Attendance now shows previously marked data instead of always defaulting to \"present\"\n[x] 59. Teachers can now view and update attendance for different dates\n[x] 60. Application restarted successfully - both features working with real database data\n[x] 61. October 31, 2025 - Final migration verification completed\n[x] 62. User provided MONGODB_URI secret after migration to Replit environment\n[x] 63. Workflow \"Start application\" configured with webview output on port 5000\n[x] 64. Application successfully connected to MongoDB - \"Connected to MongoDB successfully\"\n[x] 65. Express server running on port 5000\n[x] 66. Screenshot verification - Login page displaying correctly with demo credentials\n[x] 67. All migration tasks completed - School ERP fully operational in Replit environment\n[x] 68. Project ready for development and use - October 31, 2025\n[x] 69. October 31, 2025 - Implemented complete timetable management feature for Admin/Principal roles\n[x] 70. Added backend API routes: POST /api/timetable, PUT /api/timetable/:id, DELETE /api/timetable/:id\n[x] 71. Implemented storage methods: createTimetable, updateTimetable, deleteTimetable, checkTimetableConflict\n[x] 72. Added comprehensive form validation with enum constraints, HH:MM regex, and chronological checks\n[x] 73. Implemented conflict detection to prevent scheduling time slot overlaps\n[x] 74. Created timetable management UI with add/edit/delete dialogs for Admin/Principal users\n[x] 75. Added role-based access control - only Admin, Principal, and Super Admin can manage timetables\n[x] 76. Form validates dayOfWeek (enum), time format (HH:MM), and ensures endTime > startTime\n[x] 77. Implemented proper cache invalidation for real-time UI updates after mutations\n[x] 78. Architect reviewed and approved - feature is production-ready with comprehensive validation\n[x] 79. Application restarted successfully - timetable management fully functional","size_bytes":6622},"client/src/pages/Profile.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { AppLayout } from '@/components/layout/AppLayout';\nimport { Breadcrumb } from '@/components/layout/Breadcrumb';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useAuth } from '@/lib/auth';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { User, Bus, MapPin, IndianRupee, Calendar, Phone, Mail, UserCircle, GraduationCap } from 'lucide-react';\nimport { formatCurrencyINR } from '@/lib/utils';\nimport { format } from 'date-fns';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\nexport default function Profile() {\n  const { user } = useAuth();\n  const isStudent = user?.role === 'student';\n\n  const { data: profileData, isLoading } = useQuery<{\n    student: any;\n    user: any;\n    transport: any;\n    fees: any;\n  }>({\n    queryKey: ['/api/student/profile'],\n    enabled: !!isStudent,\n  });\n\n  if (!isStudent) {\n    return (\n      <AppLayout>\n        <div className=\"p-6\">\n          <p className=\"text-muted-foreground\">Profile page is only available for students</p>\n        </div>\n      </AppLayout>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <AppLayout>\n        <div className=\"p-6 space-y-6 max-w-5xl\">\n          <Skeleton className=\"h-12 w-64\" />\n          <div className=\"grid gap-6\">\n            <Skeleton className=\"h-64\" />\n            <Skeleton className=\"h-64\" />\n            <Skeleton className=\"h-64\" />\n          </div>\n        </div>\n      </AppLayout>\n    );\n  }\n\n  const student = profileData?.student;\n  const userInfo = profileData?.user;\n  const transport = profileData?.transport;\n  const fees = profileData?.fees;\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6 max-w-5xl\">\n        <Breadcrumb items={[{ label: 'My Profile' }]} />\n\n        <div>\n          <h1 className=\"text-3xl font-semibold\" data-testid=\"text-profile-heading\">Student Profile</h1>\n          <p className=\"text-muted-foreground mt-1\">\n            View your personal information, transport details, and fee status\n          </p>\n        </div>\n\n        {/* Personal Information Card */}\n        <Card data-testid=\"card-personal-info\">\n          <CardHeader>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-3 bg-primary/10 rounded-lg\">\n                <UserCircle className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div>\n                <CardTitle>Personal Information</CardTitle>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Your basic details and contact information\n                </p>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start gap-3\">\n                  <User className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Full Name</p>\n                    <p className=\"font-semibold\" data-testid=\"text-student-name\">\n                      {userInfo?.firstName} {userInfo?.lastName}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3\">\n                  <GraduationCap className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Admission Number</p>\n                    <p className=\"font-semibold\" data-testid=\"text-admission-number\">\n                      {student?.admissionNumber || 'N/A'}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start gap-3\">\n                  <UserCircle className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Gender</p>\n                    <p className=\"font-semibold\" data-testid=\"text-gender\">\n                      {student?.gender ? student.gender.charAt(0).toUpperCase() + student.gender.slice(1) : 'N/A'}\n                    </p>\n                  </div>\n                </div>\n\n                {student?.rollNumber && (\n                  <div className=\"flex items-start gap-3\">\n                    <GraduationCap className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Roll Number</p>\n                      <p className=\"font-semibold\" data-testid=\"text-roll-number\">\n                        {student.rollNumber}\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start gap-3\">\n                  <Mail className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Email</p>\n                    <p className=\"font-semibold\" data-testid=\"text-email\">\n                      {userInfo?.email || 'N/A'}\n                    </p>\n                  </div>\n                </div>\n\n                {userInfo?.phone && (\n                  <div className=\"flex items-start gap-3\">\n                    <Phone className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Phone</p>\n                      <p className=\"font-semibold\" data-testid=\"text-phone\">\n                        {userInfo.phone}\n                      </p>\n                    </div>\n                  </div>\n                )}\n\n                {student?.dateOfBirth && (\n                  <div className=\"flex items-start gap-3\">\n                    <Calendar className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Date of Birth</p>\n                      <p className=\"font-semibold\" data-testid=\"text-dob\">\n                        {format(new Date(student.dateOfBirth), 'dd MMM yyyy')}\n                      </p>\n                    </div>\n                  </div>\n                )}\n\n                {student?.bloodGroup && (\n                  <div className=\"flex items-start gap-3\">\n                    <User className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Blood Group</p>\n                      <p className=\"font-semibold\" data-testid=\"text-blood-group\">\n                        {student.bloodGroup}\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {student?.address && (\n              <div className=\"mt-6 pt-6 border-t\">\n                <div className=\"flex items-start gap-3\">\n                  <MapPin className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Address</p>\n                    <p className=\"font-semibold\" data-testid=\"text-address\">\n                      {student.address}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {(student?.fatherName || student?.motherName || student?.parentContact) && (\n              <div className=\"mt-6 pt-6 border-t\">\n                <p className=\"text-sm font-medium mb-4\">Parent/Guardian Details</p>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {student?.fatherName && (\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Father's Name</p>\n                      <p className=\"font-semibold\" data-testid=\"text-father-name\">\n                        {student.fatherName}\n                      </p>\n                    </div>\n                  )}\n                  {student?.motherName && (\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Mother's Name</p>\n                      <p className=\"font-semibold\" data-testid=\"text-mother-name\">\n                        {student.motherName}\n                      </p>\n                    </div>\n                  )}\n                  {student?.parentContact && (\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Parent Contact</p>\n                      <p className=\"font-semibold\" data-testid=\"text-parent-contact\">\n                        {student.parentContact}\n                      </p>\n                    </div>\n                  )}\n                  {student?.emergencyContact && (\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Emergency Contact</p>\n                      <p className=\"font-semibold\" data-testid=\"text-emergency-contact\">\n                        {student.emergencyContact}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Transport Details Card */}\n        <Card data-testid=\"card-transport-info\">\n          <CardHeader>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-3 bg-primary/10 rounded-lg\">\n                <Bus className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div>\n                <CardTitle>Transport Details</CardTitle>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Your school transport assignment and route information\n                </p>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {transport ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-start gap-3\">\n                    <Bus className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Route Name</p>\n                      <p className=\"font-semibold\" data-testid=\"text-transport-route-name\">\n                        {transport.routeName || 'N/A'}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start gap-3\">\n                    <Bus className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Route Number</p>\n                      <p className=\"font-semibold\" data-testid=\"text-transport-route-number\">\n                        {transport.routeNumber || 'N/A'}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start gap-3\">\n                    <Bus className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Vehicle Number</p>\n                      <p className=\"font-semibold\" data-testid=\"text-transport-vehicle\">\n                        {transport.vehicleNumber || 'N/A'}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {transport.pickupStop && (\n                    <div className=\"flex items-start gap-3\">\n                      <MapPin className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Pickup Stop</p>\n                        <p className=\"font-semibold\" data-testid=\"text-transport-pickup\">\n                          {transport.pickupStop}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {transport.dropStop && (\n                    <div className=\"flex items-start gap-3\">\n                      <MapPin className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Drop Stop</p>\n                        <p className=\"font-semibold\" data-testid=\"text-transport-drop\">\n                          {transport.dropStop}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {transport.fare && (\n                    <div className=\"flex items-start gap-3\">\n                      <IndianRupee className=\"h-5 w-5 text-muted-foreground mt-1\" />\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Monthly Fare</p>\n                        <p className=\"font-semibold\" data-testid=\"text-transport-fare\">\n                          {formatCurrencyINR(transport.fare)}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <Bus className=\"h-12 w-12 text-muted-foreground mx-auto mb-3\" />\n                <p className=\"text-muted-foreground\" data-testid=\"text-no-transport\">\n                  No transport assignment found\n                </p>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  You are not currently assigned to any transport route\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Fee Summary Card */}\n        <Card data-testid=\"card-fee-info\">\n          <CardHeader>\n            <div className=\"flex items-center gap-3\">\n              <div className=\"p-3 bg-primary/10 rounded-lg\">\n                <IndianRupee className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div>\n                <CardTitle>Fee Summary</CardTitle>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Your fee payment status and transaction history\n                </p>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n              <div className=\"p-4 bg-blue-50 dark:bg-blue-950/20 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Total Fees</p>\n                <p className=\"text-2xl font-bold text-blue-700 dark:text-blue-400\" data-testid=\"text-total-fees\">\n                  {formatCurrencyINR(fees?.totalFees || 0)}\n                </p>\n              </div>\n\n              <div className=\"p-4 bg-green-50 dark:bg-green-950/20 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Amount Paid</p>\n                <p className=\"text-2xl font-bold text-green-700 dark:text-green-400\" data-testid=\"text-paid-fees\">\n                  {formatCurrencyINR(fees?.paidAmount || 0)}\n                </p>\n              </div>\n\n              <div className=\"p-4 bg-orange-50 dark:bg-orange-950/20 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-1\">Pending Balance</p>\n                <p className=\"text-2xl font-bold text-orange-700 dark:text-orange-400\" data-testid=\"text-pending-fees\">\n                  {formatCurrencyINR(fees?.pendingAmount || 0)}\n                </p>\n              </div>\n            </div>\n\n            {fees?.recentPayments && fees.recentPayments.length > 0 ? (\n              <div>\n                <h3 className=\"text-sm font-semibold mb-3\">Recent Payments</h3>\n                <div className=\"rounded-md border\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Date</TableHead>\n                        <TableHead>Amount</TableHead>\n                        <TableHead>Payment Mode</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Receipt</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {fees.recentPayments.map((payment: any, index: number) => (\n                        <TableRow key={payment._id || index} data-testid={`row-payment-${payment._id}`}>\n                          <TableCell data-testid={`text-payment-date-${payment._id}`}>\n                            {format(new Date(payment.paymentDate), 'dd MMM yyyy')}\n                          </TableCell>\n                          <TableCell className=\"font-medium\" data-testid={`text-payment-amount-${payment._id}`}>\n                            {formatCurrencyINR(payment.amount)}\n                          </TableCell>\n                          <TableCell data-testid={`text-payment-mode-${payment._id}`}>\n                            {payment.paymentMode}\n                          </TableCell>\n                          <TableCell>\n                            <Badge \n                              variant={payment.status === 'paid' ? 'default' : 'secondary'}\n                              data-testid={`badge-payment-status-${payment._id}`}\n                            >\n                              {payment.status}\n                            </Badge>\n                          </TableCell>\n                          <TableCell data-testid={`text-payment-receipt-${payment._id}`}>\n                            {payment.receiptNumber || 'N/A'}\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <IndianRupee className=\"h-12 w-12 text-muted-foreground mx-auto mb-3\" />\n                <p className=\"text-muted-foreground\" data-testid=\"text-no-payments\">\n                  No payment history found\n                </p>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Your payment transactions will appear here\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":18491}},"version":2}